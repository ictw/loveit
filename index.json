[{"categories":["VPS","GFW"],"content":"前两天入手了RackNerd的一台VPS，选的区域是华盛顿西雅图，搭建好magic上网之后，访问Google老是跳人机验证，非常频繁，用起来特别烦人（问tg群里大哥说好像除了洛杉矶区域外基本都跳Google人机验证），都有种想换搜索引擎的冲动。但是本着要解决问题和爱折腾的态度，还是尝试解决一下吧。 :warning: 以下部分内容来源于网络，仅做个人备份学习使用。 ","date":"2021-12-02","objectID":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/:0:0","tags":["VPS"],"title":"解决VPS频繁Google人机验证（IP被ban）","uri":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/"},{"categories":["VPS","GFW"],"content":"解决方案 网上搜集的解决方案有以下几种： 更换IP：频繁跳Google验证意味着你的IP被Google墙了，被识别为恶意IP，换了IP也不一定管用，到头来折了IP又损了money，亏到裤衩都没了； 使用IPv6：配置IPv6来访问Google，我这十几刀/yr的VPS就别想IPv6了，xd； 使用IPv6隧道：同上，不同之处就是借用了IPv6隧道，使原来仅有IPv4的机子拥有IPv6的能力，或许这是个很好的解决方案，值得尝试，事实上这也解决了我的问题； 【附加】：听tg群友说套warp VPN也可以解决，但是没试过，具体参考:link: 用 Cloudflare Warp 彻底解决 Google IP 定位中国的问题、:link: 安装warp解决Google搜索出现人机验证、解锁Netfix非自制剧最新教程； 【补充】：感谢@crazypeace网友推荐的一键安装Cloudflare WARP 并添加 IPv6 脚本；:heart: bash \u003c(curl -fsSL git.io/warp.sh) 6 GitHub仓库地址：https://github.com/P3TERX/warp.sh ","date":"2021-12-02","objectID":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/:1:0","tags":["VPS"],"title":"解决VPS频繁Google人机验证（IP被ban）","uri":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/"},{"categories":["VPS","GFW"],"content":"申请免费的IPv6隧道 首先申请一个免费的IPv6隧道，这里我使用的是Tunnelbroker，免费简单好用。 申请账号的过程非常简单，输入一些虚拟的个人信息就行，直接胡编乱填就行了，或者在虚拟外国身份站点上随机一个身份信息，填好邮箱接受邮箱验证就完事了。 申请完账号之后登录，点击左边的这个Create Regular Tunnel创建一般隧道，输入你的IPv4公网IP，选择一个合适的隧道服务器节点，系统会自动选择和你区域相当的节点，所以默认就可以，然后直接点击下方的Create Tunel即可. 创建完成之后，点击隧道详情，就可以看到申请好的IPv6地址： 要使用的是上图红框中的IPv6客户端地址. ","date":"2021-12-02","objectID":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/:2:0","tags":["VPS"],"title":"解决VPS频繁Google人机验证（IP被ban）","uri":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/"},{"categories":["VPS","GFW"],"content":"配置服务器使用IPv6隧道 在Tunnelbroker的隧道详情页中点击Example Configurations示例配置，找到匹配自己VPS系统的配置片段，这里我以我的Ubuntu 20.04为例（其他发行版类似）： 需要输的命令挺多的，这里我整理为脚本，一条命令傻瓜式运行即可，建议直接使用root用户运行，省事： :question:不想看脚本？请直接跳到:smile: 运行在线的jio本 #!/usr/bin/env bash set -euo pipefail # #************************************************** # Author: AGou-ops * # E-mail: agou-ops@foxmail.com * # Date: 2021-12-02 * # Description: * # Copyright 2021 by AGou-ops.All Rights Reserved * #************************************************** # ---------------- echoColor(){ echo -e \"\\033[36m$1\\033[0m\" } # 启用ipv6 cat \u003c\u003c EOF \u003e\u003e /etc/sysctl.conf net.ipv6.conf.all.disable_ipv6 = 0 net.ipv6.conf.default.disable_ipv6 = 0 net.ipv6.conf.lo.disable_ipv6 = 0 EOF sysctl -p echoColor \"====== 启用ipv6 ======\\n\" # ！！！！！重要！！！！！ # 将下面的重定向内容替换为上面示例的配置片段内容 cat \u003c\u003c EOF \u003e\u003e /etc/network/interfaces auto he-ipv6 iface he-ipv6 inet6 v4tunnel address xxxx:xxx:a:10d::2 netmask 64 endpoint 216.xx.xx.xx local 23.xx.x.xx ttl 255 gateway 2001:xx:a:10d::1 EOF echoColor \"====== 修改网络配置文件成功 ======\\n\" apt update -y 2\u003e\u00261 \u003e /dev/null apt install ifupdown dnsutils -y 2\u003e\u00261 \u003e /dev/null echoColor \"====== 安装必要包完成，图个方便，不为啥 ======\\n\" sleep 1 # 启动ipv6网络接口，如果没生效可以尝试重启网络 ifup he-ipv6 echoColor \"====== 接口内容信息如下 ======\\n\" ip a show dev he-ipv6 echoColor \"========================\\n\" # 备份原来的dns cp -a /etc/resolv.conf{,.bak} cat \u003c\u003c EOF \u003e\u003e /etc/resolv.conf nameserver 8.8.8.8 nameserver 8.8.4.4 EOF echoColor \"====== 修改dns完成 ======\\n\" # 这里用ping查看ipv6地址也可以，这里我图方便使用dig好了 google_ipv6=$(dig www.google.com AAAA | grep -E \"^www\" | awk '{print $5}') echo \"$google_ipv6www.google.com\" \u003e /etc/hosts echoColor \"====== 修改hosts文件完成 ======\\n\" # 默认访问时会使用IPv6线路进行访问，考虑到速度问题，建议优先使用IPv4 sed -i 's@#precedence ::ffff:0:0/96 100@precedence ::ffff:0:0/96 100@g' /etc/gai.conf echoColor \"====== 配置优先IPv4完成 ======\\n\" echoColor \"\\n\\nDone.\" 使用root用户运行以上jio本： chmod +x install_ipv6_tunnel.sh ./install_ipv6_tunnel.sh # 等待安装完成即可 ","date":"2021-12-02","objectID":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/:3:0","tags":["VPS"],"title":"解决VPS频繁Google人机验证（IP被ban）","uri":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/"},{"categories":["VPS","GFW"],"content":":smile: 运行在线的jio本 直接在线运行上面的脚本，不用手动复制然后执行了，一条命令完事: wget -P /root -N --no-check-certificate \"https://gist.githubusercontent.com/AGou-ops/d0c65269da6c77e49a410c6dbe9ce244/raw/e81ed2bcaea9aef80eeda799adbba2bfb63b2f67/install_ipv6_tunnel.sh\" \u0026\u0026 chmod +x /root/install_ipv6_tunnel.sh \u0026\u0026 /root/install_ipv6_tunnel.sh ","date":"2021-12-02","objectID":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/:3:1","tags":["VPS"],"title":"解决VPS频繁Google人机验证（IP被ban）","uri":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/"},{"categories":["VPS","GFW"],"content":"检查VPS的IPv6地址 检查VPS的IPv6地址是否生效，以及VPS的网络是否IPv4优先： # 查询本机外网IPv6地址 curl 6.ipw.cn # 备用查询地址 curl ipv6.ip.sb # 测试网络是IPv4还是IPv6访问优先(访问IPv4/IPv6双栈站点，如果返回IPv6地址，则IPv6访问优先) curl test.ipw.cn 也可以浏览器直接访问https://ipw.cn/进行查看. Done. ","date":"2021-12-02","objectID":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/:4:0","tags":["VPS"],"title":"解决VPS频繁Google人机验证（IP被ban）","uri":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/"},{"categories":["VPS","GFW"],"content":"参考链接 安装warp解决Google搜索出现人机验证、解锁Netfix非自制剧最新教程: https://www.4spaces.org/warp-netflix-google-code-solved/ ","date":"2021-12-02","objectID":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/:5:0","tags":["VPS"],"title":"解决VPS频繁Google人机验证（IP被ban）","uri":"/loveit/post/%E8%A7%A3%E5%86%B3vps%E9%A2%91%E7%B9%81google%E4%BA%BA%E6%9C%BA%E9%AA%8C%E8%AF%81ip%E8%A2%AB%E5%A2%99/"},{"categories":["MacOS","neovim"],"content":"问题详情参考：https://blog.deskangel.com/2021/04/03/vim-j-k-speed-issue/ 在iterm2中强制让英文输入法切换为内置的ABC输入法而不使用搜狗或者其他输入法的英文状态. 在使用iterm2的时候，将左shift键重新映射为command+space键（在系统快捷键中设置切换输入法的快捷键，这里你可以自定义）。 使用以下命令将上面这个键盘映射json文件导入到karabiner里面（浏览器打开就可以，会自动拉起karabiner，路径自定义。） karabiner://karabiner/assets/complex_modifications/import?url=file:///Users/agou-ops/Desktop/iterm2.json # 或者直接使用我上传好的在线gist文件. karabiner://karabiner/assets/complex_modifications/import?url=https://gist.githubusercontent.com/AGou-ops/cb8659d99ff47f32eeb14a81ad47a2a9/raw/85b9ecce462330c57de0930d9495d257ed903ac1/iterm2_key.json ","date":"2022-08-05","objectID":"/loveit/post/macos-%E7%BB%88%E7%AB%AF%E4%B8%8B%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8%E9%97%AE%E9%A2%98/:0:0","tags":[],"title":"MacOS偏门解决vim/Neovim光标跳转（j/k键）卡顿的问题。【使用karabiner】","uri":"/loveit/post/macos-%E7%BB%88%E7%AB%AF%E4%B8%8B%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8%E9%97%AE%E9%A2%98/"},{"categories":[],"content":"以上是Grafana Template的页面截图，🔗 https://grafana.com/grafana/dashboards/12268 ","date":"2022-04-24","objectID":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/:0:0","tags":[],"title":"NGINX LOGS \u0026 GEO MAP(Grafana)详细部署","uri":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/"},{"categories":[],"content":"重新编译nginx添加geoip2模块 ","date":"2022-04-24","objectID":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/:1:0","tags":[],"title":"NGINX LOGS \u0026 GEO MAP(Grafana)详细部署","uri":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/"},{"categories":[],"content":"准备编译环境 以下以Debian系为例： sudo apt install -y build-essential sudo apt install -y git libpcre3 libpcre3-dev openssl libssl-dev zlib1g-dev openssl libssl-dev # 编译ngx_http_geoip2_module之前需要安装libmaxminddb sudo add-apt-repository ppa:maxmind/ppa sudo apt update sudo apt install libmaxminddb0 libmaxminddb-dev mmdb-bin ","date":"2022-04-24","objectID":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/:1:1","tags":[],"title":"NGINX LOGS \u0026 GEO MAP(Grafana)详细部署","uri":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/"},{"categories":[],"content":"编译nginx with ngx_http_geoip2_module ngx_http_geoip2_module模块地址：https://github.com/leev/ngx_http_geoip2_module # 下载nginx源码包 wget http://nginx.org/download/nginx-1.20.1.tar.gz tar xf nginx-1.20.1.tar.gz # 从github下载ngx_http_geoip2_module源码包 git clone https://github.com/leev/ngx_http_geoip2_module # 开始编译 cd nginx-1.20.1 ./configure -add-dynamic-module=/root/ngx_http_geoip2_module # 后面这个是ngx_http_geoip2_module源码包的绝对路径 make -j 2 make install :warning:注意： 如果编译安装完发现没有生成objs/ngx_http_geoip2_module.so文件，只有objs/ngx_http_geoip2_module.o，那么你可能就需要重新编译安装了； 编译安装时带上之前的那些参数，直接复制，然后行尾追加ngx_http_geoip2_module动态模块即可。 如：（PS：其他参数是通过nginx -V获得的） ./configure --with-cc-opt='-g -O2 -fdebug-prefix-map=/build/nginx-7KvRN5/nginx-1.18.0=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -fPIC' --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --modules-path=/usr/lib/nginx/modules --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-compat --with-pcre-jit --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_v2_module --with-http_dav_module --with-http_slice_module --with-threads --with-http_addition_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_xslt_module=dynamic --with-stream=dynamic --with-stream_ssl_module --with-mail=dynamic --with-mail_ssl_module --add-dynamic-module=/root/ngx_http_geoip2_module 以下为编译安装之后的相关文件路径： nginx path prefix: \"/usr/local/nginx\" nginx binary file: \"/usr/local/nginx/sbin/nginx\" nginx modules path: \"/usr/local/nginx/modules\" nginx configuration prefix: \"/usr/local/nginx/conf\" nginx configuration file: \"/usr/local/nginx/conf/nginx.conf\" nginx pid file: \"/usr/local/nginx/logs/nginx.pid\" nginx error log file: \"/usr/local/nginx/logs/error.log\" nginx http access log file: \"/usr/local/nginx/logs/access.log\" nginx http client request body temporary files: \"client_body_temp\" nginx http proxy temporary files: \"proxy_temp\" nginx http fastcgi temporary files: \"fastcgi_temp\" nginx http uwsgi temporary files: \"uwsgi_temp\" nginx http scgi temporary files: \"scgi_temp\" ","date":"2022-04-24","objectID":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/:1:2","tags":[],"title":"NGINX LOGS \u0026 GEO MAP(Grafana)详细部署","uri":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/"},{"categories":[],"content":"修改nginx配置文件 $ vim /usr/local/nginx/conf/nginx.conf # 在http里面添加以下内容 geoip2 /config/geoip2db/GeoLite2-City.mmdb { auto_reload 5m; $geoip2_data_country_iso_code country iso_code; $geoip2_data_city_name city names en; } # 自定义日志文件格式 log_format custom '$remote_addr - $remote_user [$time_local]' '\"$request\" $status $body_bytes_sent' '\"$http_referer\" $host \"$http_user_agent\"' '\"$request_time\" \"$upstream_connect_time\"' '\"$geoip2_data_city_name\" \"$geoip2_data_country_iso_code\"'; access_log /config/log/nginx/access.log custom; :information_source:GeoLite2-City.mmdb文件可以从GitHub下载或者自己注册一个账号下载：https://www.maxmind.com/en/geolite2/signup 修改完成之后重启nginx，systemctl restart nginx ","date":"2022-04-24","objectID":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/:1:3","tags":[],"title":"NGINX LOGS \u0026 GEO MAP(Grafana)详细部署","uri":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/"},{"categories":[],"content":"使用脚本将日志写入influxDB 运行脚本之前，安装一下influxDB，注意安装版本要使用1.8x版本，新版2.x版本不可以，github releases地址：https://github.com/influxdata/influxdb/releases # 安装influxdb wget https://dl.influxdata.com/influxdb/releases/influxdb_1.8.10_amd64.deb sudo dpkg -i influxdb_1.8.10_amd64.deb systemctl start influxdb Python脚本geoip2influx.py内容如下： #! /usr/bin/env python3 from os.path import exists, isfile from os import environ as env, stat from platform import uname from re import compile, match, search, IGNORECASE from sys import path, exit from time import sleep, time from datetime import datetime import logging from geoip2.database import Reader from geohash2 import encode from influxdb import InfluxDBClient from requests.exceptions import ConnectionError from influxdb.exceptions import InfluxDBServerError, InfluxDBClientError from IPy import IP as ipadd # Getting params from envs geoip_db_path = '/config/geoip2db/GeoLite2-City.mmdb' log_path = env.get('NGINX_LOG_PATH', '/config/log/nginx/access.log') influxdb_host = env.get('INFLUX_HOST', 'localhost') influxdb_port = env.get('INFLUX_HOST_PORT', '8086') influxdb_database = env.get('INFLUX_DATABASE', 'geoip2influx') influxdb_user = env.get('INFLUX_USER', 'root') influxdb_user_pass = env.get('INFLUX_PASS', 'root') influxdb_retention = env.get('INFLUX_RETENTION','7d') influxdb_shard = env.get('INFLUX_SHARD', '1d') geo_measurement = env.get('GEO_MEASUREMENT', 'geoip2influx') log_measurement = env.get('LOG_MEASUREMENT', 'nginx_access_logs') send_nginx_logs = env.get('SEND_NGINX_LOGS','true') log_level = env.get('GEOIP2INFLUX_LOG_LEVEL', 'info').upper() g2i_log_path = env.get('GEOIP2INFLUX_LOG_PATH','/config/log/geoip2influx/geoip2influx.log') # Logging logging.basicConfig(level=log_level,format='GEOIP2INFLUX %(asctime)s:: %(levelname)s:: %(message)s',datefmt='%d/%b/%Y %H:%M:%S',handlers=[logging.StreamHandler(),logging.FileHandler(g2i_log_path)]) # global variables monitored_ip_types = ['PUBLIC', 'ALLOCATED APNIC', 'ALLOCATED ARIN', 'ALLOCATED RIPE NCC', 'ALLOCATED LACNIC', 'ALLOCATED AFRINIC'] def regex_tester(log_path, N): time_out = time() + 60 re_ipv4 = compile(r'(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})') re_ipv6 = compile(r'(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))') # NOQA while True: assert N \u003e= 0 pos = N + 1 lines = [] with open(log_path) as f: while len(lines) \u003c= N: try: f.seek(-pos, 2) except IOError: f.seek(0) break finally: lines = list(f) pos *= 2 log_lines = lines[-N:] for line in log_lines: if re_ipv4.match(line): regex = compile(r'(?P\u003cipaddress\u003e\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}) - (?P\u003cremote_user\u003e.+) \\[(?P\u003cdateandtime\u003e\\d{2}\\/[A-Z]{1}[a-z]{2}\\/\\d{4}:\\d{2}:\\d{2}:\\d{2} ((\\+|\\-)\\d{4}))\\]([\"](?P\u003cmethod\u003e.+)) (?P\u003creferrer\u003e.+) ((?P\u003chttp_version\u003eHTTP\\/[1-3]\\.[0-9])[\"]) (?P\u003cstatus_code\u003e\\d{3}) (?P\u003cbytes_sent\u003e\\d{1,99})([\"](?P\u003curl\u003e(\\-)|(.+))[\"]) (?P\u003chost\u003e.+) ([\"](?P\u003cuser_agent\u003e.+)[\"])([\"](?P\u003crequest_time\u003e.+)[\"]) ([\"](?P\u003cconnect_time\u003e.+)[\"])([\"](?P\u003ccity\u003e.+)[\"]) ([\"](?P\u003ccountry_code\u003e.+)[\"])', IGNORECASE) # NOQA if regex.match(line): logging.debug(f'Regex is matching {log_path} continuing...') return True if re_ipv6.match(line): regex = compile(r'(?P\u003cipaddress\u003e(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}","date":"2022-04-24","objectID":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/:2:0","tags":[],"title":"NGINX LOGS \u0026 GEO MAP(Grafana)详细部署","uri":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/"},{"categories":[],"content":"检查生成的influxDB数据 # 打开influxdb的客户端cli工具 root@localhost:/usr/local/nginx/conf\\# influx Connected to http://localhost:8086 version 1.8.10 InfluxDB shell version: 1.8.10 \u003e show databases name: databases name ---- _internal telegraf geoip2influx \u003e use geoip2influx Using database geoip2influx \u003e show measurements name: measurements name ---- geoip2influx nginx_access_logs \u003e select * from geoip2influx name: geoip2influx time city count country_code country_name geohash host ip latitude longitude postal_code state state_code ---- ---- ----- ------------ ------------ ------- ---- -- -------- --------- ----------- ----- ---------- 1650704346070671041 Central 1 HK Hong Kong wecnv9ct6479 KeyFlawless-VM 103.149.249.71 22.2908 114.1501 - Central and Western District HCW 1650704349127071114 Central 1 HK Hong Kong wecnv9ct6479 KeyFlawless-VM 103.149.249.71 22.2908 114.1501 - Central and Western District HCW 1650704349136628924 Central 1 HK Hong Kong wecnv9ct6479 KeyFlawless-VM 103.149.249.71 22.2908 114.1501 - Central and Western District HCW 1650704350147606699 Central 1 HK Hong Kong wecnv9ct6479 KeyFlawless-VM 103.149.249.71 22.2908 114.1501 - Central and Western District HCW ","date":"2022-04-24","objectID":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/:2:1","tags":[],"title":"NGINX LOGS \u0026 GEO MAP(Grafana)详细部署","uri":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/"},{"categories":[],"content":"Grafana中添加influxDB数据源 简单两步骤： 添加模板： ","date":"2022-04-24","objectID":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/:3:0","tags":[],"title":"NGINX LOGS \u0026 GEO MAP(Grafana)详细部署","uri":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/"},{"categories":[],"content":"最终结果 Done. ","date":"2022-04-24","objectID":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/:4:0","tags":[],"title":"NGINX LOGS \u0026 GEO MAP(Grafana)详细部署","uri":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/"},{"categories":[],"content":"参考链接 https://github.com/GilbN/geoip2influx https://github.com/leev/ngx_http_geoip2_module https://github.com/maxmind/libmaxminddb ","date":"2022-04-24","objectID":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/:5:0","tags":[],"title":"NGINX LOGS \u0026 GEO MAP(Grafana)详细部署","uri":"/loveit/post/nginx-logs-geo-mapgrafana%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2/"},{"categories":["Windows","Golang"],"content":"Golang 实现检测Windows服务存活性以及就绪性，当失败时尝试重启该服务。","date":"2022-04-06","objectID":"/loveit/post/windows%E6%9C%8D%E5%8A%A1%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%87%8D%E5%90%AFgolang/","tags":["Windows","Service","Golang"],"title":"Windows服务检测与重启（Golang）","uri":"/loveit/post/windows%E6%9C%8D%E5%8A%A1%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%87%8D%E5%90%AFgolang/"},{"categories":["Windows","Golang"],"content":"检测和处理逻辑 ","date":"2022-04-06","objectID":"/loveit/post/windows%E6%9C%8D%E5%8A%A1%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%87%8D%E5%90%AFgolang/:1:0","tags":["Windows","Service","Golang"],"title":"Windows服务检测与重启（Golang）","uri":"/loveit/post/windows%E6%9C%8D%E5%8A%A1%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%87%8D%E5%90%AFgolang/"},{"categories":["Windows","Golang"],"content":"代码编写与交叉编译 代码内容如下（Golang学习过程中写的，比较水，随便看看就得了，:joy: ）： package main import ( \"fmt\" \"io\" \"io/ioutil\" \"log\" \"net/http\" \"os\" \"os/exec\" \"regexp\" \"strings\" \"time\" colorable \"github.com/mattn/go-colorable\" \"github.com/sirupsen/logrus\" ) var ( ch = make(chan int) IDocViewUrl = \"https://view.xbongbong.com/\" // 探活时间间隔 interval = time.Second * 30 Sum int pidSlice = []int{} ticker = time.NewTicker(interval) ) func init() { logrus.SetFormatter(\u0026logrus.TextFormatter{ForceColors: true}) logrus.SetOutput(colorable.NewColorableStdout()) } func main() { // 启动延时。。× /* tick := time.Tick(1 * time.Second) for countdown := 10; countdown \u003e 0; countdown-- { fmt.Printf(\"\\r%2d\", countdown) \u003c-tick } */ fileWriter, err := os.OpenFile(\"log.txt\", os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0755) defer fileWriter.Close() if err != nil { log.Fatalln(\"Can't open log.txt...\", err) } logger := log.New(io.Writer(fileWriter), \"\", log.Lshortfile|log.Ldate|log.LstdFlags) // 每60s探测一次 go func() { for t := range ticker.C { fmt.Println(\"Tick at\", t) // resp, err := http.Get(IDocViewUrl) resp, err := http.Get(IDocViewUrl) if err != nil { log.Println(err) log.Println(pidSlice) log.Printf(\"正在进行第【%v/3】次探测。。。\\n\", len(pidSlice)) HandleReturnResp(strings.NewReader(\"\"), 0, logger) continue } HandleReturnResp(resp.Body, resp.StatusCode, logger) } ch \u003c- 1 }() \u003c-ch } // HandleReturnResp: 处理body返回内容以及返回响应码 func HandleReturnResp(r io.Reader, respCode int, logger *log.Logger) { if len(pidSlice) \u003e= 3 { pidSlice = nil } body, err := ioutil.ReadAll(r) if err != nil { logger.Println(err) } respStr := string(body) matchStr, _ := regexp.MatchString(\".*10.6.1_20200807.*\", respStr) // 满足正则表达要求，且返回值为200 if respCode == 0 { // *** 存活性探测失败：0 pidSlice = append(pidSlice, 0) GetPorcessPid(logger) } else if matchStr \u0026\u0026 respCode == 200 { // *** 通过存活性探测，且通过就绪性探测: 1 pidSlice = append(pidSlice, 1) logger.SetPrefix(\"【SUCCESS】\") logger.Println(\"服务正常，状态码\", respCode, \"\\r\\n\") logrus.Info(\"服务正常!\") } else { // *** 通过存活性探测，但就绪性探测失败：0 pidSlice = append(pidSlice, 0) GetPorcessPid(logger) } } // GetPorcessPid: 重启iDocView服务 func GetPorcessPid(logger *log.Logger) { cmd := exec.Command(\"tasklist.exe\", \"/fo\", \"csv\", \"/nh\") out, err := cmd.Output() if err != nil { log.Println(err) } // 使用正则匹配iiDocView运行之后的Java进程 re := regexp.MustCompile(\".*java.*\") text := strings.Join(re.FindAllString(string(out), -1), \",\") pid := strings.Split(text, \",\") // if len(pidSlice) \u003e= 3 { // pidSlice = nil // } logger.SetPrefix(\"【FAILED】 \") logger.Printf(\"探活失败--%v--\\r\\n\", len(pidSlice)) // 当进程不存在时，会抛出超索引panic，在此使用recover进行捕获 // 标志0为进程不存在 defer func() { if err := recover(); err != nil { // pidSlice = append(pidSlice, 0) HandleProcessCondition(pidSlice, \"\") } }() fmt.Println(\"the Java process pid is: \", pid[1]) // 标志1为进程存在 // pidSlice = append(pidSlice, 1) HandleProcessCondition(pidSlice, pid[1]) } // 当满足条件时杀死该进程，一分钟内探活三次， // 三次有两次失败则杀死进程，然后尝试重启进程. func HandleProcessCondition(signal []int, pid string) { logrus.Warn(signal) if len(signal) == 3 { log.Printf(\"正在进行第【%v/3】次探测。。。\\r\\n\", len(signal)) Sum = signal[0] + signal[1] + signal[2] if Sum \u003e= 2 { logrus.Info(\"iDocView存活\") } else { ticker.Stop() // signal = nil log.Printf(\"iDocView挂了，即将进行重启...【%v】\\r\\n\", pid) HandleProcess(pid) ticker.Reset(interval) } } else { log.Printf(\"正在进行第【%v/3】次探测。。。\\r\\n\", len(signal)) } } // 没有通过存活检验的pid将会传到这里 // 根据pid，杀死进程，然后重新启动该进程 func HandleProcess(pid string) { if pid != \"\" { killCMD := exec.Command(\"taskkill.exe\", \"/F\", \"/im\", \"java.exe\", \"/T\") output, err := killCMD.Output() if err != nil { log.Println(err) } logrus.Error(\"Killing iDocView Process: \", output) } time.Sleep(time.Second * 1) // 重新启动程序，执行启动命令 log.Println(\"正在启动服务。。\") startCMD := exec.Command(\"cmd.exe\", \"/C\", \"start\", \"D:\\\\idocv\\\\start.bat\") startCMD.Start() time.Sleep(time.Second * 2) log.Println(\"启动成功，数秒后将打开测试页面。。。\") time.Sleep(time.Second * 12) openURLCMD := exec.Command(\"rundll32\", \"url.dll,FileProtocolHandler\", IDocViewUrl) openURLCMD.Start() } // Log2fileAndStdout: 同时将标准输出到终端和日志文件中. // 保留，暂不启用 func Log2file","date":"2022-04-06","objectID":"/loveit/post/windows%E6%9C%8D%E5%8A%A1%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%87%8D%E5%90%AFgolang/:2:0","tags":["Windows","Service","Golang"],"title":"Windows服务检测与重启（Golang）","uri":"/loveit/post/windows%E6%9C%8D%E5%8A%A1%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%87%8D%E5%90%AFgolang/"},{"categories":["Windows","Golang"],"content":"Windows 服务 使用nssm将程序注册成服务，很简单，在此不再赘述，以下仅列出相关命令： 新建服务：nssm install 启动服务：nssm start 停止服务：nssm stop 重启服务：nssm restart 修改服务：nssm edit “高可用”服务，当服务挂掉的时候，自动进行重启操作： Done. ","date":"2022-04-06","objectID":"/loveit/post/windows%E6%9C%8D%E5%8A%A1%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%87%8D%E5%90%AFgolang/:3:0","tags":["Windows","Service","Golang"],"title":"Windows服务检测与重启（Golang）","uri":"/loveit/post/windows%E6%9C%8D%E5%8A%A1%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%87%8D%E5%90%AFgolang/"},{"categories":["Git"],"content":"从gitee私有仓库拉取代码，通过本地jenkins将代码push到指定的git服务器（通过ssh），最后rsync同步到指定的网站目录当中。","date":"2022-04-06","objectID":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/","tags":["Git","hook"],"title":"网站简单自动部署（git hook）","uri":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/"},{"categories":["Git"],"content":"大致流程 从gitee私有仓库拉取代码，通过本地jenkins将代码push到指定的git服务器（通过ssh），最后rsync同步到指定的网站目录当中。 ","date":"2022-04-06","objectID":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/:1:0","tags":["Git","hook"],"title":"网站简单自动部署（git hook）","uri":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/"},{"categories":["Git"],"content":"脚本相关(jenkins) ","date":"2022-04-06","objectID":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/:2:0","tags":["Git","hook"],"title":"网站简单自动部署（git hook）","uri":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/"},{"categories":["Git"],"content":"git hooks 内容很简单，在此不再赘述，初始化空的服务端git仓库，参考我之前写的一篇博文：git-hook介绍与使用 [dmy@www2020 ~]$ cat ~/web.com.git/hooks/post-receive #!/usr/bin/bash GIT_REPO=/home/dmy/web.com.git TMP_GIT_CLONE=/tmp/web.com.git PUBLIC_WWW=/var/www/html/test rm -rf ${TMP_GIT_CLONE} git clone ${GIT_REPO} ${TMP_GIT_CLONE} sleep 1 cd ${TMP_GIT_CLONE} # rm -rf ${PUBLIC_WWW}/* # cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} rsync -av --progress ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} ","date":"2022-04-06","objectID":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/:2:1","tags":["Git","hook"],"title":"网站简单自动部署（git hook）","uri":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/"},{"categories":["Git"],"content":"shell脚本 从gitee私有仓库拉取最新main分支代码到jenkins服务器本地； 检测jenkins本地仓库是否存在，如果存在，则直接pull，如果不存在，则clone一份； 添加官网git服务器的地址（通过ssh进行连接，这里可以新建一个无login shell的专门用户），远程git仓库名称deploy，分支同样为main； 使用expect免交互自动输入ssh密码； 另，如果jenkins本地仓库有变更，添加本地文件，提交并push到官网git服务器上； #!/bin/bash # #************************************************** # Author: AGou-ops * # E-mail: agou-ops@foxmail.com * # Date: 2022-04-02 * # Description: * # Copyright 2022 by AGou-ops.All Rights Reserved * #************************************************** # jenkins 服务器 localDir=~/Documents/web-workspace/web_web/www2022 rmAndInitRemote() { cd ${localDir} # 官网远程git仓库地址,通过ssh连接 git remote add deploy ssh://\u003cYOUR_SSH_USERNAME\u003e@\u003cYOUR_GIT_SERVER_NAME_OR_IP_HERE\u003e:/home/dmy/web.com.git } # ([ -d ${localDir} ] || echo \"目录不存在\") \u0026\u0026 mkdir -pv ${localDir} ls ${localDir}/.git/config \u003e /dev/null 2\u003e\u00261 if [ $? -eq 0 ] then cd ${localDir} # MacOS sed -i '' -e '14,$d' ${localDir}/.git/config # Linux # sed -i '14,$d' ${localDir}/.git/config git pull origin main rmAndInitRemote else git clone -b main \u003cYOUR_REMOTE_PRIVATE_GIT_REPO_HERE\u003e ${localDir} rmAndInitRemote fi sleep 1 cd ${localDir} # --- 临时 git add -A git commit -m \"rebuilding site $(date)\" || true # --- # 推送到远程 PASS=\u003cYOUR_SSH_PASSWORD_HERE\u003e expect \u003c\u003c EOF set timeout 5 spawn git push -f -u deploy main expect { \"(yes/no)\" {send \"yes\\r\"; exp_continue} \"password:\" {send \"$PASS\\r\"} } expect eof EOF ","date":"2022-04-06","objectID":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/:2:2","tags":["Git","hook"],"title":"网站简单自动部署（git hook）","uri":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/"},{"categories":["Git"],"content":"jenkins中构建运行结果 Done. ","date":"2022-04-06","objectID":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/:3:0","tags":["Git","hook"],"title":"网站简单自动部署（git hook）","uri":"/loveit/post/%E7%BD%91%E7%AB%99%E7%AE%80%E5%8D%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2git-hook/"},{"categories":["博客"],"content":"迁移博客评论系统从Utteranc.es到Giscus","date":"2022-03-21","objectID":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/","tags":[],"title":"迁移博客评论系统从Utteranc.es到Giscus","uri":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/"},{"categories":["博客"],"content":"图片来自：https://shipit.dev/posts/from-utterances-to-giscus.html 官方GitHub仓库：https://github.com/giscus/giscus 官方简介： 由 GitHub Discussions 驱动的评论系统。让访客借助 GitHub 在你的网站上留下评论和反应吧！本项目受 utterances 强烈启发。 开源。🌏 无跟踪，无广告，永久免费。📡 🚫 无需数据库。全部数据均储存在 GitHub Discussions 中。 支持自定义主题！🌗 支持多种语言。🌐 高度可配置。🔧 自动从 GitHub 拉取新评论与编辑。🔃 可自建服务！🤳 效果图如下所示： 相比于Utteranc.es，Giscus支持对整篇文章进行点赞和其他一些回应，还可以按照评论新旧进行排序，可支持直接回复，支持懒加载，自定义主题，可自建服务，高度自定义配置等优点。（前三点比较吸引我） :smile:介绍到此结束，下面开始快速迁移评论系统到Giscus（仅介绍关键步骤，如需详细步骤及说明请查阅下面的./参考链接） ","date":"2022-03-21","objectID":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/:0:0","tags":[],"title":"迁移博客评论系统从Utteranc.es到Giscus","uri":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/"},{"categories":["博客"],"content":"正式开始 ","date":"2022-03-21","objectID":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/:1:0","tags":[],"title":"迁移博客评论系统从Utteranc.es到Giscus","uri":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/"},{"categories":["博客"],"content":"安装Giscus GitHub APP 打开giscus APP，首次打开如下所示： 点击Install，然后： ","date":"2022-03-21","objectID":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/:1:1","tags":[],"title":"迁移博客评论系统从Utteranc.es到Giscus","uri":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/"},{"categories":["博客"],"content":"迁移评论的issues到Discussions Giscus依赖于Discussions（顾名思义，专门用来讨论问问题的地方），所以正式启用Giscus之前，需要开启Discussions，开启的方法在此我就不赘述了，详情参考GitHub Discussions 快速入门. 相对于在issues里面提交评论（毕竟issues主要用于问问题pr啥的），GitHub Discussions提供更加丰富的评论功能。 接着打开Labels，将issues转换成Discussions（这里我转换过了，所以没有出现，所以我换了个演示账号） 步骤参考上图，按照顺序点就完了。 ","date":"2022-03-21","objectID":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/:1:2","tags":[],"title":"迁移博客评论系统从Utteranc.es到Giscus","uri":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/"},{"categories":["博客"],"content":"配置博客使用Discussions 我用的博客系统是hugo，主题是jane其他博客系统和主题都大同小异，需要修改的配置文件路径为[YOUR_BLOG_ROOT_DIR]/themes/jane/layouts/partials/comments.html（没有的话可以新建该文件） :information_source:配置文件内容可自动生成：https://giscus.app/zh-CN， 配置非常简单，按照页面提示完成即可，完成之后页面下方会给出相关js代码，直接将代码贴到上面我说的那个位置即可。 ","date":"2022-03-21","objectID":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/:1:3","tags":[],"title":"迁移博客评论系统从Utteranc.es到Giscus","uri":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/"},{"categories":["博客"],"content":"关闭Utteranc.es，启用Giscus 这个步骤我不说应该都懂，修改hugo配置文件config.toml文件相关配置即可。 ","date":"2022-03-21","objectID":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/:1:4","tags":[],"title":"迁移博客评论系统从Utteranc.es到Giscus","uri":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/"},{"categories":["博客"],"content":"高级配置项 完整高级配置项参考高级用法指南（例如允许特定来源）。 个人用简单配置： { \"origins\": [ \"https://giscus.app\", \"https://giscus.vercel.app\", \"https://agou-ops.cn\" ], \"originsRegex\": [ \"https://giscus-git-([A-z0-9]|-)*giscus\\\\.vercel\\\\.app\", \"http://localhost:[0-9]+\", \"https://agou-ops.cn\", \"https://agou-ops.cn/*\" ], \"defaultCommentOrder\": \"oldest\" } 其中origins为域名白名单. :information_source:使用方法，在评论仓库的根目录新建一个giscus.json文件，添加上以上配置文件内容即可. Done. ","date":"2022-03-21","objectID":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/:2:0","tags":[],"title":"迁移博客评论系统从Utteranc.es到Giscus","uri":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/"},{"categories":["博客"],"content":"参考链接 Moving from utterances to giscus: https://shipit.dev/posts/from-utterances-to-giscus.html 博客評論系統從 Utterances 遷移到 Giscus：https://www.dejavu.moe/posts/utterances-to-giscus/ ","date":"2022-03-21","objectID":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/:3:0","tags":[],"title":"迁移博客评论系统从Utteranc.es到Giscus","uri":"/loveit/post/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%B0giscus/"},{"categories":[],"content":"TL;DR github仓库：:point_right: https://github.com/AGou-ops/dotfiles :point_left: Neovim及其插件简单视频介绍：https://www.bilibili.com/video/BV1am4y197bR/ 保姆级安装up主同款Neovim：https://www.bilibili.com/video/BV1YF411i72t/ 视频讲的一般，可以直接看下面的介绍. ","date":"2022-01-13","objectID":"/loveit/post/neovim%E8%87%AA%E7%94%A8golang%E5%BC%80%E5%8F%91/:1:0","tags":[],"title":"Neovim自用Golang开发","uri":"/loveit/post/neovim%E8%87%AA%E7%94%A8golang%E5%BC%80%E5%8F%91/"},{"categories":[],"content":"主流三种配置结构对比 纯vim-script：局限性较高，可配置项少，适合轻度玩家； 纯lua：使用packer来进行插件管理，可配置项多，十分灵活，但没点lua基础的人用起来有点懵，比如我，适合高端玩家； vim-script + lua：我个人推荐使用这种配置方式，使用vim-plug来进行插件管理，几乎所有的neovim插件都可以用vim-plug来安装，而且插件列表内容要比packer更加简洁客观，结合了lua，可配置项又大大提升，用起来很是方便； 一个文件完事的玩家：vim-script里直接使用标签来运行lua相关配置，不推荐，lua插件多的话会让你的配置文件变得复杂，不好维护。 ","date":"2022-01-13","objectID":"/loveit/post/neovim%E8%87%AA%E7%94%A8golang%E5%BC%80%E5%8F%91/:2:0","tags":[],"title":"Neovim自用Golang开发","uri":"/loveit/post/neovim%E8%87%AA%E7%94%A8golang%E5%BC%80%E5%8F%91/"},{"categories":[],"content":"文件目录结构及说明 目录结构及说明： \u003e tree . ├── custom.vim # 自定义的一些vim-script配置 ├── debug-template # vim-vimspector插件模板目录（用于debug） │ └── go-template # debug golang的模板 ├── general.vim # 一般设置 ├── init.vim # 初始化配置文件（主要） ├── keymaps.vim # 键盘映射配置文件，大部分是通用的键盘映射配置，不包含插件的键盘映射 ├── lua # -- lua配置 --- │ └── AGou # 配置文件命名空间，在init.vim中引进 │ ├── init.lua # 命名空间lua配置主入口文件 │ ├── lsp.lua │ ├── nvim-autopairs.lua │ ├── nvim-bufferline.lua │ ├── nvim-cmp.lua │ ├── nvim-diffview.lua │ ├── nvim-gitsigns.lua │ ├── nvim-lsp-installer.lua │ ├── nvim-lspsaga.lua │ ├── nvim-lualine.lua │ ├── nvim-neoscroll.lua │ ├── nvim-session-manager.lua │ ├── nvim-signature.lua │ ├── nvim-telescope.lua │ ├── nvim-todo-comments.lua │ ├── nvim-toggleterm.lua │ ├── nvim-transparent.lua │ ├── nvim-tree.lua │ ├── nvim-treesitter.lua │ └── nvim-whichkey.lua ├── push.sh ├── push2GitHub.sh # push到github的脚本 ├── sessions # 会话管理器的数据存放目录 │ └── %usr%share%dict.vim └── shpy-autoheader.vim # 自动文件头部的vim-script ","date":"2022-01-13","objectID":"/loveit/post/neovim%E8%87%AA%E7%94%A8golang%E5%BC%80%E5%8F%91/:3:0","tags":[],"title":"Neovim自用Golang开发","uri":"/loveit/post/neovim%E8%87%AA%E7%94%A8golang%E5%BC%80%E5%8F%91/"},{"categories":[],"content":"截图部分 只介绍几个常用的（实际不止这些）： 分屏，两个垂直分屏，一个水平分屏，左边nvim-tree，下面状态栏分别为lualine和tmux的menu bar 悬浮终端，可直接在neovim中弹出终端进行使用，无需关闭或挂起neovim，或者在命令行模式运行，非常方便 悬浮lazygit，很好用的一个终端git工具，tui可视化可进行快速提交推送拉取等等操作 Golang lsp智能提示，可显示函数签名以及一些相关的注释信息 快速重命名函数，改变一处函数名称，可以自动改变其相关地方的名称 文件内快速查找，快速查找当前光标下所出现的词 悬浮函数定义，弹出悬浮窗来显示当前光标下的函数定义，使用gd命令可以直接跳转到函数的定义文件中 lsp，自动将报错信息打印到行尾，右边为tagbar，可以显示函数和变量等目录树 ","date":"2022-01-13","objectID":"/loveit/post/neovim%E8%87%AA%E7%94%A8golang%E5%BC%80%E5%8F%91/:4:0","tags":[],"title":"Neovim自用Golang开发","uri":"/loveit/post/neovim%E8%87%AA%E7%94%A8golang%E5%BC%80%E5%8F%91/"},{"categories":[],"content":"写在最后 https://github.com/AGou-ops/dotfiles 如果大家觉得不错的话，可以点个star:star:分享给更多人. Done. ","date":"2022-01-13","objectID":"/loveit/post/neovim%E8%87%AA%E7%94%A8golang%E5%BC%80%E5%8F%91/:5:0","tags":[],"title":"Neovim自用Golang开发","uri":"/loveit/post/neovim%E8%87%AA%E7%94%A8golang%E5%BC%80%E5%8F%91/"},{"categories":["Golang"],"content":"最近需要做一个钉钉群聊机器人，需求是：艾特该机器人并发送相应关键字，机器人会进行相应的自动回复。 通过钉钉开放平台·钉钉机器人的企业自建机器人官方文档以及网络上其他语言（Java，Python等）的钉钉机器人的实现，自己瞎编写出来了一个基础版本的小机器人。 奇怪的是用Golang来写的人很少，可能是官方的示例中没有Golang吧，虽然会一些Python，但是现在转学Golang了，故借此机会来巩固一下最近所学的一些东西:smile: 。 DingTalk_robot群聊机器人处理流程图： ","date":"2021-12-09","objectID":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/:0:0","tags":["钉钉机器人","Golang"],"title":"钉钉群聊机器人sample","uri":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/"},{"categories":["Golang"],"content":"预先准备 首先需要自己创建一个测试公司（如若你是钉钉企业管理员的话，可忽略该步骤），创建流程很简单，这里我就不再赘述，详情参考：钉钉创建企业/组织/团队. 接下来进入钉钉开放平台，登录并选择自己上面创建的测试公司之后，点击右上角的开发者控制台，进入如下页面： 依次点击，创建一个属于自己的机器人🤖，里面的应用名称、应用描述和应用图标随便填。 创建完成之后，记录下AppSecret（后面计算sign校验会用到），然后:warning:重点来到开放管理页面，如下图所示： 相关解释： 服务器出口IP：相当于白名单，也就是允许那些网段或者IP的人使用该机器人，可以限定为公司运营商的公网IP范围（不知道为什么设置了出口IP和没设置出口IP还有随便乱设置出口IP都可以使用）； 输入调用钉钉服务端API时使用的IP即企业服务器的公网IP，多个IP请以英文逗号\",“隔开，支持带一个*号通配符的IP格式; 消息接收地址：钉钉机器人服务器outgoing回调给开发者服务器的一个地址，需要特别注意的是，改地址需要公网IP地址，当然此处填写域名URL也是可以的。 权限管理,这个自己看看需要什么权限就加那些吧，本着最小权限的规则进行选择。 完成上面所有操作之后，在上面的版本管理与发布页面对自己创建的机器人进行调试或者发布，选择调试的话会给你个二维码，你可以直接用移动端钉钉扫码加如钉钉机器人测试群，选择发布的话，就可以在自己的测试公司添加机器人，详情参考：钉钉添加机器人到钉钉群 ","date":"2021-12-09","objectID":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/:1:0","tags":["钉钉机器人","Golang"],"title":"钉钉群聊机器人sample","uri":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/"},{"categories":["Golang"],"content":"本地测试 在服务器上开发调试可不是一个好的选择，本地写好推送到服务器，如果频繁调试的话，也是非常的麻烦。 所以我推荐使用内网穿透，本地就可以直接进行开发和调试，内网穿透的教程参考我之前写的一篇博客，内网穿透工具… 直接贴一下我的fprs和frpc的配置文件好了： # frps.ini 文件内容 [common] bind_port = 5000 token = jSUSpHdC dashboard_port = 5500 dashboard_user = admin dashboard_pwd = admin # frpc.ini 文件内容 [common] server_addr = 121.36.1.255 server_port = 5000 token = jSUSpHdC [dingtalk_robot] type = tcp local_ip = 127.0.0.1 local_port = 8080 remote_port = 9999 使用ngrok的话，一条命令ngrok http 9999直接启动，然后将生成的URL填入上面的消息接收地址。 ","date":"2021-12-09","objectID":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/:2:0","tags":["钉钉机器人","Golang"],"title":"钉钉群聊机器人sample","uri":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/"},{"categories":["Golang"],"content":"代码编写 代码就没必要在这里大篇幅讲了，了解大概流程就可，虽然代码都是乱写的，但是我是一个讲究代码规范的人:joy: ，代码里面都有很详细的注释，看不懂的可以提个issue。 所有代码以及Releases包已放到GitHub上，:point_right:点击此处进行访问。 ","date":"2021-12-09","objectID":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/:3:0","tags":["钉钉机器人","Golang"],"title":"钉钉群聊机器人sample","uri":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/"},{"categories":["Golang"],"content":"效果示例 程序前台启动界面： 日志文件写到了/var/log/dingtalk_robot.log，注意用户权限。 日志文件初步内容如下所示（分屏左边:point_left:）： 钉钉群聊机器人自动回复界面： ip关键字（消息类型Markdown）： help关键字（（消息类型Markdown）： about关键字（消息类型ActionCard）： 无关键字（消息类型Markdown）： ","date":"2021-12-09","objectID":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/:4:0","tags":["钉钉机器人","Golang"],"title":"钉钉群聊机器人sample","uri":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/"},{"categories":["Golang"],"content":"总结 目前虽只有获取公司公网IPv4这个功能，但天子驾二已成，未来不是想拉什么货就拉？xd. :joy: ，后续如果有其他需要的话，可以直接在此基础上进行添加。 Done. ","date":"2021-12-09","objectID":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/:5:0","tags":["钉钉机器人","Golang"],"title":"钉钉群聊机器人sample","uri":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/"},{"categories":["Golang"],"content":"参考文档 钉钉企业自建机器人：https://open.dingtalk.com/document/robots/enterprise-created-chatbot?spm=ding_open_doc.document.0.0.3d6d24cb7j00JN#topic-2097982 消息类型和数据格式：https://open.dingtalk.com/document/robots/message-types-and-data-format?spm=ding_open_doc.document.0.0.eaef2ccbpoeEEg#topic-2098229 ","date":"2021-12-09","objectID":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/:6:0","tags":["钉钉机器人","Golang"],"title":"钉钉群聊机器人sample","uri":"/loveit/post/%E9%92%89%E9%92%89%E7%BE%A4%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BAsample/"},{"categories":["tricks","持续更新"],"content":":triangular_flag_on_post:该文章将持续更新。 分享和记录个人日常和工作中，学习和实际用到的shell片段以及一些小技巧。 ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:0:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"shell 前两行 #!/usr/bin/env bash和#!/bin/bash区别 前者无需在意所运行的解释器在何处(bash), 只要存在于你的`$PATH`环境变量中即可, 根据你的环境寻找并运行默认的版本，具有灵活性. Shell set常用参数： -x: 用于调试(debug)； -u: 如果遇到不存在的变量，Bash 默认忽略它。 使用-u选项来避免这种情况。 即遇到未定义的变量。 则异常退出脚本. 等价于set -o nounset命令； -e: 脚本只要发生错误，就终止执行。 set -e有一个例外情况，就是不适用于管道命令。等价于set -o errexit命令； -o pipefail：用于解决-e选项无法处理管道命令错误的问题，只要一个子命令失败，整个管道命令就失败，脚本就会终止执行。 使用场景： 一般shell脚本将以下内容放置到前几行： set -euxo pipefail set -o errexit ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:1:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":":star:杂项（命令小技巧） ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:2:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"命令相关 command -v \u003cCOMMAND\u003e: 用于验证某个命令是否存在。 不存在则返回一个非零值，存在则会返回该命令的绝对路径。 使用场景: shell脚本中判断一个命令是否存在且可执行。 可以使用以下命令： if [ -x \"$(command -v systemctl)\" ];then ... exec \u003e SOMEFILE: 将脚本输出内容全部输出到指定文件中(除非单独指定) 使用场景: # 查找某目录中的占用空间最大的几个文件 du -S /home/suofeiya/mycharts/ | sort -rn | sed '{11,$D};=' | sed 'N; s/\\n/ /' | awk 'BEGIN {print \"序号\\t大小(k)\\t文件夹\"}{printf $1 \":\" \"\\t\" $2 \"\\t\" $3 \"\\n\"}' # 将输出存到指定文件 exec \u003e result.txt exec: exec 是 bash 的内置命令, 不启用新的shell进程。就像source或者.一样, 相反使用bash或者sh执行命令时, 会另起一个子shell, 子shell会继承父shell的环境变量, 子shell执行完毕之后不影响父shell. trap: 捕获信号, 通常用途是在shell脚本被中断时完成清理工作 信号名称 信号数 描述 SIGINT 2 程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl+C)时发出。 SIGQUIT 3 和SIGINT类似, 但由QUIT字符(通常是Ctrl /)来控制. 进程在因收到SIGQUIT退出时会产生core文件, 在这个意义上类似于一个程序错误信号。 SIGFPE 8 在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。 SIGKILL 9 用来立即结束程序的运行. 本信号不能被阻塞, 处理和忽略。 SIGALRM 14 时钟定时信号, 计算的是实际的时间或时钟时间. alarm函数使用该信号。 SIGTERM 使用场景: 脚本退出前执行命令 脚本在执行时按下CTRL+c时，将显示\"program exit…“并退出(CTRL+c的信号是SIGINT) trap \"echo 'program exit...'; exit 2\" SIGINT 忽略信号 例：脚本运行时忽略 SIGINT SIGQUIT SIGFPE等信号 trap '' 2 3 8 IFS：换行符 使用场景： 修改默认的空格换行符，多用于读取文件内容： IFS_old=$IFS # 将原IFS值保存，以便用完后恢复 IFS=$'\\n' # 指定回车为分隔符 for LINE in $(cat test.file) do echo ${LINE} done # 读取文件，或 cat test.file | while read line;do echo \"${line}\";done # 读取文件，再或 while read line do echo \"${line}\" done \u003c test.file IFS=$IFS_old # 恢复原IFS值 ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:2:1","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"文件相关 /etc/os-release：查看系统名称、版本、基于版本、版本代号、帮助信息、系统官方主页等； 使用场景： 对不同的系统使用不同的命令进行处理： # 检查·sysctl·命令是否存在且可执行，如果不存在则进行下载安装。 if ! [ -x \"$(command -v sysctl)\" ]; then echo 'sysctl not installed. Installing it...' distro=$(awk -F= '/^ID=/{print $2}' /etc/os-release | tr -d '\"') case $distro in ol | centos) yum install -y procps rm -rf /var/cache/yum;; ubuntu | debian) apt-get update -qq \u0026\u0026 apt-get install -y --no-install-recommends procps rm -rf /var/lib/apt/lists /var/cache/apt/archives;; esac fi ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:2:2","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"命令成功与否判断 command \u0026\u0026 echo \"succ\" || echo \"fail\" command || { echo \"command failed\"; exit 1; } if ! command； then echo \"command failed\"； exit 1； fi command if [ \"$?\" -ne 0 ]； then echo \"command failed\"； exit 1； fi ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:3:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"变量/字符串操作大全 ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:4:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"变量截取 变量配置方式 说明 ${变量#关键词} ${变量##关键词} 若变量内容从头开始的数据符合『关键词』，则将符合的最短数据删除 若变量内容从头开始的数据符合『关键词』，则将符合的最长数据删除 ${变量%关键词} ${变量%%关键词} 若变量内容从尾向前的数据符合『关键词』，则将符合的最短数据删除 若变量内容从尾向前的数据符合『关键词』，则将符合的最长数据删除 ${变量/旧字符串/新字符串} ${变量//旧字符串/新字符串} 若变量内容符合『旧字符串』则『第一个旧字符串会被新字符串取代』 若变量内容符合『旧字符串』则『全部的旧字符串会被新字符串取代』 ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:4:1","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"变量默认值 变量配置方式 str 没有配置 str 为空字符串 str 已配置非为空字符串 var=${str-expr} var=expr var= var=$str var=${str:-expr} var=expr var=expr var=$str var=${str+expr} var= var=expr var=expr var=${str:+expr} var= var= var=expr var=${str=expr} str=expr var=expr str 不变 var= str 不变 var=$str var=${str:=expr} str=expr var=expr str=expr var=expr str 不变 var=$str var=${str?expr} expr 输出至 stderr var= var=$str var=${str:?expr} expr 输出至 stderr expr 输出至 stderr var=$str ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:4:2","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"字符串是否包含子串 # 通过 ** 匹配 if [[ \"${var}\" == *\"${sub_string}\"* ]]; then printf '%s\\n' \"sub_string is in var.\" fi # 通过 bash 内置的 =~ 判断 if [[ \"${sub_string}\" =~ \"${var}\" ]]; then printf '%s\\n' \"sub_string is in var.\" fi ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:4:3","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"shell参数处理 $# 传递到脚本的参数个数 $* 以一个单字符串显示所有向脚本传递的参数。 如\"$*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。 $$脚本运行的当前进程ID号 $!后台运行的最后一个进程的ID号 $@与$*相同，但是使用时加引号，并在引号中返回每个参数。 如\"$@\"用「\"」括起来的情况、以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。 $- 显示Shell使用的当前选项，与set命令功能相同。 $? 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:5:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"打印多行信息（多用于jio本帮助信息） cat \u003e\u00261 \u003c\u003c-EOF # 或者直接使用cat \u003c\u003c EOF first line second line third line EOF # 或 cat \u003c\u003c EOF 111 222 EOF # 或 echo \"11 22 \" # 或（来源于StackOverflow） __usage=\" Usage: $(basename $0)[OPTIONS] Options: -l, --level \u003cn\u003e Something something something level -n, --nnnnn \u003clevels\u003e Something something something n -h, --help Something something something help -v, --version Something something something version \" Then I can simply use it as echo \"$__usage\" ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:6:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"传递数组到函数 function update() { declare -a apps_version=(\"${!1}\") echo \"${apps_version[@]}\" } APPS_VERSION=(\"aaa\" \"bbb\" \"ccc\") update APPS_VERSION[@] ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:7:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"获取选项select case PS3=\"enter option: \" # 使用select时的提示符 select option in \"option1\" \"option2\" \"option3\" \"option4\" \"exit\" do case $option in \"exit\") break;; \"option1\") break;; ... *) ... esca done ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:8:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"查看进程占用的文件句柄 # 用户级 find /proc/*/fd/* -type l -lname 'anon_inode:inotify' -print 2\u003e/dev/null | cut -d/ -f3 |xargs -I '{}' -- ps --no-headers -o '%U' -p '{}' | sort | uniq -c | sort -nr # 结果: 第一列表示打开的句柄，第二列表示用户 # 进程级 find /proc/*/fd/* -type l -lname 'anon_inode:inotify' -print 2\u003e/dev/null | cut -d/ -f3 |xargs -I '{}' -- ps --no-headers -o '%U %p %c' -p '{}' | sort | uniq -c | sort -nr # 结果: 第一列表示打开的句柄，第二列表示用户，第三列表示用户id，第四列表示进程 ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:9:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"修改crontab内容 (crontab -l 2\u003e/dev/null; echo '*/2 * * * * \u003cSOME_COMMAND or SOME_SCRIPT\u003e \u003e \u003cSOME_OUTPUT_FILE\u003e.$(date \"+\\%Y\\%m\\%d-\\%H\\%M\\%S\") 2\u003e\u00261') | crontab - ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:10:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"加载kv配置型文件 cat xx key1=value1 key2=value2 cat xx.sh . xx # 这里直接使用. xx即可把xx文件里的key-value引入,后续可直接使用k. echo $key1, $key2 #注意, 配置文件只能是k=v的形式(多个k=v可以在一行, 使用空格隔开), 其它形式会报错 ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:11:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"循环打印带空格的字符串/数组 # 需求, 提供个数组，循环数组中的元素， 如果元素存在于某个文件中，则不追加，如果不存在,则追加 K8S_CLUSTER=(\"172.1.52.250 k8s-master-250\" \"172.1.52.50 k8s-master-50\") for x in \"${K8S_CLUSTER[@]}\"; do grep \"$x\" /etc/hosts \u003e /dev/null || echo \"$x\" \u003e\u003e /etc/hosts;done ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:12:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"Shell getopts Demo（Shell 参数） #!/bin/bash status=off # 定义变量status，初始值设置为off filename=\"\" # 定义变量filename，用于保存选项参数（文件） output=\"\" # 定义变量output，用于保存选项参数（目录） Usage () { # 定义函数Usage，输出脚本使用方法 echo \"Usage\" echo \"myscript [-h] [-v] [-f \u003cfilename\u003e] [-o \u003cfilename\u003e]\" exit -1 } while getopts :hvf:o: varname # 告诉getopts此脚本有-h、-v、-f、-o四个选项，-f和-o后面需要跟参数（没有选项时，getopts会设置一个退出状态FALSE，退出循环） do case $varname in h) echo \"$varname\" Usage exit ;; v) echo \"$varname\" status=on echo \"$status\" exit ;; f) echo \"$varname\" echo \"$OPTARG\" filename=$OPTARG # 将选项的参数赋值给filename if [ ! -f $filename ];then # 判断选项所跟的参数是否存在且是文件 echo \"the source file $filenamenot exist!\" exit fi ;; o) echo \"$varname\" echo \"$OPTARG\" output=$OPTARG # 将选项参数赋值给output if [ ! -d $output ];then # 判断选项参数是否存在且是目录 echo \"the output path $outputnot exist\" exit fi ;; # 当选项后面没有参数时，varname的值被设置为（：），OPTARG的值被设置为选项本身 :) echo \"$varname\" echo \"the option -$OPTARGrequire an arguement\" # 提示用户此选项后面需要一个参数 exit 1 ;; ?) # 当选项不匹配时，varname的值被设置为（？），OPTARG的值被设置为选项本身 echo \"$varname\" echo \"Invaild option: -$OPTARG\" # 提示用户此选项无效 Usage exit 2 ;; esac done ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:13:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":["tricks","持续更新"],"content":"参考链接 大部分都来源于网络，都亲测使用过没啥问题，由于涉及内容太杂太多了，就不一一标注了。 ","date":"2021-11-08","objectID":"/loveit/post/shell-tricks/:14:0","tags":["Shell","tricks"],"title":"Shell Tricks","uri":"/loveit/post/shell-tricks/"},{"categories":[],"content":"从简单p2p网络到k8s复杂型网络。 ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/:0:0","tags":[],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/"},{"categories":[],"content":"简单p2p网络模型 :information_source:简单说明：创建两个网络命名空间client和server，然后创建一对虚拟网卡将两端的命名空间相连起来，就好像直接相连的网线一样，中间没有阻拦，创建完的虚拟网卡对存在于默认的命名空间中，接着我们将其分别放入client和server命名空间中，最后为两个虚拟网卡对veth-client和veth-server分配IP地址并启用网卡。 # 步骤全流程 $ ip netns add client $ ip netns add server $ ip netns list server client $ ip link add veth-client type veth peer name veth-server $ ip link list | grep veth 4: veth-server@veth-client: \u003cBROADCAST,MULTICAST,M-DOWN\u003e mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 5: veth-client@veth-server: \u003cBROADCAST,MULTICAST,M-DOWN\u003e mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 $ ip link set veth-client netns client $ ip link set veth-server netns server # 将虚拟网卡移动至相应的命名空间去，此时默认的网络命名空间中将不复存在 $ ip netns exec client ip address add 10.0.0.11/24 dev veth-client $ ip netns exec client ip link set veth-client up $ ip netns exec server ip address add 10.0.0.12/24 dev veth-server $ ip netns exec server ip link set veth-server up $ ip netns exec client ip addr 1: lo: \u003cLOOPBACK\u003e mtu 65536 qdisc noop state DOWN group default qlen 1 # 默认的lo暂时用不到，所以在此就不启用了 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 5: veth-client@if4: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue `state UP` group default qlen 1000 # 可以看到网卡已被成功启用 link/ether ca:e8:30:2e:f9:d2 brd ff:ff:ff:ff:ff:ff link-netnsid 1 inet 10.0.0.11/24 scope global veth-client valid_lft forever preferred_lft forever inet6 fe80::c8e8:30ff:fe2e:f9d2/64 scope link valid_lft forever preferred_lft forever # 同样，server网络命名空间，输出相似，略 $ ip netns exec server ip addr 。。。 # 互ping测试 $ ip netns exec client ping 10.0.0.12 $ ip netns exec server ping 10.0.0.11 ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/:1:0","tags":[],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/"},{"categories":[],"content":"Docker网桥模型 如果要创建更网络命名空间并互相连接，用 veth 对将这些网络命名空间进行两两连接就很麻烦了。可以创建创建一个 Linux 网桥来连接这些网络命名空间。Docker 就是这样为同一主机内的容器进行连接的。 # 步骤全流程 $ BR=bridge1 $ HOST_IP=192.168.0.116 $ ip link add client1-veth type veth peer name client1-veth-br # 添加虚拟网卡与虚拟网桥对 $ ip link add server1-veth type veth peer name server1-veth-br $ ip link add $BR type bridge # 添加网桥 $ ip netns add client1 $ ip netns add server1 $ ip link set client1-veth netns client1 $ ip link set server1-veth netns server1 $ ip link set client1-veth-br master $BR $ ip link set server1-veth-br master $BR $ ip link set $BR up $ ip link set client1-veth-br up $ ip link set server1-veth-br up $ ip netns exec client1 ip link set client1-veth up $ ip netns exec server1 ip link set server1-veth up $ ip netns exec client1 ip addr add 192.168.1.11/24 dev client1-veth $ ip netns exec server1 ip addr add 192.168.1.12/24 dev server1-veth $ ip addr add 192.168.1.1/24 dev $BR # 为网桥分配ip地址 $ ip netns exec client1 ping 192.168.1.12 -c 5 $ ip netns exec client1 ping 192.168.1.1 -c 5 发现最后一条命令报错connect: Network is unreachable，原因路由不通，加入一条缺省路由即可： $ ip netns exec client1 ip route add default via 192.168.1.1 $ ip netns exec server1 ip route add default via 192.168.1.1 外部服务器访问内部(Docker为例)： Docker 创建的 netns 没有保存在缺省位置，所以 ip netns list 是看不到这个网络命名空间的。我们可以在缺省位置创建一个符号链接： $ container_id=web $ container_netns=$(docker inspect ${container_id} --format '{{ .NetworkSettings.SandboxKey }}') $ mkdir -p /var/run/netns $ rm -f /var/run/netns/${container_id} $ ln -sv ${container_netns} /var/run/netns/${container_id} '/var/run/netns/web' -\u003e '/var/run/docker/netns/c009f2a4be71' $ ip netns list web (id: 3) server1 (id: 1) client1 (id: 0) 看看 web 命名空间的 IP 地址： $ ip netns exec web ip addr 1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 11: eth0@if12: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0 inet 172.18.0.3/24 brd 172.18.0.255 scope global eth0 valid_lft forever preferred_lft forever 然后看看容器里的 IP 地址： $ WEB_IP=`docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" web` $ echo $WEB_IP 172.18.0.3 加入端口转发规则，其它主机就能访问这个 nginx 了： $ iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination $WEB_IP:80 $ curl localhost:80 ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/:2:0","tags":[],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/"},{"categories":[],"content":"节点间网络传输 如下图所示： ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/:2:1","tags":[],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/"},{"categories":[],"content":"k8s服务网络 技术类文章网上一搜一大片，这里我分享一个之前YouTube上看到的一个视频，简洁明了。 #dplayer-video-container { max-width: 800px; margin: 0 auto; margin-top: -1rem; } @media screen and (max-device-width: 400px) { #dplayer { width: 100%; } } const dp = new DPlayer({ container: document.getElementById('dplayer'), autoplay: false, theme: '#c05b4d', loop: false, lang: 'zh-cn', screenshot: false, hotkey: true, preload: 'auto', volume: 0.7, mutex: true, logo: 'https://agou-images.oss-cn-qingdao.aliyuncs.com/BaseIMG/youtube.png', subtitle: { url: 'https:\\/\\/agou-resources.oss-cn-chengdu.aliyuncs.com\\/subtitles\\/Kubernetes%20Services%20networking%20-%20English.vtt', type: 'webvtt', fontSize: '20px', bottom: '3%', color: '#0000', }, video: { type: 'auto', url: 'https:\\/\\/agou-resources.oss-cn-chengdu.aliyuncs.com\\/video\\/Kubernetes%20Services%20networking.mp4', pic: '' }, contextmenu: [ { text: '❤ 博客主页', link: 'https://agou-ops.github.io' }, { text: '播放器信息', click: (player) = { console.log(player); } } ], highlight: [ { time: '0', text: 'ClusterIP', }, { time: '107', text: 'NodePort', }, { time: '108', text: 'ServiceIP with Calio', }, { time: '', text: '', }, { time: '', text: '', }, ], }); ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/:3:0","tags":[],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/"},{"categories":[],"content":"参考链接 Life of a Packet in Kubernetes — Part 1: https://dramasamy.medium.com/life-of-a-packet-in-kubernetes-part-1-f9bc0909e051 kubernetes services network YouTube: https://www.youtube.com/watch?v=NFApeJRXos4 ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/:4:0","tags":[],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-copy/"},{"categories":["kubernetes"],"content":"从简单p2p网络到k8s复杂型网络。 ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/:0:0","tags":["network","kubernetes"],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"},{"categories":["kubernetes"],"content":"简单p2p网络模型 :information_source:简单说明：创建两个网络命名空间client和server，然后创建一对虚拟网卡将两端的命名空间相连起来，就好像直接相连的网线一样，中间没有阻拦，创建完的虚拟网卡对存在于默认的命名空间中，接着我们将其分别放入client和server命名空间中，最后为两个虚拟网卡对veth-client和veth-server分配IP地址并启用网卡。 # 步骤全流程 $ ip netns add client $ ip netns add server $ ip netns list server client $ ip link add veth-client type veth peer name veth-server $ ip link list | grep veth 4: veth-server@veth-client: \u003cBROADCAST,MULTICAST,M-DOWN\u003e mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 5: veth-client@veth-server: \u003cBROADCAST,MULTICAST,M-DOWN\u003e mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 $ ip link set veth-client netns client $ ip link set veth-server netns server # 将虚拟网卡移动至相应的命名空间去，此时默认的网络命名空间中将不复存在 $ ip netns exec client ip address add 10.0.0.11/24 dev veth-client $ ip netns exec client ip link set veth-client up $ ip netns exec server ip address add 10.0.0.12/24 dev veth-server $ ip netns exec server ip link set veth-server up $ ip netns exec client ip addr 1: lo: \u003cLOOPBACK\u003e mtu 65536 qdisc noop state DOWN group default qlen 1 # 默认的lo暂时用不到，所以在此就不启用了 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 5: veth-client@if4: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue `state UP` group default qlen 1000 # 可以看到网卡已被成功启用 link/ether ca:e8:30:2e:f9:d2 brd ff:ff:ff:ff:ff:ff link-netnsid 1 inet 10.0.0.11/24 scope global veth-client valid_lft forever preferred_lft forever inet6 fe80::c8e8:30ff:fe2e:f9d2/64 scope link valid_lft forever preferred_lft forever # 同样，server网络命名空间，输出相似，略 $ ip netns exec server ip addr 。。。 # 互ping测试 $ ip netns exec client ping 10.0.0.12 $ ip netns exec server ping 10.0.0.11 ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/:1:0","tags":["network","kubernetes"],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"},{"categories":["kubernetes"],"content":"Docker网桥模型 如果要创建更网络命名空间并互相连接，用 veth 对将这些网络命名空间进行两两连接就很麻烦了。可以创建创建一个 Linux 网桥来连接这些网络命名空间。Docker 就是这样为同一主机内的容器进行连接的。 # 步骤全流程 $ BR=bridge1 $ HOST_IP=192.168.0.116 $ ip link add client1-veth type veth peer name client1-veth-br # 添加虚拟网卡与虚拟网桥对 $ ip link add server1-veth type veth peer name server1-veth-br $ ip link add $BR type bridge # 添加网桥 $ ip netns add client1 $ ip netns add server1 $ ip link set client1-veth netns client1 $ ip link set server1-veth netns server1 $ ip link set client1-veth-br master $BR $ ip link set server1-veth-br master $BR $ ip link set $BR up $ ip link set client1-veth-br up $ ip link set server1-veth-br up $ ip netns exec client1 ip link set client1-veth up $ ip netns exec server1 ip link set server1-veth up $ ip netns exec client1 ip addr add 192.168.1.11/24 dev client1-veth $ ip netns exec server1 ip addr add 192.168.1.12/24 dev server1-veth $ ip addr add 192.168.1.1/24 dev $BR # 为网桥分配ip地址 $ ip netns exec client1 ping 192.168.1.12 -c 5 $ ip netns exec client1 ping 192.168.1.1 -c 5 发现最后一条命令报错connect: Network is unreachable，原因路由不通，加入一条缺省路由即可： $ ip netns exec client1 ip route add default via 192.168.1.1 $ ip netns exec server1 ip route add default via 192.168.1.1 外部服务器访问内部(Docker为例)： Docker 创建的 netns 没有保存在缺省位置，所以 ip netns list 是看不到这个网络命名空间的。我们可以在缺省位置创建一个符号链接： $ container_id=web $ container_netns=$(docker inspect ${container_id} --format '{{ .NetworkSettings.SandboxKey }}') $ mkdir -p /var/run/netns $ rm -f /var/run/netns/${container_id} $ ln -sv ${container_netns} /var/run/netns/${container_id} '/var/run/netns/web' -\u003e '/var/run/docker/netns/c009f2a4be71' $ ip netns list web (id: 3) server1 (id: 1) client1 (id: 0) 看看 web 命名空间的 IP 地址： $ ip netns exec web ip addr 1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 11: eth0@if12: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0 inet 172.18.0.3/24 brd 172.18.0.255 scope global eth0 valid_lft forever preferred_lft forever 然后看看容器里的 IP 地址： $ WEB_IP=`docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" web` $ echo $WEB_IP 172.18.0.3 加入端口转发规则，其它主机就能访问这个 nginx 了： $ iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination $WEB_IP:80 $ curl localhost:80 ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/:2:0","tags":["network","kubernetes"],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"},{"categories":["kubernetes"],"content":"节点间网络传输 如下图所示： ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/:2:1","tags":["network","kubernetes"],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"},{"categories":["kubernetes"],"content":"k8s服务网络 技术类文章网上一搜一大片，这里我分享一个之前YouTube上看到的一个视频，简洁明了。 #dplayer-video-container { max-width: 800px; margin: 0 auto; margin-top: -1rem; } @media screen and (max-device-width: 400px) { #dplayer { width: 100%; } } const dp = new DPlayer({ container: document.getElementById('dplayer'), autoplay: false, theme: '#c05b4d', loop: false, lang: 'zh-cn', screenshot: false, hotkey: true, preload: 'auto', volume: 0.7, mutex: true, logo: 'https://agou-images.oss-cn-qingdao.aliyuncs.com/BaseIMG/youtube.png', subtitle: { url: '\\/subtitles\\/Kubernetes%20Services networking-English.vtt', type: 'webvtt', fontSize: '20px', bottom: '3%', color: '#0000', }, video: { type: 'auto', url: 'https:\\/\\/agou-resources.oss-cn-chengdu.aliyuncs.com\\/video\\/Kubernetes%20Services%20networking.mp4', pic: '' }, contextmenu: [ { text: '❤ 博客主页', link: 'https://agou-ops.github.io' }, { text: '播放器信息', click: (player) = { console.log(player); } } ], highlight: [ { time: '0', text: 'ClusterIP', }, { time: '107', text: 'NodePort', }, { time: '108', text: 'ServiceIP with Calio', }, { time: '', text: '', }, { time: '', text: '', }, ], }); #dplayer-video-container { max-width: 800px; margin: 0 auto; margin-top: -1rem; } @media screen and (max-device-width: 400px) { #dplayer { width: 100%; } } const dp = new DPlayer({ container: document.getElementById('dplayer'), autoplay: false, theme: '#b7daff', loop: false, lang: 'zh-cn', screenshot: false, hotkey: true, preload: 'auto', volume: 0.7, mutex: true, logo: 'https://agou-images.oss-cn-qingdao.aliyuncs.com/BaseIMG/youtube.png', video: { type: 'auto', url: '\\/subtitles\\/Kubernetes%20Services%20networking.mp4', pic: '' }, contextmenu: [ { text: '❤ 博客主页', link: 'https://agou-ops.github.io' }, { text: '播放器信息', click: (player) = { console.log(player); } } ], highlight: [ { time: '0', text: 'ClusterIP', }, { time: '107', text: 'NodePort', }, { time: '108', text: 'ServiceIP with Calio', }, { time: '', text: '', }, { time: '', text: '', }, ], }); -- ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/:3:0","tags":["network","kubernetes"],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"},{"categories":["kubernetes"],"content":"参考链接 Life of a Packet in Kubernetes — Part 1: https://dramasamy.medium.com/life-of-a-packet-in-kubernetes-part-1-f9bc0909e051 kubernetes services network YouTube: https://www.youtube.com/watch?v=NFApeJRXos4 ","date":"2021-11-02","objectID":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/:4:0","tags":["network","kubernetes"],"title":"K8s网络学习","uri":"/loveit/post/k8s%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"},{"categories":["Linux"],"content":"整理三款流行的内网穿透工具，frp【开源】，nps【开源】，ngrok【基础版免费】，前两款属于开源产品，需要自行搭建，ngrok属于付费产品，但是基础版，白嫖的足够用了.:smile: ","date":"2021-10-21","objectID":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:0:0","tags":["内网穿透"],"title":"最全内网穿透工具","uri":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"categories":["Linux"],"content":"bore（新起之秀） github日趋势榜第一，github仓库地址https://github.com/ekzhang/bore A modern, simple TCP tunnel in Rust that exposes local ports to a remote server, bypassing standard NAT connection firewalls. That’s all it does: no more, and no less. 用完之后，一个词来形容，so easy~ 快速安装： # 如果没有cargo，需要提前安装 # debian系 apt install cargo -y # MacOS brew install cargo # 安装bore，依赖于rust cargo install bore-cli # -- 此外，cargo还有docker镜像包，运行以下命令可以直接使用 docker run -it --init --rm --network host ekzhang/bore \u003cARGS\u003e :warning: 注意：如遇到cargo install过程中出现编译错误（原因是apt仓库中的rust版本太低，bore的最低要求是Rust 1.58.0）： curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh 简单使用： # 服务器端 bore server # 客户端（本地主机） bore local 8000 --to \u003cYOUR_REMOTE_SERVER_ADDR_OR_IP\u003e 添加认证： # on the server bore server --secret my_secret_string # on the client bore local \u003cLOCAL_PORT\u003e --to \u003cTO\u003e --secret my_secret_string 效果如下： bore服务器端会随机起一个端口映射给客户端。 :warning: 注意：如果映射完之后发现无法访问，那应该是被你的防火墙拦截了，使用以下命令关闭防火墙： # 关闭防火墙 systemctl stop firewalld # redhat系，禁止开机自启，systemctl disable掉就可以了，下面debian系也是. systemctl stop ufw # debian系 # 查看iptables规则 iptables -vnL # 清空iptables规则 iptables -F 如果不想关闭防火墙，那么就需要手动设置规则，这里不是本篇博文的重点，在此不再赘述. ","date":"2021-10-21","objectID":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:1:0","tags":["内网穿透"],"title":"最全内网穿透工具","uri":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"categories":["Linux"],"content":"frp A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet. frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。 frp架构图： :warning:frp如果想外网访问，需要带有公网IP的服务器才可以，另外需要安全组放行相应的端口，要不然嗝屁没法正常访问，如果没有公网IP的服务器，建议使用下面要介绍的ngrok。 废话少说，想要了解更多可以去GayHub仓库详细了解，下面开始快速安装步骤： # frp官方release仓库：https://github.com/fatedier/frp/releases # 服务端frps客户端frpc二进制包都在一起，所以下面的步骤基本一样 $ wget https://github.com/fatedier/frp/releases/download/v0.37.1/frp_0.37.1_linux_amd64.tar.gz $ tar xf frp_0.37.1_linux_amd64.tar.g \u0026\u0026 cd frp_0.37.1_linux_amd64 以下列举我常用的服务器端以及客户端配置【以后有增加会更新】： 通过RDP访问内网Windows主机 # --- server # frps.ini文件内容如下 [common] bind_port = 7000 # 绑定的端口 token = X56Fdsfx # 用于身份验证，请自行修改，要保证服务端与客户端一致 dashboard_port = 7500 # 面板 # dashboard 用户名密码，默认都为 admin dashboard_user = admin dashboard_pwd = admin # --- client # frpc.ini文件内容如下 [common] server_addr = x.x.x.x # 公网IP地址 server_port = 7000 # 与服务器端的`bind_port`地址一致 token = X56Fdsfx # 用于身份验证，请自行修改，要保证服务端与客户端一致 [rdp] # 这里面填的时连接名称，可以在dashboard中直观的分辨出你所穿透的服务 type = tcp local_ip = 127.0.0.1 local_port = 3389 remote_port = 6000 :v: 验证RDP远程访问内网Windows机器：随便找个RDP客户端工具，使用\u003cPUBLIC_IP\u003e:6000连接即可。 :information_source:小技巧： ' 针对于Windows，为了方便使用，我们可以将frp添加为开机启动项，或者注册为服务。 # 添加为开机启动项 ' 文件名为：start_frpc.vbs，内容如下所示： CreateObject(\"WScript.Shell\").Run \"\"\"D:\\frp_windows_amd64\\frpc.exe\"\"\" \u0026 \"-c\" \u0026 \"\"\"D:\\frp_windows_amd64\\frpc.ini\"\"\",0 ' 将该文件放到：C:\\Users\\\u003cUSER_NAME\u003e\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup文件夹里面即可。 # 注册为服务 ' 下载一个nssm工具傻瓜式注册服务，然后将服务类型改为自启动即可，这个地方我就略过不详细讲了. 通过SSH访问内网机器（其实和RDP差不多，就不做解释了） # --- server # frps.ini文件内容如下 [common] bind_port = 7000 # --- client # frpc.ini文件内容如下 [common] server_addr = x.x.x.x server_port = 7000 [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 6000 :v: 验证SSH访问内网机器： $ ssh -oPort=6000 \u003cUSER_NAME\u003e@\u003cPUBLIC_IP\u003e # 如ssh -oPort=6000 agou-ops@69.42.6.43 frp 会将请求 \u003cPUBLIC_IP\u003e:6000 的流量转发到内网机器的22端口。 :warning:使用上面的服务直接将SSH暴露于公网之中犹如裸奔，安全隐患极高，使用 stcp(secret tcp) 类型的代理可以避免让任何人都能访问到要穿透的服务，但是访问者也需要运行另外一个 frpc 客户端。其配置文件如下： # --- server # frps.ini文件内容如下 [common] bind_port = 7000 # --- client # frpc.ini文件内容如下 [common] server_addr = x.x.x.x server_port = 7000 [secret_ssh] type = stcp # 只有 sk 一致的用户才能访问到此服务 sk = abcdefg local_ip = 127.0.0.1 local_port = 22 # --- client，想要访问内网ssh的客户端也需要启动frpc # frpc.ini文件内容如下 [common] server_addr = x.x.x.x server_port = 7000 [secret_ssh_visitor] type = stcp # stcp 的访问者 role = visitor # 要访问的 stcp 代理的名字 server_name = secret_ssh sk = abcdefg # 绑定本地端口用于访问 SSH 服务 bind_addr = 127.0.0.1 bind_port = 6000 :v:验证：访问本地6000端口即可内网穿透到我们所需的另一台内网客户端机器. 使用以上类型stcp的流量会通过服务器，如果希望传输大量数据且流量不经过服务器，可以使用点对点内网穿透xctp，这里我就不过多介绍，感兴趣或者有需要的可以去了解了解。 通过WEB访问内网网站服务 # --- server # frps.ini文件内容如下 [common] bind_port = 7000 vhost_http_port = 8080 # --- client # frpc.ini文件内容如下 [common] server_addr = x.x.x.x server_port = 7000 [web] type = http local_port = 80 custom_domains = agou-ops.cn [web2] type = http local_port = 8080 custom_domains = agou-ops.cn # 【可选】以下为将本地http服务转换为https服务并对外提供的插件配置 # ----------------------------- plugin = https2http plugin_local_addr = 127.0.0.1:80 # HTTPS 证书相关的配置 plugin_crt_path = ./server.crt plugin_key_path = ./server.key plugin_host_header_rewrite = 127.0.0.1 plugin_header_X-From-Where = frp # ----------------------------- :v: 验证外网访问内网WEB： 将 agou-ops.cn 和 agou-ops.cn 的域名 A 记录解析到 IP x.x.x.x，如果服务器已经有对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。或者可以通过修改 HTTP 请求的 Host 字段来实现同样的效果。 通过浏览器访问 http://agou-ops.cn:8080 即可访问到处于内网机器上 80 端口的服务，访问 http://agou-ops.cn:8080 则访问到内网机器上 8080 端口的服务。 外网访问内网文件 # --- server # frps.ini文件内容如下 [common] bind_port = 7000 # --- client # frpc.ini文件内容如下 [common] server_addr = x.x.x.x server_port = 7000 [test_static_file] type = tcp remote_port = 6000 plugin = static_file # 要对外暴露的文件目录 plugin_local_path = /tmp/file # 用户访问 URL 中会被去除的前缀，保留的内容即为要访问的文件路径 plugin_strip_prefix = static plugin_http_user = abc plugin_http_passwd = abc :v: 验证外网访问内网指定目录：通过浏览器访问 http://x.x.x.x:6000/static/ 来查看位于/tmp/file目录下","date":"2021-10-21","objectID":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:2:0","tags":["内网穿透"],"title":"最全内网穿透工具","uri":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"categories":["Linux"],"content":"nps nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端。 同样，直接快速开始，不过多介绍： # nps的客户端和服务端是分离开的，需要分别单独下载 # 服务端 $ wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_server.tar.gz $ tar xf linux_amd64_server.tar.gz $ sudo mv nps /usr/local/bin # 自己做软连接也可以 # 客户端 $ wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_client.tar.gz $ tar xf linux_amd64_client.tar.gz $ sudo mv npc /usr/local/bin 安装与启动服务端与客户端的连接服务端： # 服务端 $ nps install # 安装，该命令完成之后会在当前目录生成一个conf目录和一个web目录，文件用途显而易见 # 服务端配置文件需要修改的东西很少，按需进行调整即可，终端获取公网ip可以使用curl ifconfig.me或者curl ip.cip.cc等接口获取。 $ sed -i 's/web_host=.*/web_host=\u003cYOUR_PUBLIC_IP\u003e/' nps.conf $ nps start # 启动 # 客户端连接服务端 $ npc -server=\u003cYOUR_PUBLIC_IP\u003e:8024 -vkey=\u003c客户端的密钥\u003e # 这个8024端口对应server端`nps.conf`中的bridge_port参数 停止和重启可用，stop和restart 如果发现没有启动成功，可以使用nps(.exe) stop，然后运行nps.(exe)运行调试，或查看日志(Windows日志文件位于当前运行目录下，linux和darwin位于/var/log/nps.log) 访问服务端ip:web服务端口（默认为8080） 使用用户名和密码登陆（默认admin/123，正式使用一定要更改） 创建客户端 客户端密钥可以从web页面中获取： 上图也是新建客户端的步骤（说是步骤，基本是没有，xd）。 新建完客户端之后就可以建立隧道连接了，这里以HTTP服务为例： 傻瓜式配置，我就不多说了，客户端ID即为你上面创建的那个，可以去客户端页面中进行查看。 :v:验证：访问公网的9090端口，即访问的是内网指定IP和端口的应用。 附：nps.conf配置文件名称及含义（来自官方文档）： 名称 含义 web_port web管理端口 web_password web界面管理密码 web_username web界面管理账号 web_base_url web管理主路径,用于将web管理置于代理子路径后面 bridge_port 服务端客户端通信端口 https_proxy_port 域名代理https代理监听端口 http_proxy_port 域名代理http代理监听端口 auth_key web api密钥 bridge_type 客户端与服务端连接方式kcp或tcp public_vkey 客户端以配置文件模式启动时的密钥，设置为空表示关闭客户端配置文件连接模式 ip_limit 是否限制ip访问，true或false或忽略 flow_store_interval 服务端流量数据持久化间隔，单位分钟，忽略表示不持久化 log_level 日志输出级别 auth_crypt_key 获取服务端authKey时的aes加密密钥，16位 p2p_ip 服务端Ip，使用p2p模式必填 p2p_port p2p模式开启的udp端口 pprof_ip debug pprof 服务端ip pprof_port debug pprof 端口 disconnect_timeout 客户端连接超时，单位 5s，默认值 60，即 300s = 5mins ","date":"2021-10-21","objectID":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:3:0","tags":["内网穿透"],"title":"最全内网穿透工具","uri":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"categories":["Linux"],"content":"ngrok 首先注册一个ngrok账号，官网地址，注册登录之后会跳转一个快速开始页面，如下所示，安装对应操作系统及架构的二进制包即可使用： 官网讲的很详细，这里我就简单的把要使用的命令罗列出来，方便使用： # 这里以linux系统为例 $ wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip $ unzip ngrok-stable-linux-amd64.zip $ sudo mv ngrok /usr/local/bin # 验证ngrok是否成功安装 $ ngrok version ngrok version 2.3.40 # 获取你的token，https://dashboard.ngrok.com/get-started/your-authtoken $ ngrok authtoken \u003cYOUR_TOKEN_HERE\u003e # 该命令执行之后会在用户家目录生成一个token文件，路径为~/.ngrok2/ngrok.yml 这里我随便起个web服务，以我的博客hugo为例： $ cd myWeb/myBlog \u0026\u0026 hugo server # hugo默认会监听在本地localhost:1313端口 # 启用一个http隧道来外网远程访问本地博客 $ ngrok http 1313 可以看到ngrok服务已经正常运行，而且给出了远程访问的http地址和https地址，复制到浏览器即可外网远程访问本地web服务. 此外，ngrok还内置了一个web接口，即图上的Web Interface，默认地址是http://127.0.0.1:4040 可以看到ngrok的一些状态以及一些对资源的分析内容。 总之，ngrok非常的方便易用，最重要的一点是无需自备服务器，开箱即用，ngrok还提供有其他增强型功能，比如自定义域名、IP黑白名单、隧道客户端、TLS、IP规则等等，但这些都是付费内容，想白嫖的就别想了. :laughing: ","date":"2021-10-21","objectID":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:4:0","tags":["内网穿透"],"title":"最全内网穿透工具","uri":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"categories":["Linux"],"content":"参考链接 frp GitHub repo: https://github.com/fatedier/frp nps GitHub repo: https://github.com/ehang-io/nps ngrok Offical website: https://ngrok.com/ ","date":"2021-10-21","objectID":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/:5:0","tags":["内网穿透"],"title":"最全内网穿透工具","uri":"/loveit/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"categories":["vim","Ubuntu"],"content":"默认直接通过apt或者apt-get安装的vim功能不全，缺少clipboard功能，原因是debian官方为了兼容性才如此考虑，但debian官方也同样提供了以下几个包来满足GUI需求： vim-athena Vi IMproved - enhanced vi editor - with Athena GUI vim-gtk Vi IMproved - enhanced vi editor - with GTK2 GUI vim-gtk3 Vi IMproved - enhanced vi editor - with GTK3 GUI 可以直接通过apt install \u003cPackage_name\u003e来安装以上包来直接使用。 但是我感觉功能还是不够全面，因此下面我简单介绍通过编译来安装带有X-Window Clipboard模块的vim： ","date":"2021-08-17","objectID":"/loveit/post/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91vim%E5%A2%9E%E5%8A%A0x-windows-clipboard%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/:0:0","tags":["vim","编译","clipboard"],"title":"手动编译vim增加X Windows Clipboard功能模块","uri":"/loveit/post/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91vim%E5%A2%9E%E5%8A%A0x-windows-clipboard%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/"},{"categories":["vim","Ubuntu"],"content":"编译环境 安装编译环境： $ sudo apt install -y build-essential # 安装编译包组 # 其他必要软件包 $ sudo apt install -y libxt-dev libgtk-3-dev \\ libpython3-dev \\ # 如果要添加python3支持，需要额外安装此包 libtool libtool-bin \\ # 编译时可能因没有libtool而报错 libncurses5-dev libgnome2-dev libgnomeui-dev libgtk2.0-dev libatk1.0-dev libbonoboui2-dev libcairo2-dev libx11-dev libxpm-dev libxt-dev # 其他额外可能用到的包 ","date":"2021-08-17","objectID":"/loveit/post/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91vim%E5%A2%9E%E5%8A%A0x-windows-clipboard%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/:1:0","tags":["vim","编译","clipboard"],"title":"手动编译vim增加X Windows Clipboard功能模块","uri":"/loveit/post/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91vim%E5%A2%9E%E5%8A%A0x-windows-clipboard%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/"},{"categories":["vim","Ubuntu"],"content":"编译安装vim 拉取仓库最新源码包： $ git clone https://github.com/vim/vim.git 进入相关目录：cd vim/src 在目录下执行以下命令： $ ./configure \\ --enable-cscope \\ --with-features=huge \\ --with-x \\ --with-compiledby=\"AGou-ops\u003cAGou-ops@foxmail.com\u003e\" 其他详细编译选项及说明参考：VIM INSTALL file 编译直接使用以下命令： $ make -j4 # -j表示线程数，看个人CPU核心数而定 编译完成之后会在当前目录生成相关二进制文件，此时检查vim编译的各项参数： $ ./vim --version VIM - Vi IMproved 8.2 (2019 Dec 12, compiled Aug 17 2021 14:03:35) Included patches: 1-3356 Compiled by AGou-ops\u003cAGou-ops@foxmail.com\u003e Huge version with GTK3 GUI. Features included (+) or not (-): +acl +file_in_path +mouse_urxvt -tag_any_white +arabic +find_in_path +mouse_xterm -tcl +autocmd +float +multi_byte +termguicolors +autochdir +folding +multi_lang +terminal -autoservername -footer -mzscheme +terminfo +balloon_eval +fork() +netbeans_intg +termresponse +balloon_eval_term -gettext +num64 +textobjects +browse -hangul_input +packages +textprop ++builtin_terms +iconv +path_extra +timers +byte_offset +insert_expand -perl +title +channel +ipv6 +persistent_undo +toolbar +cindent +job +popupwin +user_commands +clientserver +jumplist +postscript +vartabs +clipboard +keymap +printer +vertsplit +cmdline_compl +lambda +profile +virtualedit +cmdline_hist +langmap -python +visual +cmdline_info +libcall -python3 +visualextra +comments +linebreak +quickfix +viminfo +conceal +lispindent +reltime +vreplace +cryptv +listcmds +rightleft +wildignore +cscope +localmap -ruby +wildmenu +cursorbind -lua +scrollbind +windows +cursorshape +menu +signs +writebackup +dialog_con_gui +mksession +smartindent +X11 +diff +modify_fname -sodium -xfontset +digraphs +mouse -sound +xim +dnd +mouseshape +spell -xpm -ebcdic +mouse_dec +startuptime +xsmp_interact +emacs_tags -mouse_gpm +statusline +xterm_clipboard +eval -mouse_jsbterm -sun_workshop -xterm_save +ex_extra +mouse_netterm +syntax +extra_search +mouse_sgr +tag_binary -farsi -mouse_sysmouse -tag_old_static system vimrc file: \"$VIM/vimrc\" user vimrc file: \"$HOME/.vimrc\" 2nd user vimrc file: \"~/.vim/vimrc\" user exrc file: \"$HOME/.exrc\" system gvimrc file: \"$VIM/gvimrc\" user gvimrc file: \"$HOME/.gvimrc\" 2nd user gvimrc file: \"~/.vim/gvimrc\" defaults file: \"$VIMRUNTIME/defaults.vim\" system menu file: \"$VIMRUNTIME/menu.vim\" fall-back for $VIM: \"/usr/local/share/vim\" Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK -pthread -I/usr/include/gtk-3.0 -I/usr/include/at-spi2-atk/2.0 -I/usr/include/at-spi-2.0 -I/usr/include/dbus-1.0 -I/usr/lib/x86_64-linux-gnu/dbus-1.0/include -I/usr/include/gtk-3.0 -I/usr/include/gio-unix-2.0 -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/fribidi -I/usr/include/harfbuzz -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/uuid -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 Linking: gcc -L/usr/local/lib -Wl,--as-needed -o vim -lgtk-3 -lgdk-3 -lpangocairo-1.0 -lpango-1.0 -lharfbuzz -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0 -lSM -lICE -lXt -lX11 -lXdmcp -lSM -lICE -lm -ltinfo -lselinux -ldl 嘶~有点多:joy: ，我们只看我们想要的clipboard模块： $ ./vim --version | grep clipboard +clipboard +keymap +printer +vertsplit +emacs_tags -mouse_gpm +statusline +xterm_clipboard 主要看+clipboard和+xterm_clipboard 前面是否有+，默认apt直接安装的vim显示的是-，即表示未编译安装此模块。 飒，执行最后的安装步骤： $ sudo make install 执行完该命令之后，直接在终端使用vim命令即可体验新特性及自己编译安装好的X-Window Clipboard模块，yeah！ ","date":"2021-08-17","objectID":"/loveit/post/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91vim%E5%A2%9E%E5%8A%A0x-windows-clipboard%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/:2:0","tags":["vim","编译","clipboard"],"title":"手动编译vim增加X Windows Clipboard功能模块","uri":"/loveit/post/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91vim%E5%A2%9E%E5%8A%A0x-windows-clipboard%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/"},{"categories":["vim","Ubuntu"],"content":"最后 编译安装vim前，建议先卸载掉原来版本的vim再进行编译安装（sudo apt remove vim -y），如果你没有提前卸载掉原来的vim，可以使用以下方法来用新版本vim替换旧版本vim： sudo update-alternatives --install \"/usr/bin/vim\" \"vim\" \"/usr/local/bin/vim\" 1 sudo update-alternatives --install \"/usr/bin/vi\" \"vi\" \"/usr/local/bin/vim\" 1 sudo update-alternatives --config vim sudo update-alternatives --config vi sudo update-alternatives --config gvim 使用ls -lah /usr/bin/vim来检查新vim是否生效。 ","date":"2021-08-17","objectID":"/loveit/post/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91vim%E5%A2%9E%E5%8A%A0x-windows-clipboard%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/:3:0","tags":["vim","编译","clipboard"],"title":"手动编译vim增加X Windows Clipboard功能模块","uri":"/loveit/post/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91vim%E5%A2%9E%E5%8A%A0x-windows-clipboard%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/"},{"categories":["vim","Ubuntu"],"content":"参考链接 Github gist: https://gist.github.com/lirenlin/63453cda5181028b2565 why-is-vim-for-debian-compiled-without-clipboard: https://vi.stackexchange.com/questions/13564/why-is-vim-for-debian-compiled-without-clipboard How to Copy Text to Clipboard in Vim: https://linoxide.com/copy-text-to-clipboard-in-vim/ ","date":"2021-08-17","objectID":"/loveit/post/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91vim%E5%A2%9E%E5%8A%A0x-windows-clipboard%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/:4:0","tags":["vim","编译","clipboard"],"title":"手动编译vim增加X Windows Clipboard功能模块","uri":"/loveit/post/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91vim%E5%A2%9E%E5%8A%A0x-windows-clipboard%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/"},{"categories":["Shell"],"content":"需求：根据excel中的文件列表，将excel进行简单处理成csv格式，使用sed、awk等结合正则对图片文件按照年月的格式来进行重新归档并输出相关日志。 代码如下： ","date":"2021-08-11","objectID":"/loveit/post/%E6%A0%B9%E6%8D%AEcsv%E9%87%8D%E5%BD%92%E6%A1%A3%E6%96%87%E4%BB%B6/:0:0","tags":["Shell"],"title":"根据csv重归档文件","uri":"/loveit/post/%E6%A0%B9%E6%8D%AEcsv%E9%87%8D%E5%BD%92%E6%A1%A3%E6%96%87%E4%BB%B6/"},{"categories":["故障","桌面运维"],"content":"今天白天同事钉钉上联系我，说电脑无法正常开机，约定好时间之后，我去到该同事工位看了看。其确切故障是电脑按下开机键之后无任何反应，显示器上连品牌logo都不显示。我的初步判断是： 显示屏是否有问题，或者是不是HDMI线接触不良？ 主板上显卡是不是接触不良？ 问同事和自己亲手检查线之后排除显示屏的问题，随后拆机看了看显卡，显卡是内嵌在主板上的，没有独立显卡，所以先暂时排除显卡的问题。接下来将注意力转移到内存条上面来，强制关闭电脑并断电之后，重新拔插了内存条然后开机，按下电源键短暂显示logo之后就没反应了，强制重启之后logo不显示，尝试将内存条切换到另外一个插槽之后，还是相同的故障。 通过网站查询故障以及联系戴尔售后技术支持，最终解决了这个问题，具体步骤如下： 电脑完全断电关机之后，拔掉下图中的蓝色JUMP跳线帽，然后接上电源开机； 开机会自动进入BIOS自检，会提示一个警告信息，内容为警告，上次启动时未检测到内存，实际意思大概就是内存有变动，不用管这个警告，点击下一步continue即可； 如若未插跳线帽，每次开机会提示以下信息，意思很简单，就不翻译了； 电脑正常开机之后，关机完全断电，然后将JUMP蓝色跳线帽接回原来位置，合好机箱，正常开机即可。 ","date":"2021-07-26","objectID":"/loveit/post/dell_unable_startup/:0:0","tags":["故障","硬件"],"title":"记戴尔品牌机开机黑屏无logo故障","uri":"/loveit/post/dell_unable_startup/"},{"categories":["故障","桌面运维"],"content":"总结 故障处理很简单，原因可能是内存条金手指接触不良原因导致，学了一手插拔跳线帽操作，针不戳。 ","date":"2021-07-26","objectID":"/loveit/post/dell_unable_startup/:1:0","tags":["故障","硬件"],"title":"记戴尔品牌机开机黑屏无logo故障","uri":"/loveit/post/dell_unable_startup/"},{"categories":["生活","日记"],"content":"啊，多想再继续当一名学生，但是已经不可以了。 此次离别，不知何时再见。 function password() { var testV = 3; var pass1 = prompt('输入密码以完整访问:', 'Type here...'); while (testV 0) { if (!pass1) history.go(-1); if (pass1 == \"agou-ops\") { alert('密码正确!'); break; } var pass1 = prompt('密码错误！你还有'+testV+'次机会.'); testV += -1; } if (pass1 != \"agou-ops\" \u0026 testV == 0) window.alert(\"访客骂骂咧咧的走出了现场。\"); top.location.href=\"/\" return \" \"; } document.write(password()); 朋友 左1浩哥，左2龙少，右代某 舍友 左1姚兄，左2潇帅，左3桀桀，中乐总，右1连长，右2代某 舍友 左1乐总，左2潇帅，左3姚兄，右1桀桀，右2连长，右3代某 同学 全体同学 以此纪念。 ","date":"2021-06-28","objectID":"/loveit/post/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A/:0:1","tags":["日记"],"title":"大学毕业。","uri":"/loveit/post/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A/"},{"categories":["流控"],"content":"tc 高级流量控制","date":"2020-12-16","objectID":"/loveit/post/tc-%E9%AB%98%E7%BA%A7%E6%B5%81%E6%8E%A7/","tags":["tc","流控"],"title":"TC 高级流控","uri":"/loveit/post/tc-%E9%AB%98%E7%BA%A7%E6%B5%81%E6%8E%A7/"},{"categories":["流控"],"content":"TC 简介及原理 tc 是 Linux 系统中的一个工具，全名为traffic control（流量控制）, 主要是通过在输出端口处建立一个队列来实现流量控制。tc 可以用来控制 netem 的工作模式，也就是说，想要使用 netem ，则需要内核开启了 netem，而且安装了 tc工具。 tc 控制的是发包动作，不能控制收包动作。它直接对物理接口生效，如果控制了物理的eth0，那么逻辑网卡（比如eth0:1）也会受到影响，反之则不行，控制逻辑网卡是无效的。 接收包从输入接口（Input Interface）进来后，经过流量限制（Ingress Policing）丢弃不符合规定的数据包，由输入多路分配器（Input De-Multiplexing）进行判断选择：如果接收包的目的是本主机，那么将该包送给上层处理；否则需要进行转发，将接收包交到转发块（Forwarding Block）处理。转发块同时也接收本主机上层（TCP、UDP等）产生的包。转发块通过查看路由表，决定所处理包的下一跳。然后，对包进行排列以便将它们传送到输出接口（Output Interface）。一般我们只能限制网卡发送的数据包，不能限制网卡接收的数据包，所以我们可以通过改变发送次序来控制传输速率。Linux流量控制主要是在输出接口排列时进行处理和实现的。 ","date":"2020-12-16","objectID":"/loveit/post/tc-%E9%AB%98%E7%BA%A7%E6%B5%81%E6%8E%A7/:1:0","tags":["tc","流控"],"title":"TC 高级流控","uri":"/loveit/post/tc-%E9%AB%98%E7%BA%A7%E6%B5%81%E6%8E%A7/"},{"categories":["流控"],"content":"TC 基础使用 模拟延迟传输：tc qdisc add dev eth0 root netem delay 100ms, 可以通过ping的方式验证是否增加效果成功 模拟延迟波动：tc qdisc add dev eth0 root netem delay 100ms 10ms 延迟波动随机性：tc qdisc add dev eth0 root netem delay 100ms 10ms 30% 模拟网络丢包：tc qdisc add dev eth0 root netem loss 1% 网络丢包成功率：tc qdisc add dev eth0 root netem loss 1% 30% 删除相关配置：tc qdisc del dev eth0 root netem delay 100ms 模拟包重复：tc qdisc add dev eth0 root netem duplicate 1% 模拟包损坏：tc qdisc add dev eth0 root netem corrupt 0.2% 查看网卡配置：tc qdisc show dev eth0 查看丢包率：tc -s qdisc show dev eth0 ","date":"2020-12-16","objectID":"/loveit/post/tc-%E9%AB%98%E7%BA%A7%E6%B5%81%E6%8E%A7/:2:0","tags":["tc","流控"],"title":"TC 高级流控","uri":"/loveit/post/tc-%E9%AB%98%E7%BA%A7%E6%B5%81%E6%8E%A7/"},{"categories":["流控"],"content":"针对ip段下载速率控制 tc qdisc del dev eth0 root handle 1: # 删除控制1: tc qdisc add dev eth0 root handle 1: htb r2q 1 # 添加控制1: tc class add dev eth0 parent 1: classid 1:1 htb rate 12mbit ceil 15mbit # 设置速率 tc filter add dev eth0 parent 1: protocol ip prio 16 u32 match ip dst 10.10.10.1/24 flowid 1:1 # 指定ip段控制规则 # 检查命令 tc -s -d qdisc show dev eth0 tc class show dev eth0 tc filter show dev eth0为 ","date":"2020-12-16","objectID":"/loveit/post/tc-%E9%AB%98%E7%BA%A7%E6%B5%81%E6%8E%A7/:3:0","tags":["tc","流控"],"title":"TC 高级流控","uri":"/loveit/post/tc-%E9%AB%98%E7%BA%A7%E6%B5%81%E6%8E%A7/"},{"categories":["流控"],"content":"限制上传下载 tc qdisc del dev tun0 root tc qdisc add dev tun0 root handle 2:0 htb tc class add dev tun0 parent 2:1 classid 2:10 htb rate 30kbps tc class add dev tun0 parent 2:2 classid 2:11 htb rate 30kbps tc qdisc add dev tun0 parent 2:10 handle 1: sfq perturb 1 tc filter add dev tun0 protocol ip parent 2:0 u32 match ip dst 10.18.0.0/24 flowid 2:10 tc filter add dev tun0 parent ffff: protocol ip u32 match ip src 10.18.0.0/24 police rate 30kbps burst 10k drop flowid 2:11 tc qdisc del dev tun0 root # 删除原有策略 tc qdisc add dev tun0 root handle 2:0 htb # 定义最顶层(根)队列规则，并指定 default 类别编号，为网络接口 eth1 绑定一个队列，类型为 htb，并指定了一个 handle 句柄 2:0 用于标识它下面的子类 tc class add dev tun0 parent 2:1 classid 2:10 htb rate 30kbps # 设置一个规则速度是30kbps tc class add dev tun0 parent 2:2 classid 2:11 htb rate 30kbps tc qdisc add dev tun0 parent 2:10 handle 1: sfq perturb 1 # 调用随机公平算法 tc filter add dev tun0 protocol ip parent 2:0 u32 match ip dst 10.18.0.0/24 flowid 2:10 # 规则2:10应用在目标地址上，即下载 tc filter add dev tun0 parent ffff: protocol ip u32 match ip src 10.18.0.0/24 police rate 30kbps burst 10k drop flowid 2:11 # 上传限速 该文章内容收集于网络。 ","date":"2020-12-16","objectID":"/loveit/post/tc-%E9%AB%98%E7%BA%A7%E6%B5%81%E6%8E%A7/:4:0","tags":["tc","流控"],"title":"TC 高级流控","uri":"/loveit/post/tc-%E9%AB%98%E7%BA%A7%E6%B5%81%E6%8E%A7/"},{"categories":["vim","技巧","持续更新"],"content":" 该文章用于记录个人在使用vim期间常用的技巧和快捷键。 2021-08-20 15:27:56：初始化； 2021年08月20日15:27:18 ： 更新vim分屏快捷键以及NERDTree快捷键； 2021年09月18日09:53:28： 更新插件快捷键； ","date":"2020-12-06","objectID":"/loveit/post/vim-tricks/:0:0","tags":["vim","tricks"],"title":"Vim Hotkeys and Cheat Sheet","uri":"/loveit/post/vim-tricks/"},{"categories":["vim","技巧","持续更新"],"content":"通用技巧 普通模式快捷键/操作符(直接使用, 无需使用:) # :h operator 来查阅完整的列表 \u003eG 下一行到末行缩进, 使用`\u003e+ENTER`能达到相同效果 \u003e\u003e 仅缩进当前行 . 重复执行上一次命令 A 在当前行尾插入内容，相当于`$a` J 将当前行与下一行连接到一起 f/t(F/T) 向后向前查找字符, 使用`;`进行下一个查找, 使用`,`进行反向查找 s 删除当前字符并进入插入模式 o 添加新行并进入插入模式 * 高亮文本中所有与光标处相同的单词, 使用`n\\N`进行下一个 db 反向删除多个字符直至空格或者开头 dw 分多钟情况: 1. 当光标位于单词开头时, 删除整个单词, 直至遇到任意符号或者空格字符 2. 当光标处于单词非开头结尾时, 删除多个字符, 直至遇到任意符号或者空格字符 3. 当光标位于非单词末尾字母时, 反向删除一个字符 d2w 删除连续两个单词, 使用`2dw`或者`dw.`或者`c2w`能达到相同效果 cw 删除光标直到单词末尾, 并进入`插入`模式 C 删除光标直到行尾 daw `delete a word` 删除整个单词, 无论光标处于何处, 并删除单词之前的空格(如果有的话) dap 删除整个段落, 行前行后都有空格的那种才叫段落 b/B 反向定位到下一个单词开头或者单词结尾(如果单词后面非换行的符号的话) # 复制与粘贴 yyp 复制整行到下一行 yap 复制整段内容到寄存器 gp 粘贴整段内容到光标之后, 并将光标移动到所粘贴内容下方, 这一点与直接使用`p`光标位置不变所不同 yiw 复制当前单词到无名寄存器 \"0p 复制专用寄存器`0` \"ayiw 复制当前单词到名为`a`的寄存器 \"ap 粘贴寄存器名为`a`的内容 \"_dd 寄存器 \"+p 将外部剪切板内容粘贴到光标之后, 或者在插入模式下使用快捷键`\u003cC-r\u003e+` dl 删除一个字符, 等同于`x` gU 将字符全部转换为大写, 相对的, `gu`将字符转换为小写, `g~`用于翻转大小写, 可视化选择中可用, 常用组合`gUaw` gv 重选上次高亮区域 # 光标移动操作 \u003cC-e\u003e 向下翻页 \u003cC-y\u003e 向上翻页 \u003cESC-.\u003e 新增空行 0/^ 移动到实际行首/移动到非空白字符行首 $/g$移动到实际行尾/移动到屏幕行尾 w/e 正向移动到单词开头/结尾 b/ge 反向移动到当前单词或者上一个单词开头/结尾 mm/`m 标记光标当前位置以及跳转到标记位置 `` 来回跳转上次标记位置 `. 上次修改的位置 `^ 上次插入的位置 `\u003c 上次高亮选区的起始位置 `\u003e 上次高亮选取的末尾位置 % 在成对符号间进行跳转 \u003cLINE_NUMBER\u003eG 跳转到指定行 (/) 跳转到上一句/下一句开头 {/} 跳转到上一段/下一段的开头 :changes 查看修改 \u003cC-p\u003e或者\u003cC-n\u003e 触发自动补全 \u003cC-x\u003e\u003cC-k\u003e 触发字典自动补全, 前提是开启拼写检查`:set spell` \u003cC-x\u003e\u003cC-l\u003e 触发行模式自动补全, 注意: 只适用于整行补全 \u003cC-x\u003e\u003cC-p\u003e 触发单词自动补全 \u003cC-x\u003e\u003cC-f\u003e 触发文件名自动补全, linux/Mac下`/home/agou-ops/\u003cC-x\u003e\u003cC-f\u003e`, windows下`x:\\\u003cC-x\u003e\u003cC-f\u003e` \u003cC-x\u003e\u003cC-o\u003e 根据上下文进行自动补全, 多用于编程语言 \u003cC-x\u003es 在插入模式下使用自动补全功能, 作用和普通模式下的`\u003cC-x\u003e\u003cC-k\u003e`相同 插入模式下 \u003cC-h\u003e 删除, 相当于delete键 \u003cC-w\u003e 删除前一个单词 \u003cC-u\u003e 删除字符直到行首 \u003cC--o\u003e 插入-普通模式是普通模式的一个特例，它能让我们执行一次普通模式命令 \u003cC-r\u003e=`\u003c算数式子\u003e` 快速计算, 也可以用于赋值, 比如`let i=0`中定义了变量`i`值为`0`, 使用`\u003cC-r\u003e=i`即可将变量i的内容插入到当前光标处 c 示例文本: '\u003ca href=\"{url}\"\u003e{title}\u003c/a\u003e' 语句 结果 ci\" #\u003cEsc\u003e '\u003ca href=\"#\"\u003e{title}\u003c/a\u003e' citclick here\u003cEsc\u003e '\u003ca href=\"#\"\u003eclick here\u003c/a\u003e' # ci命令可以理解为修改双引号内容, cit可以理解为修改标签里面的内容 同理使用`yit`或者`dit`可以快速拷贝或者删除标签里面的内容 caw 删除整个单词 可视化模式下 o/O 快速跳转到可视化区域的首段和末端 e/b 下一个/上一个单词开头末尾 U/u 将所选区域字母转换为大写或者小写 r\u003c字符\u003e 将所选区域的内容全部替换为\u003c字符\u003e内容 \u003cS-i\u003e 列插入 $ 列选择, 选择结尾, 使用场景: 为选中区域的行尾添加指定符号 viw 快速选中当前单词 ve 快速选中当前字符到单词结尾 Ex 命令 :copy 复制当前行, 同义命令`:co`或者`:t` :reg \"0 查看寄存器内容 :3t. 将第三行内容复制到当前行 :t3 把当前行复制到第三行 :t. 复制当前行, 相当于`yyp` :'\u003c,'\u003et0 把高亮选中区域复制到文件开头 :m 移动当前行, 使用方法和`:copy`相关用法一致 :read ! \u003cshelll command\u003e 从shell命令中读取输出内容到当前光标处 :'\u003c,'\u003enormal A; 在可视化模式下批量使用普通模式命令, 即在每行末尾添加一个分号 :'\u003c,'\u003enormal i// 在可视化行选择模式下, 批量为每行开头添加注释符 :w | !echo hello 执行多条命令 @: 重复上次ex命令 q: 调出历史命令窗口 q/ 打开查找历史命令窗口 :shell 进入shell :r !ls 将shell中的内容读入到文件, 或者从将外部文件内容读入到当前文件 :2,$!sort -t',' -k2 将第二列内容按照字母顺序进行重排序 多文件编辑 :ls 查看当前缓冲区, 输入数字进入指定 :bn/bp 进入下一个/上一个缓冲区, 分别为`bnext`和`bprevious`简写 :buffer \u003cFILE_NAME\u003e 根据文件名跳转到指定缓冲区, 使用`TAB`键可以补全 :bufdo 在所有缓冲区执行Ex命令 :bdelete \u003cFILE_NAME1\u003e \u003cFILE_NAME2\u003e 删除指定缓冲区 :e! 摒弃当前缓冲区修改, 强制从文件中重新读取文件内容, 通`:edit!`, 用于`回滚操作` :qall! 摒弃所有缓冲区修改, 强制退出 :wall 保存所有缓存区修改 :sp[lit] {file} 同`\u003cC-w\u003es`, 水平切分当前窗口，并在新窗口中载入{file} :vsp[lit] {file} 同`\u003cC-w\u003ev`, 垂直切分当前窗口，并在新窗口中载入{file} \u003cC-w\u003e\u003c`上下左右`方向键或者`HJKL`键或者`w`键\u003e 切换当前窗口, `w`为循环切换 \u003cC-w\u003eH、J、K、L 左上右下移动当前窗口位置 :clo[se] 同`\u003cC-w\u003ec`, 关闭活动窗口 :on[ly] 同`\u003cC-w\u003eo`, 只保留活动窗口, 关闭其他所有窗口 # 窗口大小调整 \u003cC-w\u003e= 使所有窗口等宽、等高 \u003cC-w\u003e_ 最大化活动窗口的高度 \u003cC-w\u003e｜ 最大化活动窗口的宽度 \u003cC-w\u003e\u003e 窗口右移 \u003cC-w\u003e\u003e 窗口左移 \u003cC-w\u003eH 将当前窗口移到最左边 \u003cC-w\u003eJ 将当前窗口移到最上面 \u003cC-w\u003eK 将当前窗口移到最下面 \u003cC-w\u003eL 将当前窗口移到最右边 [N]\u003cC-w\u003e_ 把活动窗口的高度设为[N]行 [N]\u003cC-w\u003e｜ 把活动窗口的宽度设为[N]列 \u003cC-w\u003eT 把当前窗口移动到一个新的标签 # 标签 :lcd \u003cLOCAL_PATH\u003e 进入本地指定目录, 仅对当前窗口有用, 如果一个标签中有多个窗口, 想要对所有窗口生效需要使用Ex命令`:windo lcd {path}` :tabedit {filename} 创建一个新的标签页 :tabc[lose] 关闭当前标签以及标签下属的所有窗口 :tabo[nly] 关闭其他所有标签, 保留当前活动标签 # 标签切换 :tabn[ext] {N} 同`{N}gt`, 切换到编号为 {N} 的标签页 :tabn[ext] 同`gt`, 切换到下一个标签 :tabp[revious] 同`gT`, 切换到上一个标签 :tabmove \u003cNUMBER\u003e 将当前标签移动到指定位置, 开头的序号为`0` :find \u003cFILENAME\u003e 在`path`中查找文件并打开 :set path+=app/* **通配符会匹配 app/ 目录下的所有子目录 :e. 打开文件管理器，并显示当前工作目录 \u003cC-^\u003e 调出文件管理器, 发现只是打开玩玩? 使用该快捷键可以返回文件编辑 :E 打开文件管理器，并显示活动缓冲区所在的目录 \u003cC-g\u003e 显示当前文件状态 :!mkdir -p %:h 如果一个新创建的文件所属的文件夹不存在, 则可以使用该命令进行创建, 然后使用 `:w`进行保存 :w !sudo tee % \u003e /dev/null 提权保存文件 :args *.html 创建文件列表, 不带任何参数则显示列表内容`:args` :first、:last、:prev、:next 浏览文件列表 :argdo normal dd 在文件列表中同时执行普通模式的命令 宏 qa 开始宏录制, 并记录到`a`寄存器 \u003cESC\u003eq 结束宏录制 ","date":"2020-12-06","objectID":"/loveit/post/vim-tricks/:1:0","tags":["vim","tricks"],"title":"Vim Hotkeys and Cheat Sheet","uri":"/loveit/post/vim-tricks/"},{"categories":["vim","技巧","持续更新"],"content":"不常用小技巧 快速加减 \u003cC-a\u003e 和 \u003cC-x\u003e 命令分别对数字执行加和减操作 使用方法: 将光标移动到数字字符上, 按下所要加或者减的数字, 按下\u003cC-a\u003e或者\u003cC-x\u003e即可进行快速加减 需要注意的一点是, 加或者减无法使用小数点, 因为小数点有特殊用途 另, 需要注意的一点是: 如果数字是以`007`这样以`0`开头的话, vim会自动将其识别为八进制数, 加减时也会按照八进制进行运算, 要禁止该行为, 将一切数字视为十进制数字的话, 需要设置以下参数: set nrformats= ","date":"2020-12-06","objectID":"/loveit/post/vim-tricks/:2:0","tags":["vim","tricks"],"title":"Vim Hotkeys and Cheat Sheet","uri":"/loveit/post/vim-tricks/"},{"categories":["vim","技巧","持续更新"],"content":"小技巧 快速缩进指定 Ctrl+v开启任意选择, 使用上下键选中多行行首, 然后按下shift+i键进入插入模式, 连续输入四个空格之后(此时并不会缩进所有, 只会缩进第一行内容), 然后按下ESC键就可以啦. 重排字段 # 给出示例文本内容如下所示: last name,first name,email neil,drew,drew@vimcasts.org doe,john,john@example.com # 目标是: 将邮箱放置于最前方, 然后是first name, 最后是last name /\\v^([^,]*),([^,]*),([^,]*)$ :%s//\\3,\\2,\\1 ","date":"2020-12-06","objectID":"/loveit/post/vim-tricks/:3:0","tags":["vim","tricks"],"title":"Vim Hotkeys and Cheat Sheet","uri":"/loveit/post/vim-tricks/"},{"categories":["vim","技巧","持续更新"],"content":"其他hotkeys 插件中的hotkey： ctrl + p 打开文件搜索 gd 跳转定义 ctrl + o 从定义返回 m 打开nerdtree菜单 # simpleflod 快捷键 zc/zC 折叠单个/所有 zo/zO 展开单个/所有 ","date":"2020-12-06","objectID":"/loveit/post/vim-tricks/:4:0","tags":["vim","tricks"],"title":"Vim Hotkeys and Cheat Sheet","uri":"/loveit/post/vim-tricks/"},{"categories":["vim","技巧","持续更新"],"content":"附录：NERDTree 快捷键 ","date":"2020-12-06","objectID":"/loveit/post/vim-tricks/:5:0","tags":["vim","tricks"],"title":"Vim Hotkeys and Cheat Sheet","uri":"/loveit/post/vim-tricks/"},{"categories":["vim","技巧","持续更新"],"content":"参考链接 我的vim dotfile: https://github.com/AGou-ops/dotfiles Vim实用技巧(第2版): https://agou-images.oss-cn-qingdao.aliyuncs.com/pdfs/Vim%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89.pdf Vim cheatsheet: https://devhints.io/vim Vim Cheat Sheet: https://vim.rtorr.com/ ","date":"2020-12-06","objectID":"/loveit/post/vim-tricks/:6:0","tags":["vim","tricks"],"title":"Vim Hotkeys and Cheat Sheet","uri":"/loveit/post/vim-tricks/"},{"categories":["DevOps","转载"],"content":"篇幅有限，点击下方链接进行访问。 DevOps Note-01（中文， @sunrisenan 备份站点）：http://bak.agou-ops.top/ DevOps Note-02（英文， @vinayhegde1990 转载）：http://agou-ops.top/devops ","date":"2020-10-27","objectID":"/loveit/post/devops-notes/:0:0","tags":["DevOps","转载"],"title":"DevOps - Notes","uri":"/loveit/post/devops-notes/"},{"categories":["kubernetes","prometheus","database","grafana"],"content":"预先准备 minikube For Windows(资源充足, 有集群更好不过); Helm; 科学上网能力. ","date":"2020-10-08","objectID":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/:1:0","tags":["k8s","prometheus","mongodb","grafana"],"title":"在k8s上使用Prometheus监控MongoDB","uri":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/"},{"categories":["kubernetes","prometheus","database","grafana"],"content":"整体框架 随手在线画的, 不美观, qwq. ","date":"2020-10-08","objectID":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/:2:0","tags":["k8s","prometheus","mongodb","grafana"],"title":"在k8s上使用Prometheus监控MongoDB","uri":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/"},{"categories":["kubernetes","prometheus","database","grafana"],"content":"操作步骤 ","date":"2020-10-08","objectID":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/:3:0","tags":["k8s","prometheus","mongodb","grafana"],"title":"在k8s上使用Prometheus监控MongoDB","uri":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/"},{"categories":["kubernetes","prometheus","database","grafana"],"content":"启用helm-tiller(helm服务器端) 在minikube中启用helm-tiller插件, 很简单, 只需要一条命令即可: $ minikube addons enable helm-tiller # 或者在启动 minikube 的时候直接启用 helm-tiller $ minikube start --addons=[\"helm-tiller\"] \u003cOther_Options\u003e ","date":"2020-10-08","objectID":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/:3:1","tags":["k8s","prometheus","mongodb","grafana"],"title":"在k8s上使用Prometheus监控MongoDB","uri":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/"},{"categories":["kubernetes","prometheus","database","grafana"],"content":"安装Prometheus-operator 首先添加所需仓库: $ helm repo add prometheus-community https://prometheus-community.github.io/helm-charts # 更新仓库内容 $ helm repo update 安装/下载chart: $ helm install prometheus-community/kube-prometheus-stack --version 9.4.10 # 或者先下载下来更改所需内容之后再进行安装(推荐使用方法) $ helm pull prometheus-community/kube-prometheus-stack --version 9.4.10 --untar # 安装 $ helm install prometheus kube-prometheus-stack/ 安装完成之后, kubernetes会自动接管后续工作, 如拉取镜像等: # 观察部署进度 $ kubectl get po -w NAME READY STATUS RESTARTS AGE alertmanager-prometheus-kube-prometheus-alertmanager-0 2/2 Running 0 24m prometheus-grafana-79b677fd4b-t9kr9 2/2 Running 0 25m prometheus-kube-prometheus-operator-69cd74c99f-wltf4 2/2 Running 0 25m prometheus-kube-state-metrics-95d956569-mlfwv 1/1 Running 0 25m prometheus-prometheus-kube-prometheus-prometheus-0 3/3 Running 1 24m prometheus-prometheus-node-exporter-tvwf5 1/1 Running 0 25m # 查看service $ kubectl get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE alertmanager-operated ClusterIP None \u003cnone\u003e 9093/TCP,9094/TCP,9094/UDP 25m kubernetes ClusterIP 10.96.0.1 \u003cnone\u003e 443/TCP 44h prometheus-grafana ClusterIP 10.108.199.68 \u003cnone\u003e 80/TCP 26m prometheus-kube-prometheus-alertmanager ClusterIP 10.96.81.7 \u003cnone\u003e 9093/TCP 26m prometheus-kube-prometheus-operator ClusterIP 10.109.9.111 \u003cnone\u003e 8080/TCP,443/TCP 26m prometheus-kube-prometheus-prometheus ClusterIP 10.98.173.241 \u003cnone\u003e 9090/TCP 26m prometheus-kube-state-metrics ClusterIP 10.109.121.40 \u003cnone\u003e 8080/TCP 26m prometheus-operated ClusterIP None \u003cnone\u003e 9090/TCP 25m prometheus-prometheus-node-exporter ClusterIP 10.107.29.93 \u003cnone\u003e 9100/TCP 26m 以上信息无误则表明prometheus已成功部署. 使用minikube(kubectl亦可)的转发功能, 将svc/prometheus-kube-prometheus-prometheus 的端口映射到本地: $ minikube port-forward svc/prometheus-kube-prometheus-prometheus 9090 Forwarding from 127.0.0.1:9090 -\u003e 9090 Forwarding from [::1]:9090 -\u003e 9090 Handling connection for 9090 打开浏览器访问http://127.0.0.1:9090/查看prometheus UI: 使用以下命令查看prometheus的servicemonitor(其对应prometheus UI中的target): $ kubectl get servicemonitor NAME AGE prometheus-kube-prometheus-alertmanager 36m prometheus-kube-prometheus-apiserver 36m prometheus-kube-prometheus-coredns 36m prometheus-kube-prometheus-grafana 36m prometheus-kube-prometheus-kube-controller-manager 36m prometheus-kube-prometheus-kube-etcd 36m prometheus-kube-prometheus-kube-proxy 36m prometheus-kube-prometheus-kube-scheduler 36m prometheus-kube-prometheus-kube-state-metrics 36m prometheus-kube-prometheus-kubelet 36m prometheus-kube-prometheus-node-exporter 36m prometheus-kube-prometheus-operator 36m prometheus-kube-prometheus-prometheus 36m 查看所有crd: $ kubectl get crd NAME CREATED AT alertmanagers.monitoring.coreos.com 2020-10-08T01:10:04Z podmonitors.monitoring.coreos.com 2020-10-08T01:10:04Z prometheuses.monitoring.coreos.com 2020-10-08T01:10:04Z prometheusrules.monitoring.coreos.com 2020-10-08T01:10:04Z servicemonitors.monitoring.coreos.com 2020-10-08T01:10:04Z thanosrulers.monitoring.coreos.com 2020-10-08T01:10:04Z 通过describe子命令可以发现crd的matchLabels都包含release: prometheus标签. ","date":"2020-10-08","objectID":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/:3:2","tags":["k8s","prometheus","mongodb","grafana"],"title":"在k8s上使用Prometheus监控MongoDB","uri":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/"},{"categories":["kubernetes","prometheus","database","grafana"],"content":"部署MongoDB及其服务 参考MongoDB-depl-svc.yaml文件内容如下: apiVersion:apps/v1kind:Deploymentmetadata:name:mongodb-deploymentlabels:app:mongodbspec:replicas:2selector:matchLabels:app:mongodbtemplate:metadata:labels:app:mongodbspec:containers:- name:mongodbimage:mongoports:- containerPort:27017---apiVersion:v1kind:Servicemetadata:name:mongodb-servicespec:selector:app:mongodbports:- protocol:TCPport:27017targetPort:27017 按需进行修改, 修改完成之后应用配置清单: $ kubectl apply -f MongoDB-depl-svc.yaml 等待MongoDB部署完成… $ kubectl get deployment/mongodb-deployment -w NAME READY UP-TO-DATE AVAILABLE AGE mongodb-deployment 2/2 2 0 3m13s ","date":"2020-10-08","objectID":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/:3:3","tags":["k8s","prometheus","mongodb","grafana"],"title":"在k8s上使用Prometheus监控MongoDB","uri":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/"},{"categories":["kubernetes","prometheus","database","grafana"],"content":"部署MongoDB Exporter 添加helm repo: $ helm repo add prometheus-community https://prometheus-community.github.io/helm-charts $ helm repo update 下载chart: $ helm pull prometheus-community/prometheus-mongodb-exporter --untar 修改value.yaml文件内容: ...# 使用kubectl get svc获取MongoDB的服务及端口mongodb:uri:\"mongodb://mongodb-service:27017\"...# 从上面可以得知servicemonitor所匹配的标签 release: prometheusserviceMonitor:additionalLabels:release:prometheus... 应用chart: $ helm install mongodb-exporter prometheus-mongodb-exporter/ 等待svc,pod部署完成之后, 映射mongodb-exporter, 检查/metrics: $ kubectl port-forward service/mongodb-exporter-prometheus-mongodb-exporter 9216 打开浏览器访问http://localhost:9216/metrics进行查看: 此时, 再打开prometheus UI查看target可以看到mongodb-exporter已经处于UP状态: ","date":"2020-10-08","objectID":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/:3:4","tags":["k8s","prometheus","mongodb","grafana"],"title":"在k8s上使用Prometheus监控MongoDB","uri":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/"},{"categories":["kubernetes","prometheus","database","grafana"],"content":"在Grafana查看 $ kubectl port-forward deployment/prometheus-grafana 3000 打开浏览器访问http://localhost:3000: :information_source:默认账号admin, 默认密码prom-operator (从官方文档中即可获取) ","date":"2020-10-08","objectID":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/:3:5","tags":["k8s","prometheus","mongodb","grafana"],"title":"在k8s上使用Prometheus监控MongoDB","uri":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/"},{"categories":["kubernetes","prometheus","database","grafana"],"content":"附录1: chart 地址 上文中所使用的chart仓库地址: kube-prometheus-stack: https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack mongodb-exporter: https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-mongodb-exporter ","date":"2020-10-08","objectID":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/:4:0","tags":["k8s","prometheus","mongodb","grafana"],"title":"在k8s上使用Prometheus监控MongoDB","uri":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/"},{"categories":["kubernetes","prometheus","database","grafana"],"content":"附录2: kubectl get all ","date":"2020-10-08","objectID":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/:5:0","tags":["k8s","prometheus","mongodb","grafana"],"title":"在k8s上使用Prometheus监控MongoDB","uri":"/loveit/post/%E5%9C%A8k8s%E4%B8%8A%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7mongodb/"},{"categories":["hugo","shortcode"],"content":"shortcode ??? 什么是shortcode以及hugo内置shortcode参考： shortcodes-preview ","date":"2020-10-06","objectID":"/loveit/post/%E8%87%AA%E5%AE%9A%E4%B9%89shortcode/:0:0","tags":[],"title":"自定义 shortcode","uri":"/loveit/post/%E8%87%AA%E5%AE%9A%E4%B9%89shortcode/"},{"categories":["hugo","shortcode"],"content":"github shortcode 在指定目录添加以下文件： \u003c!-- 文件位置：~/layouts/shortcodes/github.html --\u003e \u003cdiv class=\"github\"\u003e \u003cdiv class=\"logo\"\u003e {{ replace $.Site.Data.SVG.repository \"icon\" \"icon github-icon\" | safeHTML }} \u003ca class=\"name\" href={{ .Get \"link\" }} target=\"_blank\"\u003e{{ .Get \"name\" }}\u003c/a\u003e \u003c/div\u003e \u003cdiv class=\"description\"\u003e{{ .Get \"description\" }}\u003c/div\u003e \u003cdiv class=\"language\"\u003e \u003cspan class=\"language-color\" style=\"background-color: {{ .Get \"color\" }}\"\u003e\u003c/span\u003e \u003cspan class=\"language-name\"\u003e{{ .Get \"language\" }}\u003c/span\u003e \u003c/div\u003e \u003c/div\u003e // 文件位置：~/assets/scss/custom/_custom.scss // github shortcode .github { border: 1px solid var(--color-contrast-low); border-color: #b3b4ac; border-style: dotted; border-radius: 12px !important; margin: 0 auto; margin-bottom: 1em; padding: 1em; background-color: #fcfdf8; .github-icon { width: 1.2em; height: 1.2em; margin-right: 0.5em; margin-bottom: 0.2em; fill: var(--color-contrast-high); transition: all .5s; } .name { font-weight: bold; color: #0366d6 !important; text-decoration: none; } .description { margin-top: 0.5em; margin-bottom: 1em; color: #586069; text-align: justify; font-size: 90%; transition: all .5s; } .language-color { position: relative; top: 1px; display: inline-block; width: 0.75em; height: 0.75em; border-radius: 50%; } .language-name { color: var(--color-contrast-high); font-size: 90%; color: #586069; margin-left: 0.5em; transition: all .5s; } } markdown代码如下（去掉注释符号/*和*/）： {{/*\u003c github name=\"kubernetes/kubernetes\" link=\"https://github.com/kubernetes/kubernetes\" description=\"Production-Grade Container Scheduling and Management\" color=\"#00ADD8\" language=\"Go\" \u003e*/}} \rkubernetes/kubernetes\r\rProduction-Grade Container Scheduling and Management \rGo\r\r\r","date":"2020-10-06","objectID":"/loveit/post/%E8%87%AA%E5%AE%9A%E4%B9%89shortcode/:1:0","tags":[],"title":"自定义 shortcode","uri":"/loveit/post/%E8%87%AA%E5%AE%9A%E4%B9%89shortcode/"},{"categories":["hugo","shortcode"],"content":"bilibili shortcode {{/*\u003c bilibili BV1YK4y1C7CU \u003e*/}} \r ","date":"2020-10-06","objectID":"/loveit/post/%E8%87%AA%E5%AE%9A%E4%B9%89shortcode/:2:0","tags":[],"title":"自定义 shortcode","uri":"/loveit/post/%E8%87%AA%E5%AE%9A%E4%B9%89shortcode/"},{"categories":["hugo","shortcode"],"content":"video shortcode {{/*\u003c video link=\"http://agou-resources.oss-cn-chengdu.aliyuncs.com/video/test.mp4\" pic=\"http://agou-images.oss-cn-qingdao.aliyuncs.com/Wallpapers/violet.png\" time=10 text=\"高能部分\" time1=20 text1=\"高能结束\" \u003e*/}} #dplayer-video-container { max-width: 800px; margin: 0 auto; margin-top: -1rem; } @media screen and (max-device-width: 400px) { #dplayer { width: 100%; } } const dp = new DPlayer({ container: document.getElementById('dplayer'), autoplay: false, theme: '#c05b4d', loop: false, lang: 'zh-cn', screenshot: false, hotkey: true, preload: 'auto', volume: 0.7, mutex: true, logo: 'https://agou-images.oss-cn-qingdao.aliyuncs.com/BaseIMG/youtube.png', subtitle: { url: '', type: 'webvtt', fontSize: '20px', bottom: '3%', color: '#0000', }, video: { type: 'auto', url: 'http:\\/\\/agou-resources.oss-cn-chengdu.aliyuncs.com\\/video\\/test.mp4', pic: 'http:\\/\\/agou-images.oss-cn-qingdao.aliyuncs.com\\/Wallpapers\\/violet.png' }, contextmenu: [ { text: '❤ 博客主页', link: 'https://agou-ops.github.io' }, { text: '播放器信息', click: (player) = { console.log(player); } } ], highlight: [ { time: '10', text: '高能部分', }, { time: '20', text: '高能结束', }, { time: '', text: '', }, { time: '', text: '', }, { time: '', text: '', }, ], }); ","date":"2020-10-06","objectID":"/loveit/post/%E8%87%AA%E5%AE%9A%E4%B9%89shortcode/:3:0","tags":[],"title":"自定义 shortcode","uri":"/loveit/post/%E8%87%AA%E5%AE%9A%E4%B9%89shortcode/"},{"categories":["Anime"],"content":"My Anime Trip.","date":"2020-09-30","objectID":"/loveit/anime/","tags":["Anime"],"title":"我的动漫之旅(My Anime Trip.)","uri":"/loveit/anime/"},{"categories":["Anime"],"content":"按照观看结束时间排序，序号仅用于计数。(2020-03-28 至 ????-??-??) 变更日志： 2020年10月01日：初始化表格、增加序号至39； 2020年11月13日：增加喜好标签，更新序号至51； 2021年01月01日：增加番剧喜好标识 :two_hearts: ，2020年完结，更新序号至79； 2021年02月18日： 增加流行的圆角设计，增加透明度，增加随机动漫背景； 更改PC端鼠标样式为among us，左下角新增黄前久美子画像； 增加泡面番标识🍜，更新序号至100； 2021年06月21日：增加统计，更新序号至125； 2021年08月17日：更换页面title为艺术字，增加emoji，更新序号至138； :warning: 注：-表示无或不祥，^表示和上个一样。:information_source: — 移动端双击屏幕查看更佳～ — ","date":"2020-09-30","objectID":"/loveit/anime/:0:0","tags":["Anime"],"title":"我的动漫之旅(My Anime Trip.)","uri":"/loveit/anime/"},{"categories":["Anime"],"content":"二〇二〇年 喜好标签（由高到低）：#日常 #萌系 #轻百合 #搞笑 #治愈 (不是致郁) #魔法  序号 时间 动漫名 最喜欢的角色 制片方 000 2020/03/28 《小林家的龙女仆》 :two_hearts: 托尔、康娜、尔科亚 京都动画 001 2020/04/02 《紫罗兰永恒花园》 :two_hearts: 薇尔莉特·伊芙加登 京都动画 002 2020/04/06 《吹响！上低音号》 :two_hearts: 黄前久美子(黄大叔)、中世古香织(小香织) 京都动画 003 2020/04/18 《轻音少女》(K-ON!) :two_hearts: 平泽唯 京都动画 004 2020/04/24 《日常》 :two_hearts: 长野原美绪(美绪酱) 京都动画 005 2020/05/02 《CLANNAD》 :two_hearts: 古河渚、冈崎汐 京都动画 006 2020/05/07 《中二病也要谈恋爱》 七宫智音、小鸟游六花 京都动画 007 2020/05/12 《境界的彼方》 栗山未来 京都动画 008 2020/05/17 《甘城光辉游乐园》 千斗五十铃 京都动画 009 2020/05/21 《龙王的工作》 雏鹤爱、夏洛特·伊佐阿尔 project No.9 010 2020/05/26 《埃罗芒阿老师》 高砂智惠(店长)、和泉纱雾 A-1 Pictures 011 2020/05/26 《珈百璃的堕落》 胡桃泽·萨塔妮娅·麦克道威尔(萨塔尼亚)、白羽·菈菲尔·恩兹沃斯(拉菲) 动画工房 012 2020/05/28 《未闻花名》 本间芽衣子(面码) A-1 Pictures 013 2020/05/31 《路人女主的养成方法》 加藤惠、霞之丘诗羽 A-1 Pictures \u0026 CloverWorks 014 2020/06/01 《这个美术社有大问题！》 宇佐美瑞希 feel. 015 2020/06/06 《LoveLive!》(μ’s) 东条希(希)、矢泽妮可(妮可) SUNRISE 016 2020/06/15 《恋爱研究所》 真木夏绪、仓桥莉子(李狗) 动画工房 017 2020/06/17 《终将成为你》 七海灯子、小糸侑 TROYCA 018 2020/06/19 《妖精森林的小不点》 :two_hearts: 御子地、白明 Lerche 019 2020/06/22 《邻家索菲》 天野灯 Studio五组×AXsiZ 020 2020/06/26 《tari tari》 冲田纱羽 P.A.WORKS 021 2020/06/26 《摇曳露营》:two_hearts: 志摩凛、各务原抚子 C-Station 022 2020/07/01 《花开伊吕波》 押水菜子 P.A.WORKS 023 2020/07/12 《樱花庄的宠物女孩》 上井草美咲、青山七海 J.C.STAFF 024 2020/07/23 《悠哉日常大王》 :two_hearts: 宫内莲华(喵帕斯)、越谷夏海 SILVER LINK. 025 2020/07/27 《怕痛的我，把防御力点满就对了》 梅普露 SILVER LINK. 026 2020/08/06 《NEW GAME!》 泷本一二三、饭岛结音(关西腔i了)、樱宁宁(宁宁鸡) 动画工房 027 2020/08/10 《Slow Start》 十仓荣依子、千石冠、一之濑花名 、 百地玉手 A-1 Pictures→CloverWorks[1] 028 2020/08/15 《Comic Girls》 萌田薰子(小混沌) Nexus 029 2020/08/19 《恋爱小行星》 木之幡米拉 动画工房 030 2020/08/22 《街角魔族》 吉田优子(夏美子) J.C.STAFF 031 2020/08/27 《属性咖啡馆》(Blend·S) 日向夏帆 A-1 Pictures 芳文社 032 2020/08/30 《未确认进行式》 三峰真白、夜之森小红(小红) 动画工房 033 2020/09/02 《天体的秩序》 古宫乃乃香、诺艾尔 Studio 3Hz 034 2020/09/08 《citrus》 蓝原柚子、蓝原芽衣 Passione 035 2020/09/15 《Anne Happy♪》 花小泉杏 SILVER LINK. 036 2020/09/24 《放学后海堤日记》 鹤木阳渚 动画工房 037 2020/09/25 《请问您今天要来点兔子吗？》 桐间纱路(纱路酱)、宇治松千夜 Koi(原作) 038 2020/09/25 《宇崎酱想要玩耍！》 宇崎花 ENGI 039 2020/09/29 《雏子的笔记》 夏川玖井菜(奇怪的爱好：喜欢吃书) Passione 040 2020/10/09 《摇曳百合》​ :two_hearts: 岁纳京子、赤座灯里 动画工房、TYO ANIMATIONS、TYO ANIMATIONS 041 2020/10/15 《三者三叶》 西川叶子 动画工房 042 2020/10/16 《若叶女孩》🍜 小桥若叶 Nexus 043 2020/10/17 《牵牛花与加濑同学》 山田结衣加濑友香 ZEXCS 044 2020/10/21 《Anima Yell!》 猿渡宇希 动画工房 045 2020/10/24 《一个人的OO小日子》 一里波知 C2C 046 2020/10/25 《公主连结Re:Dive》 佩可莉姆、凯露 CygamesPictures 047 2020/10/30 《我家女仆有够烦！》 高梨米夏 动画工房 048 2020/10/30 《前进吧，登山少女》🍜 仓上日向、雪村葵 しろ（原作） • 8-bit（动画制作） 049 2020/11/02 《春原庄的管理员小姐》 春原彩花、雪本柚子 SILVER LINK. 050 2020/11/06 《女高中生的虚度日常》 鹭宫诗织（机器人） Passione 051 2020/11/07 《笨女孩》（又名：单蠢女孩） 隅野沙耶香 diomedéa 052 2020/11/16 《Happy Sugar Life》（小心这糖有毒） 神戶鹽 Ezo’la 053 2020/11/18 《樱Trick》 高山春香 STUDIO DEEN 054 2020/11/21 《ENDRO~!》 玛欧、梅（梅瑟·恩达斯特） Studio五组 055 2020/11/22 《此花亭奇谭》 柚 Lerche 056 2020/11/24 《玛纳利亚的密友》 :two_hearts: 古瑞娅、安 CygamesPictures 057 2020/11/28 《A CHANNEL》 优子 Studio五组 058 2020/11/29 《你遭难了吗？》 - Ezo’la 059 2020/12/04 《无彩限的怪灵世界》 和泉玲奈 京都动画 060 2020/12/04 《爱杀宝贝》 折部安奈 J.C.STAFF 061 2020/12/05 《宅饮》🍜 - Production IMS 062 2020/12/08 《爱吃拉面的小泉同学》 小泉同学 Studio五组、AXsiZ 063 2020/12/09 《月影特工》 源桃、半藏门雪 Lay-duce 064 2020/12/10 《URARA迷路贴》 千矢 J.C.STAFF 065 2020/12/11 《无口的森田小姐》🍜 - 竹书房 066 2020/12/14 《面包带来和平！》🍜 - 旭Production 067 2020/12/18 《三颗星彩色冒险》 琴叶、结衣、小幸 SILVER LINK. 068 2020/12/19 《洲崎西》🍜 - feel. 069 2020/12/19 《小森同学拒绝不了！》 - Animation Studio Artland 070 2020/12/19 《魔女之旅》 :two_hearts: 沙耶、伊蕾娜 C2C 071 2020/12/20 《GJ部》 天使真央 动画工房 072 2020/12/22 《在魔王城说晚安》 栖夜莉丝 动画工房 073 2020/12/25 《犬神同学和猫山同学》🍜 - SEVEN 074 2020/12/25 《千绪的上学路》 - diomedéa 075 2020/12/25 《安达与岛村》 :two_hearts: 安达樱、岛村抱月 手冢Production 076+ 2020/12/27 《请问您今天要来点兔子吗？BLOOM》 ^ ^ 077 2020/12/27 《lovelive 虹咲学园学园偶像同好会》 上原步梦 日昇 078 2020/12/27 《成神之日》 伊座并杏子、佐藤雏 P.A.WORKS 079 2020/12/28 《满溢的水果挞》 樱衣乃、前原仁菜 feel. ","date":"2020-09-30","objectID":"/loveit/anime/:1:0","tags":["Anime"],"title":"我的动漫之旅(My Anime Trip.)","uri":"/loveit/anime/"},{"categories":["Anime"],"content":"年度最喜欢的声优(及所配音角色) 石川由依：薇尔莉特·伊芙加登、高砂智惠、伊座并杏子； 黑泽朋世：黄前久美子，沙耶； 子安武人：克劳迪亚·霍金斯； ","date":"2020-09-30","objectID":"/loveit/anime/:1:1","tags":["Anime"],"title":"我的动漫之旅(My Anime Trip.)","uri":"/loveit/anime/"},{"categories":["Anime"],"content":"年度最喜欢的OP/ED/OST/IN だんご大家族（团子大家族）【CLANNAD ED】； 明日でいいから（明天也没关系）【Anne Happy ED】； ne！ne！ne！（呐！呐！呐！）【slow start OP】； ","date":"2020-09-30","objectID":"/loveit/anime/:1:2","tags":["Anime"],"title":"我的动漫之旅(My Anime Trip.)","uri":"/loveit/anime/"},{"categories":["Anime"],"content":"二〇二一年 序号 时间 动漫名 最喜欢的角色 制片方 080 2021/01/02 《草莓棉花糖》 伊藤千佳 童梦 081 2021/01/04 《斯特拉的魔法》 本田珠輝 SILVER LINK. 082 2021/01/06 《电器街的漫画店》 小日（ひおたん）、相机子（カメ子（カメこ）） SHIN-EI动画 083 2021/01/07 《Candy Boy》 樱井奏、樱井雪乃 AIC Digital 084 2021/01/08 《魔物娘的医生》 - ARVO ANIMATION 085 2021/01/12 《轻声密语》 风间汐、村雨纯夏 AIC 086 2021/01/13 《雏逻辑》 莉昂妮丝·叶利斯特拉托娃、京桥万博 动画工房 087 2021/01/16 《少女终末旅行》​:two_hearts: 千户、尤莉 WHITE FOX 088 2021/01/20 《黄金拼图》 小路绫（ayaya）、乌丸樱 Studio五组、AXsiZ（制作协力） 089 2021/01/22 《踏切时间》🍜 - EKACHI EPILKA 090 2021/01/27 《浦和小调》🍜 - - 091 2021/01/28 《邪神与厨二病少女》 邪神酱（夹心酱）、花园百合铃 NOMAD 092 2021/02/01 《SHOW BY ROCK!!》 希安、莫亚 BONES 093 2021/02/03 《22/7》 泷川美羽、藤间樱 A-1 Pictures 094 2021/02/06 《SHOW BY ROCK!! Mashumairesh!!》 狐丸、真岛姬子 BONES 095 2021/02/08 《紧扣的星星》 - PRIMASTEA 096 2021/02/11 《游戏3人娘》 野村香纯 Lerche 097 2021/02/14 《猫神八百万》 古宫柚子 AIC PLUS+ 098 2021/02/17 《房东青春期！》 - Seven Arcs Pictures 099 2021/02/17 《飞翔的魔女》 木幡真琴、仓本千夏 J.C.STAFF 100 2021/02/18 幸运☆星 柊司、泉此方 京都动画 101 2021/02/20 《+TIC模型姐妹》🍜 - TYO Animations Inc.、BARNUM STUDIO 102 2021/02/21 《Lapis Re:LiGHTs》 缇亚拉、嘉奈特 横滨动画研究所 103 2021/03/06 《南家三姐妹》（共四季） ALL 童梦(1)、asread(2-3)、feel.(4) 104 2021/03/11 《悠悠式》 - KINEMA CITRUS 105+ 2021/04/05 《摇曳露营△第二季》 ^ ^ 106+ 2021/04/05 《悠哉日常大王 第三季》 ^ ^ 107 2021/04/05 《里世界郊游》 紙越空魚、仁科鳥子 LIDENFILMS×FelixFilm 108 2021/04/12 《剧偶像》 各务爱理 Hoods Entertainment 109 2021/04/19 《立花馆恋爱三角铃》🍜 - Creators in pack/STUDIO LINGS 110 2021/04/25 《幸运星》 柊镜、泉此方、柊司 京都动画 111 2021/05/06 《生存游戏社》 - Studio Pierrot+ 112 2021/05/06 《网球并不可笑嘛》🍜（共九季） 看了九季名字一个没记住:joy: MAPPA（第1~3季），millepensee（第4~9季） 113 2021/05/13 《碧蓝航线》 标枪、拉菲、企业 Bibury Animation Studios 114 2021/05/14 《碧蓝航线 微速前进》 ^ ^ 115 2021/05/15 《GO!GO!575》🍜 - Lay-duce、C2C 116 2021/05/21 《男子高中生的日常》 小苹果 日升动画 117 2021/05/25 《女子高中生》🍜 - - 118 2021/05/26 《漫研部》🍜 - Seven 119 2021/06/04 《伪姬物语》🍜 旭Production 120 2021/06/06 《我，不是说了能力要平均值么！》 阿黛尔·冯·阿斯卡姆/麦露 project No.9 121 2021/06/07 《雨色可可side G》🍜 - EMT Squared 122 2021/06/15 《未来日记》 我妻由乃 Asread 123 2021/06/20 《极乐院女子高寮物语》 - CAMMOT 124 2021/06/21 《ReBIRTH》🍜 - - 125 2021/06/21 《工作细胞》 红血球(AE3803) david production 126 2021/06/21 《终末的女武神》 - Graphinica 127 2021/06/23 《女子落语》 芜罗亭魔梨威 J.C.STAFF 128 2021/06/25 《归宅部活动记录》 道明寺樱 NOMAD 129 2021/06/26 《本田小狼与我》 小熊 STUDIO KAI 130 2021/06/26 《打了300年的史莱姆，不知不觉就练到了满级》:two_hearts: 相泽梓、莱卡、芙拉德露忒 REVOROOT 131 2021/07/02 《普通女高中生要做当地偶像》 - feel. 132 2021/07/07 《任性HighSpec》🍜 - AXsiZ 133 2021/07/18 《贫穷姐妹物语》 ALL 东映动画 134 2021/07/18 《烧窑的话也要马克杯》 - 日本动画公司 135 2021/07/31 《向阳素描》（全季+SP） - SHAFT、【Aniplex、芳文社、Movic】（协助） 136 2021/08/01 《天宝伏妖录（第二季） - 玄机 137 2021/08/04 《前说》 - Studio五组、AXsiZ 138 2021/08/09 《夏色奇迹》 - 日升动画 ","date":"2020-09-30","objectID":"/loveit/anime/:2:0","tags":["Anime"],"title":"我的动漫之旅(My Anime Trip.)","uri":"/loveit/anime/"},{"categories":["Anime"],"content":"年度最喜欢的声优(及所配音角色) 水濑祈：千户、香风智乃； ","date":"2020-09-30","objectID":"/loveit/anime/:2:1","tags":["Anime"],"title":"我的动漫之旅(My Anime Trip.)","uri":"/loveit/anime/"},{"categories":["Anime"],"content":"年度最喜欢的OP/ED/OST/IN More One Night【少女终末旅行ED】； 雨だれの歌【少女终末旅行 IN】； 流星ドリームラインバラード【SHOW BY ROCK!! IN】； 愛のシュプリーム！【小林家的龙女仆S OP】； ","date":"2020-09-30","objectID":"/loveit/anime/:2:2","tags":["Anime"],"title":"我的动漫之旅(My Anime Trip.)","uri":"/loveit/anime/"},{"categories":["Anime"],"content":"– 统计 – 截止2021年08月17日09:42:22，番剧总数为【138+】，其中： 泡面番🍜：【20】 续集番：【4】 ","date":"2020-09-30","objectID":"/loveit/anime/:3:0","tags":["Anime"],"title":"我的动漫之旅(My Anime Trip.)","uri":"/loveit/anime/"},{"categories":["生活","日记"],"content":"购置背景 　长达两个多月的菏泽实习结束了，感觉如释重负，终于摆脱了实习带来的困扰和限制，心情也不由地变好了起来。在返校的火车上，闲着没事刷了刷闲鱼，看了看自己这段时间以来卖出的虚拟商品（代搭建博客/代下载GitHub资源等），大概赚了1k块钱左右吧，呃…还是蛮不错的。 　然后不经意之间就看到我上上学期买到的蜗牛星际B款双千（矿难无情人有情），想起来机子还在宿舍桌子上，大半年没动过了，估计已经吃灰了。正当我犹豫是挂闲鱼转手再卖出去时（能小赚一笔），我看到了二手的笔记本拆机屏幕，萌发起重振蜗牛星际的想法，又想了想实习也赚了点小钱，搞！。询问了一圈之后，最终买下了这款型号为友达(AUO)-B101EW05 V1(AUO51D4)的拆机屏，大小是10.1寸，最高分辨率为1280*800，参数如下图所示： 有人会问为啥非要买一个二手拆机屏呢？（其实根本没人问，这一切都是博主自己幻想出来的） 理由如下： 手上没有现成的显示屏，之前全是借隔壁宿舍的显示屏来用的; 笔记本显示屏驱动部件嵌在主板上，无法直接使用; 可以作为笔记本拓展屏，一箭双雕; 最后一点也是最最重要的一点，穷穷穷，没钱买拓展屏，只能自己买破烂凑一个。 ","date":"2020-09-14","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/:1:0","tags":["日记","闲鱼","垃圾佬"],"title":"【日记】闲鱼垃圾佬的一天","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/"},{"categories":["生活","日记"],"content":"其他硬件设备购置 ","date":"2020-09-14","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/:2:0","tags":["日记","闲鱼","垃圾佬"],"title":"【日记】闲鱼垃圾佬的一天","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/"},{"categories":["生活","日记"],"content":"驱动板 　光有显示屏还不行，还需要驱动板才能正常使用，不得不说闲鱼和淘宝是万能的，什么东西都能够买到，在苦苦寻找和对比了一番之后，最终找到了一个淘宝卖家（店铺链接：https：//m.tb.cn/h.VBYebL1?sm=6c9ebe ），销量和口碑都还不错，把显示屏型号发给卖家后，卖家制作完当天晚上就发货了，真是迅速啊，点个赞:+1:。 ","date":"2020-09-14","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/:2:1","tags":["日记","闲鱼","垃圾佬"],"title":"【日记】闲鱼垃圾佬的一天","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/"},{"categories":["生活","日记"],"content":"mSATA 　蜗牛星际原装自带的mSATA是16g的，只够装个pve、VMware ESXi、iKuai、openwrt、群晖啥的，根本不够用的，然后嘞，自己又想安装个Windows Server 2008 R2挂一些软件，所以就下狠心来又买了一条128g的渣士顿mSATA固态硬盘，也是闲鱼买的，大概100软妹币，MLC颗粒的，还是蛮值的。 CrystalDiskMark跑分如下图所示： 　这样一来，拆蜗牛星际多出来的那块mSATA 16g岂不是吃灰了？不，垃圾佬不会就此止步，不会。 所以就有了下面这个设备:laughing:。 ","date":"2020-09-14","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/:2:2","tags":["日记","闲鱼","垃圾佬"],"title":"【日记】闲鱼垃圾佬的一天","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/"},{"categories":["生活","日记"],"content":"USB3.0 TO mSATA Box 　这小东西功能很简单，就是把mSATA接口转为USB接口，以便直接插在电脑上直接使用。实体图如下所示： 还是蛮好看的，不错，不错。 ","date":"2020-09-14","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/:2:3","tags":["日记","闲鱼","垃圾佬"],"title":"【日记】闲鱼垃圾佬的一天","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/"},{"categories":["生活","日记"],"content":"HDMI 线 \u0026 亚克力壳 　主要设备买完之后，突然发现还缺一条HDMI线，回宿舍找了找没找到原来那根，于是10块钱在闲鱼又买了条绿联0.75m的HDMI线，黄色扁线型的。 亚克力壳子是买驱动板时加价10块买的，用来保护驱动板各元件和增加观赏性用的。 ","date":"2020-09-14","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/:2:4","tags":["日记","闲鱼","垃圾佬"],"title":"【日记】闲鱼垃圾佬的一天","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/"},{"categories":["生活","日记"],"content":"成果展示-附全家福 桌面图： ","date":"2020-09-14","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/:3:0","tags":["日记","闲鱼","垃圾佬"],"title":"【日记】闲鱼垃圾佬的一天","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/"},{"categories":["生活","日记"],"content":"未来用途 　以后有空的话会专门写一篇文章来介绍蜗牛星际的用途，敬请期待吧！ ","date":"2020-09-14","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/:4:0","tags":["日记","闲鱼","垃圾佬"],"title":"【日记】闲鱼垃圾佬的一天","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/"},{"categories":["生活","日记"],"content":"参考资料 【装机日常】废旧笔记本不要扔，拆下屏幕，裹上驱动板，做成副屏，隔壁小孩都馋哭啦！： https：//www.youtube.com/watch?v=V1wC3KKF2TM ","date":"2020-09-14","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/:5:0","tags":["日记","闲鱼","垃圾佬"],"title":"【日记】闲鱼垃圾佬的一天","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%97%B2%E9%B1%BC%E5%9E%83%E5%9C%BE%E4%BD%AC%E7%9A%84%E4%B8%80%E5%A4%A9/"},{"categories":["CentOS"],"content":" 搭建内网yum源，摆脱软件包困扰。 ","date":"2020-08-04","objectID":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/:0:0","tags":["yum"],"title":"搭建内网yum源(nginx、ftp)","uri":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/"},{"categories":["CentOS"],"content":"选择合适稳定的公网yum仓库 建议选择对运营商网络友好的yum仓库 国内可供选择的有: 阿里云：http://mirrors.aliyun.com/ (这里我使用阿里云) 网易：http://mirrors.163.com/ 更多国内镜像仓库参考：https://blog.csdn.net/wyqwilliam/article/details/90581159 ","date":"2020-08-04","objectID":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/:1:0","tags":["yum"],"title":"搭建内网yum源(nginx、ftp)","uri":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/"},{"categories":["CentOS"],"content":"安装nginx并修改配置文件 为了方便起见，我这里使用yum仓库进行安装. [root@centos-7 ~]# yum install nginx -y [root@centos-7 ~]# vi /etc/nginx/conf.d/default.conf # -----在server段添加以下内容 # 自动在index.html的索引打开 autoindex on; # 如果有文件则显示文件大小 autoindex_exact_size on; # 显示更改时间，以当前系统时间为准 autoindex_localtime on 具体位置在下面这个位置 启动nginx，使用service nignx start 即可 ","date":"2020-08-04","objectID":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/:2:0","tags":["yum"],"title":"搭建内网yum源(nginx、ftp)","uri":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/"},{"categories":["CentOS"],"content":"创建自定义index.html文件 修改默认index.html为以下内容： \u003cp style=\"font-weight:bolder;color:green;font-size:30px;\"\u003eALL of the packages in the below:\u003c/p\u003e \u003cbr/\u003e \u003ca href=\"http://192.168.1.128/CentOS-YUM/Aliyun\"\u003eAliyun\u003c/a\u003e\u003cbr/\u003e These packagers from of CentOS ISO.\u003cbr/\u003e \u003ca href=\"http://192.168.1.128/CentOS7-aliyun\"\u003eCentOS\u003c/a\u003e\u003cbr/\u003e These packagers from of \"Internet service provider\".\u003cbr/\u003e \u003cp style=\"font-weight:bolder;color:red;font-size:18px;\"\u003ePlease replace the file and fill in the following content:\u003c/p\u003e \u003cp style=\"font-weight:bolder;color:blue;font-size:15px;\"\u003eWay: /etc/yum.repos.d/CentOS-Base.repo\u003c/p\u003e 在站点目录中创建CentOS-YUM/Aliyun（本地ISO文件仓库）和CentOS7-aliyun目录 ","date":"2020-08-04","objectID":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/:3:0","tags":["yum"],"title":"搭建内网yum源(nginx、ftp)","uri":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/"},{"categories":["CentOS"],"content":"添加并同步阿里云yum源 添加阿里云CentOS7 yum源 # 注意备份原仓库源 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 同步阿里云CentOS7 yum源到之前创建好的目录当中，使用命令reposync -p /usr/share/nginx/html/CentOS7-aliyun 接着，使用createrepo -p /usr/share/nginx/html/CentOS7-aliyun来创建repodata文件 ","date":"2020-08-04","objectID":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/:4:0","tags":["yum"],"title":"搭建内网yum源(nginx、ftp)","uri":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/"},{"categories":["CentOS"],"content":"客户端配置 使用以下命令为客户端添加内网仓库地址 yum-config-manager --add-repo=\"http://192.168.1.128/CentOS7-aliyun/base/Packages\" yum makecache # 更新缓存 ","date":"2020-08-04","objectID":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/:5:0","tags":["yum"],"title":"搭建内网yum源(nginx、ftp)","uri":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/"},{"categories":["CentOS"],"content":"在yum仓库服务器端创建定时任务 新建shell更新脚本update-aliyun.sh，内容如下： #!/bin/bash /usr/bin/reposync -np /usr/share/nginx/html/CentOS7-aliyun 使用chmod +x update-aliyun.sh为其添加执行权限 添加定时任务(每5min执行一次) 5 * * * * root run-parts /root/update-aliyun.sh 其中run-parts的意思是执行后面目录中的脚本。 ","date":"2020-08-04","objectID":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/:6:0","tags":["yum"],"title":"搭建内网yum源(nginx、ftp)","uri":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/"},{"categories":["CentOS"],"content":"使用ftp搭建yum本地和远程仓库 以下仅记录关键命令： $ yum install vsftpd $ systemctl start vsftpd \u0026\u0026 systemctl enable vsftpd # 开启yum缓存功能 $ vim /etc/yum.conf [main] cachedir=/var/cache/yum/$basearch/$releasever keepcache=1 # 清除缓存 $ yum clean all # 设置基础光盘base源 $ mkdir /var/ftp/centos7-base $ mount /dev/cdrom /mnt $ cp -arp /mnt/Packages/*.rpm /var/ftp/centos7-base # 提供第三方镜像源 $ cd /var/ftp # 同步中科大的nginx源到以上目录 $ rsync -avzP rsync://rsync.mirrors.ustc.edu.cn/repo/nginx ./ # 安装createrepo工具并创建repodata仓库 $ yum install -y createrepo # 生成repodata $ createrepo ./ 需要注意的一点是：如果仓库中新增软件，需要重新生成repodata，也可以通过触发脚本实现。 客户端添加远程yum仓库： $ yum-config-manager --add-repo=\"ftp://YOUR_SERVER_IP/centos7-base\" $ yum-config-manager --add-repo=\"ftp://YOUR_SERVER_IP/nginx\" # 当然你也可以手动创建配置文件指定远程仓库 $ vim /etc/yum.repos.d/centos7-base.repo [centos7-base] name=centos 7 base baseurl=ftp://YOUR_SERVER_IP/centos7-base enabled=1 gpgcheck=0 ","date":"2020-08-04","objectID":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/:7:0","tags":["yum"],"title":"搭建内网yum源(nginx、ftp)","uri":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/"},{"categories":["CentOS"],"content":"附录：rpm和yum常用命令 rpm常用命令： rpm -q # 查看指定软件包是否安装 rpm -qa # 查看系统中已安装的所有RPM软件包列表 rpm -qi # 查看指定软件的详细信息 rpm -ql # 查询指定软件包所安装的目录、文件列表 rpm -qc # 查询指定软件包的配置文件 rpm -qd # 查询指定软件包的帮助文档 rpm -qf # 查询文件或目录属于哪个RPM软件 rpm -q --scripts # 查询rpm包安装前和安装后执行的脚本 # 查询未安装的软件包信息 rpm -qip # 查询未安装的rpm包详细信息 rpm -qlp # 查询未安装的软件包会产生哪些文件 # rpm 软件包升级 rpm -Uvh # 如果老版本不存在，则全新安装 rpm -fvh # 老版本必须存在 # 卸载软件包 rpm -e yum常用命令： # 在线查询软件包 yum provides zip yum provides */ifconfig yum check-update # 检查更新 yum clean package # 只清除软件包缓存 # yum历史命令 # 查看历史执行yum命令 yum history # 查询历史执行yum命令ID详细信息 yum history info N # 撤销历史执行过的yum命令 yum history undo N ","date":"2020-08-04","objectID":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/:8:0","tags":["yum"],"title":"搭建内网yum源(nginx、ftp)","uri":"/loveit/post/%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/"},{"categories":["Git"],"content":"Git 钩子和其它版本控制系统一样，Git 能在特定的重要动作发生时触发自定义脚本。 有两组这样的钩子：客户端的和服务器端的。 客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。 你可以随心所欲地运用这些钩子。 ","date":"2020-08-04","objectID":"/loveit/post/git-hook%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["Git","hook"],"title":"Git Hook介绍与使用","uri":"/loveit/post/git-hook%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Git"],"content":"安装钩子 钩子都被存储在 Git 目录下的 hooks 子目录中。 也即绝大部分项目中的 .git/hooks 。 当你用 git init 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。 这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。 所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用 —— 你可以用 Ruby 或 Python，或任何你熟悉的语言编写它们。 这些示例的名字都是以 .sample 结尾，如果你想启用它们，得先移除这个后缀。 把一个正确命名（不带扩展名）且可执行的文件放入 .git 目录下的 hooks 子目录中，即可激活该钩子脚本。 这样一来，它就能被 Git 调用。 创建一个空的仓库： git --bare init # 推荐使用 # git init 其中--bare参数表示创建一个裸仓库，裸仓库何意？与普通空仓库有有什么区别？参考：https://www.cnblogs.com/irockcode/p/8761954.html 但是需要注意的一点的是git仓库和git裸仓库的钩子所在位置不同: git普通仓库钩子在.git/hooks/中 git裸仓库钩子在hooks/中 裸仓库初始化完成后，在hooks文件夹中会发现一些以.sample结尾的实例文件： ","date":"2020-08-04","objectID":"/loveit/post/git-hook%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/:1:0","tags":["Git","hook"],"title":"Git Hook介绍与使用","uri":"/loveit/post/git-hook%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Git"],"content":"客户端钩子简单示例 使用commit-msg钩子实现commit信息字符数限制（实际可能没什么卵用,仅作为学习参考） 编辑.git/hooks/commit-msg文件如下： ➜ git-hook-test git:(master) ✗ cat .git/hooks/commit-msg 20:55:37 #!/bin/sh MSG=`awk '{printf(\"%s\",$0)}' $1` if [ ${#MSG} -lt 5 ] then echo \"-------------------------------------------------------------------\" echo \"commit message 只有${#MSG}字符，不符合要求\" echo \"message的长度不能小于5, 本次提交失败，请完善commit message，再提交\" echo \"-------------------------------------------------------------------\" exit 1 fi 为commit-msg文件添加执行权限： chmod u+x .git/hooks/commit-msg 生成一次提交信息： ➜ git-hook-test git:(master) ✗ git add . 21:00:48 ➜ git-hook-test git:(master) ✗ git commit -m \"test\" ------------------------------------------------------------------- commit message 只有4字符 message的长度不能小于5, 本次提交失败，请完善commit message，再提交 ------------------------------------------------------------------- 不满足最低5字符要求，提交失败。 ","date":"2020-08-04","objectID":"/loveit/post/git-hook%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/:2:0","tags":["Git","hook"],"title":"Git Hook介绍与使用","uri":"/loveit/post/git-hook%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Git"],"content":"服务端钩子简单示例 使用post-receive将代码自动部署到服务器 流程大致如下：在服务器端创建一个 Git 仓库(repository)，然后将本地的文件使用git push上传到这个仓库后，将上传到Git 仓库的文件，自动复制到服务器里网站目录文件夹下。 在服务器端初始化一个空的Git仓库 git init --bare myblog.git 在hooks目录中创建post-receive文件，并给予执行权限 cd hooks/ touch post-receive;chmod u+x post-receive 编辑post-receive文件内容如下： [root@localhost hooks]# cat post-receive #!/bin/bash -l GIT_REPO=/root/myblog.git TMP_GIT_CLONE=/tmp/myblog PUBLIC_WWW=/var/www/html rm -rf ${TMP_GIT_CLONE} git clone $GIT_REPO $TMP_GIT_CLONE cd $TMP_GIT_CLONE rm -rf ${PUBLIC_WWW}/* cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} 本地添加远程Git仓库并进行测试 ➜ test git:(master) ✗ git remote add deploy ssh://root@172.16.224.128:/root/myblog.git 21:20:35 ➜ test git:(master) ✗ git add . 21:20:52 ➜ test git:(master) ✗ git commit -m \"auto deploy test\" 21:21:01 [master (root-commit) 26fde86] auto deploy test 2 files changed, 1 insertion(+) create mode 100644 index.html create mode 100644 testfile ➜ test git:(master) git push --set-upstream deploy master 21:28:19 在git服务器端查看post-receive是否成功运行 [root@localhost ~]# cd /var/www/html/ [root@localhost html]# ls index.html testfile [root@localhost html]# cat index.html auto deploy auto deploy 将代码推送指定分支： #!/bin/bash -l while read oldrev newrev ref do branch=`echo $ref | cut -d/ -f3` if [ \"master\" == \"$branch\" ] || [ \"production\" == \"$branch\" ]; then GIT_REPO=/root/myblog.git TMP_GIT_CLONE=/tmp/myblog PUBLIC_WWW=/var/www/html rm -rf ${TMP_GIT_CLONE} git clone $GIT_REPO $TMP_GIT_CLONE cd $TMP_GIT_CLONE unset GIT_DIR git checkout $branch rm -rf ${PUBLIC_WWW}/* cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} fi done 更多钩子参考：https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90 ","date":"2020-08-04","objectID":"/loveit/post/git-hook%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/:3:0","tags":["Git","hook"],"title":"Git Hook介绍与使用","uri":"/loveit/post/git-hook%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Git"],"content":"参考链接 git钩子-图灵社区 git hooks with python commit-msg实用示例 ","date":"2020-08-04","objectID":"/loveit/post/git-hook%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/:4:0","tags":["Git","hook"],"title":"Git Hook介绍与使用","uri":"/loveit/post/git-hook%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["博客"],"content":"gulp 将开发流程中让人痛苦或耗时的任务自动化，从而减少你所浪费的时间、创造更大价值。 官方站点：https://www.gulpjs.com.cn/ ","date":"2020-08-04","objectID":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/:0:0","tags":["hexo","gulp"],"title":"Hexo博客使用gulp压缩静态资源 1","uri":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/"},{"categories":["博客"],"content":"1、全局安装gulp npm install gulp -g # 查看版本 gulp -v ","date":"2020-08-04","objectID":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/:0:1","tags":["hexo","gulp"],"title":"Hexo博客使用gulp压缩静态资源 1","uri":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/"},{"categories":["博客"],"content":"2、安装gulp插件 在站点根目录下安装 npm install gulp --save npm install gulp-minify-css --save npm install gulp-uglify --save npm install gulp-htmlmin --save npm install gulp-htmlclean --save npm install gulp-imagemin --save # 解决【Gulp打包问题】 GulpUglifyError: unable to minify JavaScript # 解决 gulp-uglify 压缩JavaScript 不兼容 es5 语法的问题 npm install babel-core@6.26.3 --save npm install gulp-babel@7.0.1 --save npm install babel-preset-es2015@6.24.1 --save # gulp-babel 取消严格模式方法(\"use strict\") npm install babel-plugin-transform-remove-strict-mode --save 问题：如果安装gulp-imagemin错误请执行以下语句 sudo npm i gulp-imagemin --unsafe-perms ","date":"2020-08-04","objectID":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/:0:2","tags":["hexo","gulp"],"title":"Hexo博客使用gulp压缩静态资源 1","uri":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/"},{"categories":["博客"],"content":"3、创建gulpfile.js文件 在 Hexo 站点下新建gulpfile.js文件，文件内容如下： var gulp = require('gulp'); var minifycss = require('gulp-minify-css'); var uglify = require('gulp-uglify'); var htmlmin = require('gulp-htmlmin'); var htmlclean = require('gulp-htmlclean'); var imagemin = require('gulp-imagemin'); var babel = require('gulp-babel'); // 压缩css文件 gulp.task('minify-css', function (done) { return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public')); done(); }); // 压缩html文件 gulp.task('minify-html', function (done) { return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin({ removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, })) .pipe(gulp.dest('./public')); done(); }); // 压缩js文件 gulp.task('minify-js', function (done) { return gulp.src(['./public/**/*.js', '!./public/**/*.min.js']) .pipe(babel({ //将ES6代码转译为可执行的JS代码 presets: ['es2015'] // es5检查机制 })) .pipe(uglify()) .pipe(gulp.dest('./public')); done(); }); // 压缩 public/images 目录内图片(Version\u003c3) // gulp.task('minify-images', function () { // gulp.src('./public/images/**/*.*') // .pipe(imagemin({ // optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） // progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 // interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 // multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化 // })) // .pipe(gulp.dest('./public/images')); // }); // 压缩 public/images 目录内图片(Version\u003e3) gulp.task('minify-images', function (done) { gulp.src('./public/images/**/*.*') .pipe(imagemin([ imagemin.gifsicle({interlaced: true}), imagemin.jpegtran({progressive: true}), imagemin.optipng({optimizationLevel: 5}), imagemin.svgo({ plugins: [ {removeViewBox: true}, {cleanupIDs: false} ] }) ])) .pipe(gulp.dest('./public/images')); done(); }); //4.0以前的写法 //gulp.task('default', [ // 'minify-html', 'minify-css', 'minify-js', 'minify-images' //]); //4.0以后的写法 // 执行 gulp 命令时执行的任务 gulp.task('default', gulp.series(gulp.parallel('minify-html', 'minify-css', 'minify-js', 'minify-images')), function () { console.log(\"----------gulp Finished----------\"); // Do something after a, b, and c are finished. }); ","date":"2020-08-04","objectID":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/:0:3","tags":["hexo","gulp"],"title":"Hexo博客使用gulp压缩静态资源 1","uri":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/"},{"categories":["博客"],"content":"4、创建.babelrc文件 在 Hexo 站点下新建.babelrc文件，文件内容如下： { 'presets': ['es2015'], \"plugins\": [\"transform-remove-strict-mode\"] } ","date":"2020-08-04","objectID":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/:0:4","tags":["hexo","gulp"],"title":"Hexo博客使用gulp压缩静态资源 1","uri":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/"},{"categories":["博客"],"content":"5、启用静态资源压缩 推荐姿势： hexo cl \u0026\u0026 hexo g \u0026\u0026 gulp \u0026\u0026 hexo d 可在package.json 中的 \"scripts\" 项增加一个 \"publish\" 命令： { //... \"scripts\": { //... \"publish\": \"hexo cl \u0026\u0026 hexo g \u0026\u0026 gulp \u0026\u0026 hexo d\", //... } //... } ","date":"2020-08-04","objectID":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/:0:5","tags":["hexo","gulp"],"title":"Hexo博客使用gulp压缩静态资源 1","uri":"/loveit/post/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90-1/"},{"categories":["GitHub"],"content":"阿里云对象存储服务（Object Storage Service，简称OSS）为您提供基于网络的数据存取服务。使用OSS，您可以通过网络随时存储和调用包括文本、图片、音频和视频等在内的各种非结构化数据文件。 官方帮助文档：https://help.aliyun.com/document_detail/31883.html 首先打开所要使用Github Actions的仓库，点击Actions，并创建一个新的workflow 此时，github将会自动在仓库中创建一个名为.github/workflows的文件夹。 编辑配置文件oss.yml,输入以下内容 name:MainWorkflowon:[push]jobs:build:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v1- uses:actions/setup-node@v1with:node-version:\"12.x\"- name:Build Blogrun:| npm install npm install -g hexo-cli hexo generate - uses: manyuanrong/setup-ossutil@v1.0 with: # endpoint 可以去oss控制台上查看 endpoint: \"oss-cn-hangzhou.aliyuncs.com\" # 使用我们之前配置在secrets里面的accesskeys来配置ossutil access-key-id: ${{ secrets.ACCESS_KEY_ID }} access-key-secret: ${{ secrets.ACCESS_KEY_SECRET }} - name: Deply To OSS run: ossutil cp public oss://agou-ops/ -rf 其中，secrets.ACCESS_KEY_ID和secrets.ACCESS_KEY_SECRET属于github的专用秘钥，比较隐私的变量可以放置在此处，具体位置在Settings\u003eSecrets 3. 提交commit，github会自动进行部署，点击Actions可以查看部署的详细状态 ","date":"2020-08-04","objectID":"/loveit/post/%E4%BD%BF%E7%94%A8github-actions%E5%B0%86%E6%96%87%E4%BB%B6push%E5%88%B0oss/:0:0","tags":["GitHub Action","OSS"],"title":"使用GitHub Actions将文件push到OSS","uri":"/loveit/post/%E4%BD%BF%E7%94%A8github-actions%E5%B0%86%E6%96%87%E4%BB%B6push%E5%88%B0oss/"},{"categories":["GitHub"],"content":"参考链接 Github Actions入门教程,阮一峰 GitHub Pages 官方文档 Github Actions for web apps, Luke Boyle My First Week With GitHub Actions, Adam Zolyak ","date":"2020-08-04","objectID":"/loveit/post/%E4%BD%BF%E7%94%A8github-actions%E5%B0%86%E6%96%87%E4%BB%B6push%E5%88%B0oss/:1:0","tags":["GitHub Action","OSS"],"title":"使用GitHub Actions将文件push到OSS","uri":"/loveit/post/%E4%BD%BF%E7%94%A8github-actions%E5%B0%86%E6%96%87%E4%BB%B6push%E5%88%B0oss/"},{"categories":["Linux","shell"],"content":"为你的shell脚本编写帮助信息文档","date":"2020-07-14","objectID":"/loveit/post/%E7%BC%96%E5%86%99shell%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/","tags":["Linux","shell","脚本","帮助文档","技巧"],"title":"编写shell帮助信息通用小技巧","uri":"/loveit/post/%E7%BC%96%E5%86%99shell%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"},{"categories":["Linux","shell"],"content":"废话少说， 直接上脚本： #!/bin/bash ### ### Some shell version or description here. ### ### Usage: ### test \u003cinput\u003e \u003coutput\u003e ### ### Options: ### \u003cinput\u003e Input file to read. ### \u003coutput\u003e Output file to write. Use '-' for stdout. ### -h | --help Show this message. help() { sed -rn 's/^### ?//;T;p' \"$0\" } # 如果用户输入“-h”或者无参数，执行help函数 if [[ $# == 0 ]] || [[ \"$1\" == \"-h\" ]] || [[ \"$1\" == \"--help\" ]]; then help exit 1 fi 效果： ╭─agou-ops@ideapad-15ISK ~/tmp ╰─$ bash test.sh --help Some shell version or description here. Usage: test \u003cinput\u003e \u003coutput\u003e Options: \u003cinput\u003e Input file to read. \u003coutput\u003e Output file to write. Use '-' for stdout. -h | --help Show this message. ","date":"2020-07-14","objectID":"/loveit/post/%E7%BC%96%E5%86%99shell%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/:0:0","tags":["Linux","shell","脚本","帮助文档","技巧"],"title":"编写shell帮助信息通用小技巧","uri":"/loveit/post/%E7%BC%96%E5%86%99shell%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"},{"categories":["benchmark","web","Tools"],"content":"web benchmark tools ","date":"2020-07-14","objectID":"/loveit/post/web-benchmark/:1:0","tags":["压测","web","http","工具","持续更新"],"title":"Web 压测工具","uri":"/loveit/post/web-benchmark/"},{"categories":["benchmark","web","Tools"],"content":"Apache Bench ApacheBench 是一个用来衡量http服务器性能的单线程命令行工具。原本针对Apache http服务器，但是也适用于其他http服务器。 如果你的操作系统没有ab工具， 那么只需安装httpd-tools(CentOS)或者apache-utils(Ubuntu)即可。 常用参数说明： -n：执行的请求次数 -c：并发数量 -s：响应的超时时间 -p：post请求的数据文件路径，需要设置-T参数 -T：Content-Type -C：设置cookie，格式为\"name=zhou\" 常用组合： ab -n 10000 -c 1000 http://localhost/index.html ","date":"2020-07-14","objectID":"/loveit/post/web-benchmark/:1:1","tags":["压测","web","http","工具","持续更新"],"title":"Web 压测工具","uri":"/loveit/post/web-benchmark/"},{"categories":["benchmark","web","Tools"],"content":"wrk wrk HTTP是一个现代的基准测试工具能产生显著的负载运行时在一个多核CPU。它结合了多线程设计可伸缩的系统如epoll和kqueue事件通知。 官方github仓库： https://github.com/wg/wrk 编译安装： wget https://github.com/wg/wrk/archive/4.1.0.tar.gz tar xf 4.1.0.tar.gz cd 4.1.0/deps tar xf LuaJIT-2.1.0-beta3.tar.gz -C /usr/local tar xf openssl-1.1.0g.tar.gz -C /usr/local cd .. make WITH_LUAJIT=/usr/local/LuaJIT-2.1.0-beta3 WITH_OPENSSL=/usr/local/openssl-1.1.0g make install 常用参数说明： -t：线程数 -c：http总请求数量 -d：测试时长，e.g. 2s, 2m, 2h 简单使用： wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html ","date":"2020-07-14","objectID":"/loveit/post/web-benchmark/:1:2","tags":["压测","web","http","工具","持续更新"],"title":"Web 压测工具","uri":"/loveit/post/web-benchmark/"},{"categories":["benchmark","web","Tools"],"content":"待续。。。","date":"2020-07-14","objectID":"/loveit/post/web-benchmark/:1:3","tags":["压测","web","http","工具","持续更新"],"title":"Web 压测工具","uri":"/loveit/post/web-benchmark/"},{"categories":["Linux","ECS","故障处理"],"content":"篇幅有限，转至 https://agou-ops.top/linux_sys_fix 进行查看。 ","date":"2020-07-14","objectID":"/loveit/post/ecs-linux-%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/:0:0","tags":["Linux","故障处理"],"title":"ECS-Linux 故障处理","uri":"/loveit/post/ecs-linux-%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/"},{"categories":["Linux","Tools","转载"],"content":"nload工具 nload用于实时查看网卡流量，默认系统都没有安装，首先安装方式如下： $ yum install -y epel-release $ yum install -y nload 使用也非常简单，如下： $ nload Device eth0 [192.168.0.110] (4/5): =================================================================================== Incoming: Curr: 5.21 kBit/s # Incoming：进来的流量 Avg: 4.09 kBit/s # Outgoing：出去的流量 Min: 1.59 kBit/s # Curr：当前的流量值 Max: 12.51 kBit/s # Avg：平均值的流量值 Ttl: 4.16 GByte # Min：最小的流量值 Outgoing: # Max：最大的流量值 Curr: 16.48 kBit/s # Ttl：总的流量值 Avg: 14.38 kBit/s Min: 6.73 kBit/s Max: 28.39 kBit/s ","date":"2020-07-11","objectID":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/:1:0","tags":["Linux","工具","网卡"],"title":"Linux 实时查看网卡流量","uri":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/"},{"categories":["Linux","Tools","转载"],"content":"iftop工具 默认系统没有安装，需要安装，如下： # 需要epel环境 $ yum install -y epel-release $ yum install -y iftop 安装完成之后，输入iftop便可看到如下界面 其中，相关参数解释如下： 界面上面显示的是类似刻度尺的刻度范围，为显示流量图形的长条作标尺用的。 中间的\u003c= =\u003e这两个左右箭头，表示的是流量的方向。 TX：发送流量 RX：接收流量5.TOTAL：总流量6.Cumm：运行iftop到目前时间的总流量 peak：流量峰值 rates：分别表示过去 2s 10s 40s 的平均流量 ","date":"2020-07-11","objectID":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/:2:0","tags":["Linux","工具","网卡"],"title":"Linux 实时查看网卡流量","uri":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/"},{"categories":["Linux","Tools","转载"],"content":"sar命令 sar命令包含在sysstat工具包中，提供系统的众多统计数据。其在不同的系统上命令有些差异，某些系统提供的sar支持基于网络接口的数据统计，也可以查看设备上每秒收发包的个数和流量。 # DEV显示网络接口信息 # 命令后面1 2 意思是：每一秒钟取1次值，取2次 $ sar -n DEV 1 2 另外，-n参数很有用，他有6个不同的开关：DEV | EDEV | NFS | NFSD | SOCK | ALL ，其代表的含义如下： DEV显示网络接口信息。 EDEV显示关于网络错误的统计数据。 NFS统计活动的NFS客户端的信息。 NFSD统计NFS服务器的信息 SOCK显示套接字信息 ALL显示所有5个开关 $ sar -n DEV 1 2 Linux 3.10.0-514.26.2.el7.x86_64 (localhost) 08/31/2019 _x86_64_ (1 CPU) 09:52:28 AM IFACE rxpck/s txpck/s rxkB/s txkB/s rxcmp/s txcmp/s rxmcst/s 09:52:29 AM eth0 2.02 1.01 0.13 0.16 0.00 0.00 0.00 09:52:29 AM lo 0.00 0.00 0.00 0.00 0.00 0.00 0.00 09:52:29 AM IFACE rxpck/s txpck/s rxkB/s txkB/s rxcmp/s txcmp/s rxmcst/s 09:52:30 AM eth0 1.02 1.02 0.07 0.23 0.00 0.00 0.00 09:52:30 AM lo 0.00 0.00 0.00 0.00 0.00 0.00 0.00 Average: IFACE rxpck/s txpck/s rxkB/s txkB/s rxcmp/s txcmp/s rxmcst/s Average: eth0 1.52 1.02 0.10 0.19 0.00 0.00 0.00 Average: lo 0.00 0.00 0.00 0.00 0.00 0.00 0.00 参数说明： IFACE：LAN接口 rxpck/s：每秒钟接收的数据包 txpck/s：每秒钟发送的数据包 rxbyt/s：每秒钟接收的字节数 txbyt/s：每秒钟发送的字节数 rxcmp/s：每秒钟接收的压缩数据包 txcmp/s：每秒钟发送的压缩数据包 rxmcst/s：每秒钟接收的多播数据包 rxerr/s：每秒钟接收的坏数据包 txerr/s：每秒钟发送的坏数据包 coll/s：每秒冲突数 rxdrop/s：因为缓冲充满，每秒钟丢弃的已接收数据包数 txdrop/s：因为缓冲充满，每秒钟丢弃的已发送数据包数 txcarr/s：发送数据包时，每秒载波错误数 rxfram/s：每秒接收数据包的帧对齐错误数 rxfifo/s：接收的数据包每秒FIFO过速的错误数 txfifo/s：发送的数据包每秒FIFO过速的错误数 这种方式简单，直观，推荐使用。 ","date":"2020-07-11","objectID":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/:3:0","tags":["Linux","工具","网卡"],"title":"Linux 实时查看网卡流量","uri":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/"},{"categories":["Linux","Tools","转载"],"content":"cat /proc/net/dev Linux 内核提供了一种通过 /proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取proc文件时，proc文件系统是动态从系统内核读出所需信息并提交的。/proc文件系统中包含了很多目录，其中/proc/net/dev 保存了网络适配器及统计信息。 [root@agou ~]\\# cat /proc/net/dev Inter-| Receive | Transmit face |bytes packets errs drop fifo frame compressed multicast|bytes packets errs drop fifo colls carrier compressed ens32: 11196722 21042 0 0 0 0 0 0 4605085 14465 0 0 0 0 0 0 lo: 1934784 7162 0 0 0 0 0 0 1934784 7162 0 0 0 0 0 0 说明： 最左边的表示接口的名字，Receive表示收包，Transmit表示发送包； bytes表示收发的字节数； packets表示收发正确的包量； errs表示收发错误的包量； drop表示收发丢弃的包量； 其实，我们平时经常用的很多查看网卡实时流量的命令，都是通过读取该目录下的实时流量，并通过简单计算得到的。 ","date":"2020-07-11","objectID":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/:4:0","tags":["Linux","工具","网卡"],"title":"Linux 实时查看网卡流量","uri":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/"},{"categories":["Linux","Tools","转载"],"content":"实时监控脚本1 ifconfig可以查看的是从连上网开始的流量总和，cat /proc/net/dev记录的值也是总流量，那么可以计算一下，实时流量=当前流量-上一秒的流量。 [root@localhost ~]\\# cat network.sh # 传入网卡参数 ethn=$1 while true do RX_pre=$(cat /proc/net/dev | grep $ethn | sed 's/:/ /g' | awk '{print $2}') TX_pre=$(cat /proc/net/dev | grep $ethn | sed 's/:/ /g' | awk '{print $10}') sleep 1 RX_next=$(cat /proc/net/dev | grep $ethn | sed 's/:/ /g' | awk '{print $2}') TX_next=$(cat /proc/net/dev | grep $ethn | sed 's/:/ /g' | awk '{print $10}') clear # echo -e激活转义符 # 输出时间的标题 echo -e \"t RX `date +%k:%M:%S` TX\" RX=$((${RX_next}-${RX_pre})) TX=$((${TX_next}-${TX_pre})) if [[ $RX -lt 1024 ]];then RX=\"${RX}B/s\" elif [[ $RX -gt 1048576 ]];then RX=$(echo $RX | awk '{print $1/1048576 \"MB/s\"}') else RX=$(echo $RX | awk '{print $1/1024 \"KB/s\"}') fi if [[ $TX -lt 1024 ]];then TX=\"${TX}B/s\" elif [[ $TX -gt 1048576 ]];then TX=$(echo $TX | awk '{print $1/1048576 \"MB/s\"}') else TX=$(echo $TX | awk '{print $1/1024 \"KB/s\"}') fi # 输出流量 echo -e \"$ethnt $RX$TX\" done 执行结果如下： [root@localhost ~]\\# ./network.sh eth0 RX 20:23:38 TX eth0 66B/s 0B/s RX 20:23:39 TX eth0 132B/s 0B/s RX 20:23:40 TX eth0 186B/s 194B/s RX 20:23:41 TX eth0 240B/s 194B/s RX 20:23:42 TX eth0 132B/s 0B/s RX 20:23:43 TX eth0 240B/s 194B/s RX 20:23:44 TX eth0 396B/s 4.19727KB/s RX 20:23:45 TX eth0 276B/s 178B/s ","date":"2020-07-11","objectID":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/:5:0","tags":["Linux","工具","网卡"],"title":"Linux 实时查看网卡流量","uri":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/"},{"categories":["Linux","Tools","转载"],"content":"实时监控脚本2 $ cat network_flow.sh # 监控实时网卡流量 # $1 接收所传第一个参数 即要监控的网卡 NIC=$1 # echo -e \"traffic in --- traffic out\" while true;do # $0 命令输出结果 ~ 匹配模式 OLD_IN=`awk '$0~\"'$NIC'\"{print $2}' /proc/net/dev` OLD_OUT=`awk '$0~\"'$NIC'\"{print $10}' /proc/net/dev` sleep 1 NEW_IN=`awk '$0~\"'$NIC'\"{print $2}' /proc/net/dev` NEW_OUT=`awk '$0~\"'$NIC'\"{print $10}' /proc/net/dev` clear # printf不换行 %s占位符 IN=$(printf \"%.1f%s\" \"$(($NEW_IN-$OLD_IN))\" \"B/s\") OUT=$(printf \"%.1f%s\" \"$(($NEW_OUT-$OLD_OUT))\" \"B/s\") echo \" traffic in `date +%k:%M:%S` traffic out \" echo \"$NIC$IN$OUT\" done 执行结果如下： $ ./network_flow.sh eth0 traffic in 11:15:02 traffic out eth0 732.0B/s 948.0B/s traffic in 11:15:03 traffic out eth0 132.0B/s 0.0B/s traffic in 11:15:04 traffic out eth0 132.0B/s 0.0B/s traffic in 11:15:05 traffic out eth0 132.0B/s 0.0B/s traffic in 11:15:06 traffic out eth0 186.0B/s 242.0B/s traffic in 11:15:07 traffic out eth0 132.0B/s 0.0B/s traffic in 11:15:08 traffic out eth0 132.0B/s 0.0B/s traffic in 11:15:09 traffic out eth0 132.0B/s 0.0B/s traffic in 11:15:10 traffic out eth0 240.0B/s 242.0B/s traffic in 11:15:11 traffic out eth0 132.0B/s 0.0B/s 该文章内容收集于网络。 ","date":"2020-07-11","objectID":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/:6:0","tags":["Linux","工具","网卡"],"title":"Linux 实时查看网卡流量","uri":"/loveit/post/linux-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"Mondo Rescue Mondo Rescue（简称 Mondo）：是一款开源免费的故障恢复和备份工具，可以说是 Linux 操作系统下的 Ghost ，你可以轻松地创建系统（Linux 或 Windows）克隆或备份的 ISO 镜像，可以将这些镜像存放在 CD、DVD、磁带、USB 设备、硬盘和 NFS 上。 官方站点:http://www.mondorescue.org/ ","date":"2020-07-10","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:1:0","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"安装 mondo 从官方指定的仓库下载 wget http://mondo.mirror.pclark.com/ftp/pub/mondorescue/centos/7/x86_64/mondorescue.repo -O /etc/yum.repos.d/mondorescue.repo yum install -y mondo 或者直接安装rpm包: yum install -y http://mondo.mirror.pclark.com/ftp/pub/mondorescue/centos/7/x86_64/mondo-3.3.0-1.centos7.x86_64.rpm 使用该方法安装可能会缺少依赖包文件,在这里手动解决依赖关系即可(太多了,说着玩的,还是推荐用在线仓库安装吧…): yum install -y http://ftp.mondorescue.org/centos/7/x86_64/afio-2.5-1.centos7.x86_64.rpm yum install -y http://ftp.mondorescue.org/centos/7/x86_64/mindi-3.3.0-1.centos7.x86_64.rpm yum install -y http://ftp.mondorescue.org/centos/7/x86_64/buffer-1.19-8.centos7.x86_64.rpm ... ","date":"2020-07-10","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:1:1","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"制作光盘镜像 安装完毕后，在终端下输入mondoarchive，即可进入图形安装界面。 mondoarchive See /var/log/mondoarchive.log for details of backup run. Checking sanity of your Linux distribution ....... 随后,按照引导一步步设置即可. ","date":"2020-07-10","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:1:2","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"Remastersys Remastersys 可以将你安装的 Ubuntu、Debian 及其衍生版打包成一个可以用来安装的 Live CD/DVD 的 ISO 镜像文件，可打包一个包含个人数据的 ISO 镜像文件作为操作系统备份，也可以打包一个不包含个人数据的 ISO 镜像文件发布给其他人安装。 ","date":"2020-07-10","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:2:0","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"Remastersys 包下载 $ mkdir tools $ cd tools/ $ wget ftp://ftp.gwdg.de/pub/linux/easyvdr/mirror/remastersys/ubuntu/remastersys/remastersys_3.0.4-2_all.deb $ wget ftp://ftp.gwdg.de/pub/linux/easyvdr/mirror/remastersys/ubuntu/remastersys-gui/remastersys-gui_3.0.4-1_amd64.deb ","date":"2020-07-10","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:2:1","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"安装 Remastersys 依赖 $ sudo apt-get install syslinux-utils isolinux squashfs-tools casper libdebian-installer4 ubiquity-frontend-debconf user-setup discover xresprobe systemd ","date":"2020-07-10","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:2:2","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"安装 Remastersys-gui 依赖 $ sudo apt-get install libvte-common libvte9 plymouth-x11 ","date":"2020-07-10","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:2:3","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"开始安装 Remastersys $ cd tools/ $ sudo dpkg -i remastersys_3.0.4-2_all.deb $ sudo dpkg -i remastersys-gui_3.0.4-1_amd64.deb Remastersys 备份操作系统 命令行模式： $ sudo remastersys backup 图形化模式： $ sudo remastersys-gui ","date":"2020-07-10","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:2:4","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux"],"content":"Apache HTTPD使用Let's Encrypt实现安全连接(https) 安装cerbot: yum update -y yum install -y cerbot 生成高安全性的DH秘钥到/etc/ssl/certs/目录当中去: sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 运行以下命令创建目录, 并使它可写为Apache服务器: sudo mkdir -p /var/lib/letsencrypt/.well-known sudo chgrp www-data /var/lib/letsencrypt sudo chmod g+s /var/lib/letsencrypt 为了避免复制代码和配置更易于维护, 创建以下两个配置代码片段: 编辑/etc/apache2/conf-available/letsencrypt.conf Alias /.well-known/acme-challenge/ \"/var/lib/letsencrypt/.well-known/acme-challenge/\" \u003cDirectory \"/var/lib/letsencrypt/\"\u003e AllowOverride None Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec Require method GET POST OPTIONS \u003c/Directory\u003e 编辑/etc/apache2/conf-available/ssl-params.conf: SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 SSLHonorCipherOrder off SSLSessionTickets off SSLUseStapling On SSLStaplingCache \"shmcb:logs/ssl_stapling(32768)\" SSLOpenSSLConfCmd DHParameters \"/etc/ssl/certs/dhparam.pem\" Header always set Strict-Transport-Security \"max-age=63072000\" 进行启用配置文件之前, 确保mod_ssl 和mod_headers已经被启用: sudo a2enmod ssl sudo a2enmod headers 然后, 启用SSL配置文件, 运行以下命令即可: sudo a2enconf letsencrypt sudo a2enconf ssl-params 启用HTTP/2模块: sudo a2enmod http2 重启httpd让配置生效: systemctl restart httpd 现在，我们可以使用webroot插件运行Certbot工具并获取SSL证书文件： sudo certbot certonly --agree-tos --email agou-ops@foxmail.com --webroot -w /var/lib/letsencrypt/ -d agou-ops.top -d www.agou-ops.top 如果输出以下信息, 则表已经成功申请到SSL证书文件: IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/agou-ops.top/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/agou-ops.top/privkey.pem Your cert will expire on 2020-10-06. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew *all* of your certificates, run \"certbot renew\" - Your account credentials have been saved in your Certbot configuration directory at /etc/letsencrypt. You should make a secure backup of this folder now. This configuration directory will also contain certificates and private keys obtained by Certbot so making regular backups of this folder is ideal. - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le ","date":"2020-07-10","objectID":"/loveit/post/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/:1:0","tags":["Linux","Apache","httpd","SSL"],"title":"Apache HTTPD使用Let's Encrypt","uri":"/loveit/post/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/"},{"categories":["Linux"],"content":"配置虚拟主机 创建一个虚拟主机conf.d/agou-ops-top.conf(仅为示例): \u003cVirtualHost *:80\u003e ServerName mail.agou-ops.top Redirect permanent / https://mail.agou-ops.top/ \u003c/VirtualHost\u003e \u003cVirtualHost *:443\u003e ServerName mail.agou-ops.top Protocols h2 http:/1.1 \u003cIf \"%{HTTP_HOST} == 'www.mail.agou-ops.top'\"\u003e Redirect permanent / https://mail.agou-ops.top/ \u003c/If\u003e DocumentRoot /var/www/mail.agou-ops.top/public_html ErrorLog ${APACHE_LOG_DIR}/mail.agou-ops.top-error.log CustomLog ${APACHE_LOG_DIR}/mail.agou-ops.top-access.log combined SSLEngine On SSLCertificateFile /etc/letsencrypt/live/mail.agou-ops.top/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/mail.agou-ops.top/privkey.pem # Other Apache Configuration \u003c/VirtualHost\u003e 重载httpd使虚拟主机配置生效: systemctl reload httpd 现在, 就可以通过https访问你的站点了: https://agou-ops.top ","date":"2020-07-10","objectID":"/loveit/post/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/:2:0","tags":["Linux","Apache","httpd","SSL"],"title":"Apache HTTPD使用Let's Encrypt","uri":"/loveit/post/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/"},{"categories":["Linux"],"content":"自动更新Let’s Encrypt证书 Let’s Encrypt的证书有效期为90天, 自动更新证书到期前,certbot包创建一个计划, 一天两次, 并自动更新任何证书到期前30天. 解决方法, 添加定时任务, /etc/cron.d/cerbot, 内容如下所示: 0 */12 * * * root test -x /usr/bin/certbot -a \\! -d /run/systemd/system \u0026\u0026 perl -e 'sleep int(rand(3600))' \u0026\u0026 certbot -q renew --renew-hook \"systemctl reload apache2\" 测试更新, 使用certbot的干跑模式进行测试: sudo certbot renew --dry-run ","date":"2020-07-10","objectID":"/loveit/post/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/:3:0","tags":["Linux","Apache","httpd","SSL"],"title":"Apache HTTPD使用Let's Encrypt","uri":"/loveit/post/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/"},{"categories":["Linux"],"content":"参考链接 SSL lab: https://www.ssllabs.com/ Let’s Encrypt: https://letsencrypt.org/ ","date":"2020-07-10","objectID":"/loveit/post/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/:4:0","tags":["Linux","Apache","httpd","SSL"],"title":"Apache HTTPD使用Let's Encrypt","uri":"/loveit/post/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/"},{"categories":["生活","日记"],"content":"​ 2020年06月28日，端午“三天小短假”已经过去了，按常理说应当放假，哪怕一天也好，但我们没有放假，一行五人还是像往常一样出外业，经理呢也完全没有任何表示，当然我也不奢望有何表示，毕竟这个东西看个人，对我来说也就无所谓了。 可今天是周日，又让我们出外业了，早上七点就把我们叫起来（其实八点半才上班），等了一个多小时才出发。 欸，这时候可能就有小伙伴要问了，为什么周日也要上班呢？没有休息的的时间么，这里引用经理的一些话，大概意思是： 项目比较“紧张”，休息的话视情况而言，比如说项目有可能进度快，不到周末就会休息，有时候呢项目“紧张”，也就不休息了。 ​ 嘿嘿，翻译过来就是，除非外面下大雨或者考试与工作时间冲突才会放假休息，否则就别想了，哦，说不定心情好会给放半天假。 嘿嘿\" 嘿嘿 ​ 你也别跟我说来实习就是来锻炼自己的吃苦精神的，那都是放狗臭屁，至少对于我个人而言，不需要。 要不是为了那点学分，学校又强制要求来实习（虽然表面没直接说），扪心自问，谁又会闲着没事来实习呢？这里我可能言重了，但对于我或者我这类人来说，是这样的，毕竟我/我们的志向不在于此，对于以后要混这碗饭的人来说，实习“或许”是个好选择，为什么用“或许”这个词呢，因为决定性因素太多，学校，指导老师，还有项目经理等等。。。 ​ 是啊，他们都能坚持七天无休上班更何况我们这些小青年呢？能这么单纯想的也真是天真烂漫，是的，我们实习生一天在外面到处跑一天加上餐费（算上补贴）工资才六十块左右，和他们一天二三百块，三四百块相比。。。 啊，果然大学生是廉价劳动力，可恶！ 要是我有这工资，不说和他们一样工资待遇，有一半，就算早上七点开始工作到晚上九点半十点下班我也愿意，迫真，哈哈。 ​ 另外呢，我现在十分讨厌别人拿他那一辈的艰辛和难处“教导/开导”我们这些后辈，那时候确实很难，这是毋庸置疑的，我也十分感激前辈们的努力和付出，这才有了当今这样美好的社会。 也许初中高中前辈们的这些话能感染到我们，但现在长大了，有些道理不言而喻，不知不觉之间也开始厌恶这些话，甚至麻痹，对于这些，我只想说，时代变了，每一代人都有每一代人的烦恼和艰辛之处，或许不是身体上的，但精神和身心上的烦恼与伤害，我觉得要比身体上的严重百倍不止！ ​ 这里又扯远了，进入正题。:next_track_button::next_track_button: 上面这些都不是今天真正让我愤懑写下这篇博客的原因，不止我一人给他说过28号下午1:30-3:00考VR，并且需要提前至少半小时来准备考试。 ​ 可是呢，中午十一点半下班了还没见到他人，开车也不知道去哪办些重要的业务了，果然大学生就是大学生，可能我们是一些无所谓的人吧，过了十分钟，也就是十一点四十左右，我让和我一起实习的同班同学打电话给他，哈哈，真是没想到，打过去，这边响了两声，那边直接给挂了！我敲，我还以为在路上呢，快要到了才没接电话，结果呢，又过了十几二十分钟吧，大概十一点五十多，他打电话给另外一个和我们一起实习的女生，说不过来了，让我们打车回去，？？？！！！真是个小机灵鬼呢…个屁。 我们在郊区又在一个位置比较靠大路远的一个村里，能打到车，我估计考试都考完了，随后，果然，在滴滴上等了十分钟没见个车影。 最后，这里要十分感谢马岭岗村里的那个书记大哥把我俩送回去，还有一同实习的那个女生帮我们说清楚原因让大哥带我们回去考试，真是十分感谢。 以上都只是我的个人观点，想扯淡的话，可以在下方评论区和我一起交流交流这方面的一些东西。 在此，最后一次向万恶的资本主义低头。 ","date":"2020-06-28","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E6%9E%9C%E7%84%B6%E5%A4%A7%E5%AD%A6%E7%94%9F%E9%83%BD%E6%98%AF%E5%BB%89%E4%BB%B7%E5%8A%B3%E5%8A%A8%E5%8A%9B%E5%90%97%E5%8F%AF%E6%81%B6/:0:0","tags":["日记","实习","吐槽"],"title":"【日记】果然大学生都是廉价劳动力吗？可恶！","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E6%9E%9C%E7%84%B6%E5%A4%A7%E5%AD%A6%E7%94%9F%E9%83%BD%E6%98%AF%E5%BB%89%E4%BB%B7%E5%8A%B3%E5%8A%A8%E5%8A%9B%E5%90%97%E5%8F%AF%E6%81%B6/"},{"categories":["生活","日记"],"content":"苦逼的实习已经进行到第三天，天气一天比一天热，不过值得高兴的是，不用再一一进户对所有房屋进行测量了，减少了了不少的工作量，因为昨天下午已经用RTK测量好了控制点，那些无数木遮挡的建筑物就可以直接用无人机进行测量了。无需人工再测量。 测量ing测量ing \" 测量ing 另外呢，这里的村民十分的热心好客，天气炎热，给我们切西瓜和冰棍吃，哈哈，我们三人吃了一路（当然没这么夸张），真是不错呢。 另附一张村民家里遇到的山羊兄弟： 山羊兄弟山羊兄弟 \" 山羊兄弟 啊，还有好多户要量，坚持坚持，也就这几天了，港巴嘚！ ","date":"2020-06-25","objectID":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%A9%AC%E5%B2%AD%E5%B2%97%E6%9D%91%E5%AE%9E%E4%B9%A0/:0:0","tags":["日记","实习"],"title":"【日记】马岭岗村实习","uri":"/loveit/post/%E6%97%A5%E8%AE%B0%E9%A9%AC%E5%B2%AD%E5%B2%97%E6%9D%91%E5%AE%9E%E4%B9%A0/"},{"categories":["Linux","Tools"],"content":"本文主要介绍Linux系统下的日志分割工具，Split 和 Logrotate。 ","date":"2020-06-22","objectID":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:0:0","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux","Tools"],"content":"Split Linux 系统自带简单日志文件分割工具。 常用参数列表： 选项 含义 -b 分割后的文档大小，单位是byte -C 分割后的文档，单行最大byte数 -d 使用数字作为后缀(default: 字母)，同时使用-a length(default: 2)指定后缀长度 -l 分割后文档的行数 –verbose 显示输出详细信息 示例： split -l --verbose 1000000 split.test -d -a 3 split.log ╰─$ ls split.test split.test008 split.test017 split.test026 split.test000 split.test009 split.test018 split.test027 split.test001 split.test010 split.test019 split.test028 split.test002 split.test011 split.test020 split.test029 split.test003 split.test012 split.test021 split.test030 split.test004 split.test013 split.test022 split.test031 split.test005 split.test014 split.test023 split.test032 split.test006 split.test015 split.test024 split.test033 split.test007 split.test016 split.test025 ... ","date":"2020-06-22","objectID":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:1:0","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux","Tools"],"content":"Logrotate ","date":"2020-06-22","objectID":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:0","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux","Tools"],"content":"简介及解决方案 Logrotate，即Log rotation日志滚动，属于Linux系统自带工具，基于crontab实现时间点滚动日志，计划每天运行的脚本位于 /etc/cron.daily/logrotate。 GitHub 地址：https://github.com/logrotate/logrotate logrotate 是怎么做到滚动日志时不影响程序正常的日志输出呢？logrotate 提供了两种解决方案。 create copytruncate ","date":"2020-06-22","objectID":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:1","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux","Tools"],"content":"create 这也就是默认的方案，可以通过 create 命令配置文件的权限和属组设置；这个方案的思路是重命名原日志文件，创建新的日志文件。详细步骤如下： 重命名正在输出日志文件，因为重命名只修改目录以及文件的名称，而进程操作文件使用的是 inode，所以并不影响原程序继续输出日志。 创建新的日志文件，文件名和原日志文件一样，注意，此时只是文件名称一样，而 inode 编号不同，原程序输出的日志还是往原日志文件输出。 最后通过某些方式通知程序，重新打开日志文件；由于重新打开日志文件会用到文件路径而非 inode 编号，所以打开的是新的日志文件。 如上也就是 logrotate 的默认操作方式，也就是 mv+create 执行完之后，通知应用重新在新文件写入即可。mv+create 成本都比较低，几乎是原子操作，如果应用支持重新打开日志文件，如 syslog, nginx, mysql 等，那么这是最好的方式。 不过，有些程序并不支持这种方式，压根没有提供重新打开日志的接口；而如果重启应用程序，必然会降低可用性，为此引入了如下方式。 ","date":"2020-06-22","objectID":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:2","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux","Tools"],"content":"copytruncate 该方案是把正在输出的日志拷 (copy) 一份出来，再清空 (trucate) 原来的日志；详细步骤如下： 将当前正在输出的日志文件复制为目标文件，此时程序仍然将日志输出到原来文件中，此时，原文件名也没有变。 清空日志文件，原程序仍然还是输出到预案日志文件中，因为清空文件只把文件的内容删除了，而 inode 并没改变，后续日志的输出仍然写入该文件中。 如上所述，对于 copytruncate 也就是先复制一份文件，然后清空原有文件。 通常来说，清空操作比较快，但是如果日志文件太大，那么复制就会比较耗时，从而可能导致部分日志丢失。不过这种方式不需要应用程序的支持即可。 执行文件： /usr/sbin/logrotate 主配置文件: /etc/logrotate.conf 自定义配置文件: /etc/logrotate.d/*.conf 执行状态文件：/var/lib/logrotate/logrotate.status ","date":"2020-06-22","objectID":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:3","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux","Tools"],"content":"运行 logrotate logrotate 命令格式及常用参数如下所示： logrotate [-dv] [-f|--force] [-s|--state file] config_file .. -d, --debug ：debug 模式，测试配置文件是否有错误，并不会真正执行 rorate 和 compose 操作，但是会打印出整个执行的流程，和调用的脚本等详细信息。 -f, --force ：强制转储文件。 -m, --mail=command ：压缩日志后，发送日志到指定邮箱。 -s, --state=statefile ：使用指定的状态文件。 -v, --verbose ：显示详细转储过程。 通常使用的方法是配合crontab来运行： crontab -e */30 * * * * /usr/sbin/logrotate /etc/logrotate.d/rsyslog \u003e /dev/null 2\u003e\u00261 \u0026 手动调用 logrotate： # 调用 /etc/lograte.d/ 下配置的所有日志 logrotate /etc/logrotate.conf # 要为某个特定的配置调用 logrotate logrotate -d /etc/logrotate.d/log_file # 开启debug模式，不实际生成日志文件。 ","date":"2020-06-22","objectID":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:4","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux","Tools"],"content":"配置文件详解 这里以系统自带的部分/etc/logrotate.d/rsyslog配置文件为例： /var/log/syslog { rotate 7 daily missingok notifempty delaycompress compress postrotate /usr/lib/rsyslog/rsyslog-rotate endscript } monthly: 日志文件将按月轮循。其它可用值为 daily，weekly 或者 yearly。 rotate 5: 一次将存储 5 个归档日志。对于第六个归档，时间最久的归档将被删除。 compress: 在轮循任务完成后，已轮循的归档将使用 gzip 进行压缩。 delaycompress: 总是与 compress 选项一起用，delaycompress 选项指示 logrotate 不要将最近的归档压缩，压缩 将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。 missingok: 在日志轮循期间，任何错误将被忽略，例如 “文件无法找到” 之类的错误。 notifempty: 如果日志文件为空，轮循不会进行。 create 644 root root: 以指定的权限创建全新的日志文件，同时 logrotate 也会重命名原始日志文件。 postrotate/endscript: 在所有其它指令完成后，postrotate 和 endscript 里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。 其他常用参数： tabooext [+] list:让 logrotate 不转储指定扩展名的文件，缺省的扩展名是.rpm-orig, .rpmsave, v, 和～ missingok:在日志轮循期间，任何错误将被忽略，例如 “文件无法找到” 之类的错误。 size size:当日志文件到达指定的大小时才转储，bytes (缺省) 及 KB (sizek) 或 MB (sizem) copytruncate:用于还在打开中的日志文件，把当前日志备份并截断 nocopytruncate: 备份日志文件但是不截断 create mode owner group : 转储文件，使用指定的文件模式创建新的日志文件 nocreate: 不建立新的日志文件 nodelaycompress: 覆盖 delaycompress 选项，转储同时压缩。 errors address : 专储时的错误信息发送到指定的 Email 地址 ifempty :即使是空文件也转储，这个是 logrotate 的缺省选项。 mail address : 把转储的日志文件发送到指定的 E-mail 地址 nomail : 转储时不发送日志文件 olddir directory:储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统 noolddir: 转储后的日志文件和当前日志文件放在同一个目录下 ","date":"2020-06-22","objectID":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:5","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux","Tools"],"content":"logrotate 日志切割轮询 由于 logrotate 是基于cron运行的，所以这个日志轮转的时间是由 cron 控制的，具体可以查询 cron 的配置文件 /etc/anacrontab，过往的老版本的文件为（/etc/crontab） 使用 crontab 来作为日志轮转的触发容器来修改 logrotate 默认执行时间： $ vim /etc/crontab # 切割时间为每天晚上的12点钟 SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root HOME=/ # run-parts 01 * * * * root run-parts /etc/cron.hourly 59 23 * * * root run-parts /etc/cron.daily 22 4 * * 0 root run-parts /etc/cron.weekly 42 4 1 * * root run-parts /etc/cron.monthly ","date":"2020-06-22","objectID":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:6","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux","Tools"],"content":"附：logrotate 配置文件示例 syslog [root@gop-sg-192-168-56-103 logrotate.d]# cat syslog /var/log/cron /var/log/maillog /var/log/messages /var/log/secure /var/log/spooler { missingok sharedscripts postrotate /bin/kill -HUP `cat /var/run/syslogd.pid 2\u003e /dev/null` 2\u003e /dev/null || true endscript } zabbix-agent [root@gop-sg-192-168-56-103 logrotate.d]# cat zabbix-agent /var/log/zabbix/zabbix_agentd.log { weekly rotate 12 compress delaycompress missingok notifempty create 0664 zabbix zabbix } nginx [root@gop-sg-192-168-56-103 logrotate.d]# cat nginx /var/log/nginx/*.log /var/log/nginx/*/*.log{ daily missingok rotate 14 compress delaycompress notifempty create 640 root adm sharedscripts postrotate [ ! -f /var/run/nginx.pid ] || kill -USR1 `cat /var/run/nginx.pid` endscript } influxdb [root@gop-sg-192-168-56-103 logrotate.d]# cat influxdb /var/log/influxdb/access.log { daily rotate 7 missingok dateext copytruncate compress } ","date":"2020-06-22","objectID":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:7","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/loveit/post/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux","Tools"],"content":"WTF和bashtop是我个人目前在用的系统资源管理面板，界面非常的美观，极具极客风范，在这里我分别做简单介绍。 ","date":"2020-06-12","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:0:0","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux","Tools"],"content":"WTF WTF（又名“wtfutil”）是终端的个人信息仪表板，可快速访问您非常重要但不常需要的统计信息和数据。 项目地址：https://github.com/wtfutil/wtf 官方站点：https://wtfutil.com/ 先放一张截图吧： WTF截图\" WTF截图 面板中有以下展示模块： 世界时间 我的IP地址信息 TODO List（待办事件） 系统安全状态 当前城市天气 电源使用情况 docker 运行状态 资源使用情况 硬盘占用情况 开机时长 好了，废话不多说，直接开始吧。 ","date":"2020-06-12","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:0","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux","Tools"],"content":"安装与使用 首先打开项目的 release仓库 下载可直接使用的二进制包. wget https://github.com/wtfutil/wtf/releases/download/v0.30.0/wtf_0.30.0_linux_amd64.tar.gz tar xf wtf_0.30.0_linux_amd64.tar.gz 解压完成之后，直接运行./wtfutil即可，为了日后方便使用，可以将该程序软连接到用户bin目录进行使用： ln -sv /root/wtfutil /usr/bin/ ","date":"2020-06-12","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:1","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux","Tools"],"content":"配置文件 下面是我的配置文件，配置文件的目录是$HOME/.config/wtf/config.yml，可以拿来参考参考： :information_source:文件比较长，单击»\u003e 这里 «\u003c可直接跳到下一节 wtf:colors:background:blackborder:focusable:darkslatebluefocused:orangenormal:graychecked:yellowhighlight:fore:blackback:grayrows:even:yellowodd:whitegrid:columns:[40,35,35,55]rows:[10,10,10,10,4]refreshInterval:1openFileUtil:\"open\"mods:digitalclock:color:redenabled:truefont:digitalfonthourFormat:24position:top:0left:0height:1width:1refreshInterval:1title:\"big clock\"type:\"digitalclock\"world_time:title:\"World Time\"type:clockscolors:rows:even:\"lightblue\"odd:\"white\"enabled:truelocations:UTC:\"Etc/UTC\"London:\"Europe/London\"Berlin:\"Europe/Berlin\"New_York:\"America/New_York\"China:\"Asia/Shanghai\"position:top:0left:1height:1width:1refreshInterval:15sort:\"alphabetical\"battery:type:powertitle:\"⚡️\"enabled:trueposition:top:1left:3height:1width:1refreshInterval:15todolist:type:todocheckedIcon:\"X\"colors:checked:grayhighlight:fore:\"black\"back:\"orange\"enabled:truefilename:\"todo.yml\"position:top:1left:0height:2width:1refreshInterval:3600ip:type:ipinfotitle:\"My IP\"colors:name:\"lightblue\"value:\"white\"enabled:trueposition:top:0left:2height:1width:2refreshInterval:150prettyweather:enabled:truecity:\"临沂\"position:top:1left:2height:1width:1refreshInterval:300unit:\"m\"view:0language:\"en\"security:enabled:trueposition:top:1left:1height:1width:1refreshInterval:3600docker:type:dockerenabled:truelabelColor:lightblueposition:top:2left:1height:1width:3refreshInterval:1resources:type:resourceusageenabled:trueposition:top:3left:0height:2width:1refreshInterval:1uptime:type:cmdrunnerargs:[\"\"]cmd:\"uptime\"enabled:trueposition:top:4left:1height:1width:3refreshInterval:30disks:type:cmdrunnercmd:\"df\"args:[\"-h\"]enabled:trueposition:top:3left:1height:1width:3refreshInterval:3600 ","date":"2020-06-12","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:2","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux","Tools"],"content":"官方支持模块 单击以展开 Azure DevOps BambooHR Buildkite CDS CircleCI Clocks CmdRunner Crypto Currencies Datadog DEV (dev.to) Digital Clock DigitalOcean Docker Exchange Rates Feed Reader Gerrit Git GitHub GitLab Gitter Google Apps Hacker News Have I Been Pwned (HIBP) IP Addresses Jenkins Jira Kubernetes Logger Mercurial New Relic OpsGenie Pagerduty Pi-hole Power Resource Usage Rollbar Security Sports Spotify Subreddit Textfile Todo Todoist Transmission TravisCI Trello Twitter VictorOps OnCall Weather Services Zendesk ","date":"2020-06-12","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:3","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux","Tools"],"content":"bashtop 官方开源仓库：https://github.com/aristocratos/bashtos 截图\" 截图 主菜单： 主菜单\" 主菜单 选项菜单： 选项菜单\" 选项菜单 ","date":"2020-06-12","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:2:0","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux","Tools"],"content":"安装与使用 Add PPA repository and install bashtop sudo add-apt-repository ppa:bashtop-monitor/bashtop sudo apt update sudo apt install bashtop 安装完毕之后，直接在终端运行bashtop即可。 使用ESC键可以呼出菜单，按下q键退出。 ","date":"2020-06-12","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:2:1","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux","Tools"],"content":"配置文件 All options changeable from within UI. Config files stored in “$HOME/.config/bashtop” folder bashtop.cfg: (auto generated if not found) #? Config file for bashtop v. 0.9.9 #* Color theme, looks for a .theme file in \"$HOME/.config/bashtop/themes\" and \"$HOME/.config/bashtop/user_themes\", \"Default\" for builtin default theme color_theme=\"Default\" #* Update time in milliseconds, increases automatically if set below internal loops processing time, recommended 2000 ms or above for better sample times for graphs update_ms=\"2500\" #* Processes sorting, \"pid\" \"program\" \"arguments\" \"threads\" \"user\" \"memory\" \"cpu lazy\" \"cpu responsive\" \"tree\" #* \"cpu lazy\" updates sorting over time, \"cpu responsive\" updates sorting directly at a cpu usage cost proc_sorting=\"cpu lazy\" #* Reverse sorting order, \"true\" or \"false\" proc_reversed=\"false\" #* Check cpu temperature, only works if \"sensors\", \"vcgencmd\" or \"osx-cpu-temp\" commands is available check_temp=\"true\" #* Draw a clock at top of screen, formatting according to strftime, empty string to disable draw_clock=\"%X\" #* Update main ui when menus are showing, set this to false if the menus is flickering too much for comfort background_update=\"true\" #* Custom cpu model name, empty string to disable custom_cpu_name=\"\" #* Enable error logging to \"$HOME/.config/bashtop/error.log\", \"true\" or \"false\" error_logging=\"true\" #* Show color gradient in process list, \"true\" or \"false\" proc_gradient=\"true\" #* If process cpu usage should be of the core it's running on or usage of the total available cpu power proc_per_core=\"false\" #* Optional filter for shown disks, should be names of mountpoints, \"root\" replaces \"/\", separate multiple values with space disks_filter=\"\" #* Enable check for new version from github.com/aristocratos/bashtop at start update_check=\"true\" #* Enable graphs with double the horizontal resolution, increases cpu usage hires_graphs=\"false\" #* Enable the use of psutil python3 module for data collection, default on OSX use_psutil=\"true\" ","date":"2020-06-12","objectID":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:2:2","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/loveit/post/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"[TOC] ","date":"2020-06-01","objectID":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:0:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"通过 openssl 生成 [root@myhost ~]\\# openssl rand -base64 3 xsSp [root@myhost ~]\\# openssl rand -base64 8 8SlHCsBAiYw= [root@myhost ~]\\# openssl rand -base64 10 nUzBw8ngKGGqWw== `openssl rand -base64 32|tr A-Z a-z|cut -c 1-10` ","date":"2020-06-01","objectID":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:1:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用 date 命令生成 [root@myhost ~]\\# date +%s 1539071518 [root@myhost ~]\\# date +%N 801398716 [root@myhost ~]\\# date +%s%N 1539071555311467855 `date +%s |sha256sum |base64 |head -c 10 ;echo` ","date":"2020-06-01","objectID":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:2:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用 md5sum 生成随机数 date | md5sum ","date":"2020-06-01","objectID":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:3:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用 dd 命令生成随机数 dd if=/dev/urandom bs=1 count=15|base64 -w 0 ","date":"2020-06-01","objectID":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:4:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"通过/dev/random设备产生uuid [root@myhost ~]\\# cat /proc/sys/kernel/random/uuid a3dfb0f2-f893-4e57-9d67-184a88d4cb5d [root@myhost ~]\\# cat /proc/sys/kernel/random/uuid |cut -c 1-8 b80c60d8 ","date":"2020-06-01","objectID":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:5:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用系统环境变量 RANDOM [root@myhost ~]\\# echo $RANDOM 14535 ##说明：linux系统下的环境变量$RANDOM的取值范围是：0–32767 。 产生0-25范围内的数，用这个环境变量对26取余即可。 [root@myhost ~]\\# echo $(($RANDOM%26)) 6 [root@myhost ~]\\# echo $((RANDOM%26)) 11 ##说明：第二个表达式RANDOM前面无$符号好像也可以。 产生6位数的整数，用这个环境变量加上100000即可。 [root@myhost ~]\\# echo $(($RANDOM+100000)) 117482 [root@myhost ~]\\# echo $((RANDOM+100000)) 126058 ##说明：第二个表达式RANDOM前面无$符号好像也可以。 产生加密的随机数码，将随机数管道给命令md5sum命令即可。 [root@myhost ~]\\# echo $RANDOM |md5sum 6ee8cd13547eb044ad13ba014573af6f - 需要固定位数的随机数码，将随机数管道给命令md5sum命令再管道给cut命令即可。 [root@myhost ~]\\# echo $RANDOM |md5sum|cut -c 1-8 de3cfe23 ","date":"2020-06-01","objectID":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:6:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用第三方工具 expect 非交互式程序控制下用mkpasswd命令： yum install -y expect mkpasswd -l 7 # 生成七位密码包含大小写加特殊字符 使用pwgen生成随机可读的密码： yum install pwgen # 生成长度8，含有数字，含有大小写字母的密码4个，列打印 pwgen -ncC 8 4 # 生成长度8，含有数字，含有小写字母，不包含歧义的密码4个，列打印 pwgen -nABC 8 4 # 生成长度16，含有数字，含有大小写字母，含有特殊字符的密码8个，行打印 pwgen -ncy1 16 8 参数说明： -c or –capitalize密码中至少包含一个大写字母 -A or –no-capitalize密码中不包含大写字母 -n or –numerals密码中至少包含一个数字 -0 or –no-numerals密码中不包含数字 -y or –symbols密码中至少包含一个特殊符号 -s or –secure生成完全随机密码 -B or –ambiguous密码中不包含歧义字符（例如1,l,O,0） -H or –sha1=path/to/file[#seed]使用SHA1 hash给定的文件作为一个随机种子 -C在列中打印生成的密码 -1不要在列中打印生成的密码，即一行一个密码 -v or –no-vowels不要使用任何元音，以避免偶然的脏话 其他第三方工具： randpw、spw、gpg、xkcdpass ","date":"2020-06-01","objectID":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:7:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"参考链接 https://blog.csdn.net/yuki5233/article/details/82997001 ","date":"2020-06-01","objectID":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:8:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/loveit/post/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Tools","Android","Ubuntu"],"content":"跨平台安卓投屏神器","date":"2020-05-28","objectID":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"Scrcpy 简介 应用程序可显示和控制通过USB（或通过TCP / IP）连接的Android设备。它不需要任何根访问权限。它适用于GNU / Linux，Windows和macOS。 github地址：https://github.com/Genymobile/scrcpy ","date":"2020-05-28","objectID":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:1:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"配置环境 安装adb服务，使用数据线连接自己的安卓设备，并查看自己的安卓设备： sudo apt-get install android-tools-adb adb start-server $ lsusb Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 005: ID 0bda:0821 Realtek Semiconductor Corp. Bus 001 Device 004: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller Bus 001 Device 003: ID 13d3:a745 IMC Networks Bus 001 Device 054: ID `24ae:1813` ... 找到自己的安卓设备哪一行，24ae、1813在下面会用到。 创建设备文件： 下面命令中的名称71-android是自定义的，我的这个代表安卓7.1的意思。 echo 0x12d1 \u003e ~/.android/adb_usb.ini touch /etc/udev/rules.d/71-android.rules gedit /etc/udev/rules.d/71-android.rules 将以下内容写入刚刚创建的文件，注意，下面的24ae、1813要改成自己的安卓设备的id（见上）： SUBSYSTEM\"usb\", ATTRS{idVendor}“24ae”, ATTRS{idProduct}==“1813”, MODE=“0666” 更改文件权限： chmod 666 /etc/udev/rules.d/90-android.rules 重启 ADB 服务： service udev restart adb kill-server adb start-server ","date":"2020-05-28","objectID":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:2:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"Scrcpy 安装与使用 安装： # 使用snap安装 sudo snap install scrcpy # 或者 apt install scrcpy 列出设备： scrcpy.adb devices 开始投屏： scrcpy ","date":"2020-05-28","objectID":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:3:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"设置无线连接Android设备 :information_source:先使用数据线将手机和电脑连接并在手机端开启「开发者选项」及「USB 调试」 # 开启手机端口 adb tcpip 6666 拔出数据线，开启无线连接： adb connect 192.168.8.154:6666 192.168.8.154为你Android设备的IP地址，可以通过路由器后台获取或者在手机上使用相关软件进行获取。 启动 scrcpy ： scrcpy ","date":"2020-05-28","objectID":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:4:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"Scrcpy 快捷键 Action Shortcut Shortcut (macOS) Switch fullscreen mode Ctrl+f Cmd+f Rotate display left Ctrl+← (left) Cmd+← (left) Rotate display right Ctrl+→ (right) Cmd+→ (right) Resize window to 1:1 (pixel-perfect) Ctrl+g Cmd+g Resize window to remove black borders Ctrl+x | Double-click¹ Cmd+x | Double-click¹ Click on HOME Ctrl+h | Middle-click Ctrl+h | Middle-click Click on BACK Ctrl+b | Right-click² Cmd+b | Right-click² Click on APP_SWITCH Ctrl+s Cmd+s Click on MENU Ctrl+m Ctrl+m Click on VOLUME_UP Ctrl+↑ (up) Cmd+↑ (up) Click on VOLUME_DOWN Ctrl+↓ (down) Cmd+↓ (down) Click on POWER Ctrl+p Cmd+p Power on Right-click² Right-click² Turn device screen off (keep mirroring) Ctrl+o Cmd+o Turn device screen on Ctrl+Shift+o Cmd+Shift+o Rotate device screen Ctrl+r Cmd+r Expand notification panel Ctrl+n Cmd+n Collapse notification panel Ctrl+Shift+n Cmd+Shift+n Copy device clipboard to computer Ctrl+c Cmd+c Paste computer clipboard to device Ctrl+v Cmd+v Copy computer clipboard to device and paste Ctrl+Shift+v Cmd+Shift+v Enable/disable FPS counter (on stdout) Ctrl+i Cmd+i ¹Double-click on black borders to remove them. ²Right-click turns the screen on if it was off, presses BACK otherwise. ","date":"2020-05-28","objectID":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:5:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"参考链接 Scrcpy Documentation: https://github.com/Genymobile/scrcpy ","date":"2020-05-28","objectID":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:6:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/loveit/post/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["VPN","CentOS"],"content":"OpenVPN 简介 OpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现。和传统 VPN 相比，它的优点是简单易用。 [1] OpenVPN允许参与建立VPN的单点使用共享金钥，电子证书，或者用户名/密码来进行身份验证。它大量使用了OpenSSL加密库中的SSLv3/TLSv1 协议函式库。OpenVPN能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Windows 2000/XP/Vista上运行，并包含了许多安全性的功能。它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容。 ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:1:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"OpenVPN 安装 ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:2:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"使用EasyRSA构建 CA 首先从项目Github存储库下载EasyRSA的最新版本并解压： cd \u0026\u0026 wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.5/EasyRSA-nix-3.0.7.tgz tar xzf EasyRSA-3.0.7.tgz 复制模板文件，并进行适当修改： mv EasyRSA-3.0.7 EasyRSA-CA; cd EasyRSA-CA cp vars.example vars # ---------- 编辑 vars 文件内容`95`行左右 ---------- set_var EASYRSA_REQ_COUNTRY \"CN\" set_var EASYRSA_REQ_PROVINCE \"Shandong\" set_var EASYRSA_REQ_CITY \"Jinan\" set_var EASYRSA_REQ_ORG \"AGou\" set_var EASYRSA_REQ_EMAIL \"AGou-ops@foxmail.com\" set_var EASYRSA_REQ_OU \"Community\" 修改完成之后保存退出。 初始化PKI： [root@test EasyRSA-CA]\\# ./easyrsa init-pki Note: using Easy-RSA configuration from: /root/EasyRSA-3.0.7/vars init-pki complete; you may now create a CA or requests. Your newly created PKI dir is: /root/EasyRSA-3.0.7/pki 接下来建立CA： [root@test EasyRSA-CA]\\# ./easyrsa build-ca nopass Note: using Easy-RSA configuration from: /root/EasyRSA-3.0.7/vars Using SSL: openssl OpenSSL 1.0.2k-fips 26 Jan 2017 Generating RSA private key, 2048 bit long modulus ...............+++ ............................................................................................................................+++ e is 65537 (0x10001) You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Common Name (eg: your user, host, or server name) [Easy-RSA CA]: CA creation complete and you may now import and sign cert requests. Your new CA certificate file for publishing is at: /root/EasyRSA-3.0.7/pki/ca.crt 完成后，该脚本将创建两个文件-CA公共证书PKI/ca.crt和CA私钥PKI/private/ca.key ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:2:1","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"安装 OpenVPN 和 EasyRSA 可以在 OpenVPN 的官方 github 仓库 下载最新源码包进行编译安装，在这里为了方便，我使用epel仓库进行安装： yum install epel-release -y yum install openvpn -y 获取最新版本的EasyRSA： cd \u0026\u0026 wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.5/EasyRSA-nix-3.0.7.tgz tar xzf EasyRSA-3.0.7.tgz mv EasyRSA-3.0.7 EasyRSA-Sever1 cd EasyRSA-Sever1 尽管我们已经在 CA 主机上初始化了PKI，但是我们还需要在 OpenVPN 服务器上创建一个新的 PKI ： [root@test EasyRSA-Server1]\\# ./easyrsa init-pki Note: using Easy-RSA configuration from: /root/EasyRSA-Server1/vars init-pki complete; you may now create a CA or requests. Your newly created PKI dir is: /root/EasyRSA-Server1/pki ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:2:2","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"创建Diffie-Hellman和HMAC密钥 生成一个Diffie-Hellman密钥，该密钥将在密钥交换期间使用，并使用HMAC签名文件为连接添加附加的安全层。 在OpenVPN服务器上，生成Diffie-Hellman密钥： cd ~/EasyRSA-Server1 ./easyrsa gen-dh 复制该文件到/etc/openvpn目录中去： cp /root/EasyRSA-Server1/pki/dh.pem /etc/openvpn 接下来，使用openvpn二进制文件生成HMAC签名： openvpn --genkey --secret ta.key 然后将生成的ta.key复制到/etc/openvpn目录中去： cp ta.key /etc/openvpn ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:2:3","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"创建服务器证书和私钥 进入OpenVPN服务器上的EasyRSA目录，并为服务器和证书请求文件生成一个新的私钥： cd ~/EasyRSA-Server1 ./easyrsa gen-req server1 nopass 该命令将创建两个文件，一个私钥（server1.key）和一个证书请求文件（server1.req） 将生成的私钥复制到/etc/openvpn目录： cp /root/EasyRSA-Server1/pki/private/server1.key /etc/openvpn/ 将证书请求发送到CA主机（这里我CA主机与OpenVPN为同一主机）： cp ~/EasyRSA-Server1/pki/reqs/server1.req /tmp 登录CA主机，切换到 EasyRSA 目录并导入证书请求文件： cd ~/EasyRSA-CA ./easyrsa import-req /tmp/server1.req server1 此命令只是将请求文件复制到pki/reqs目录中。 在CA主机上，签署证书： ./easyrsa sign-req server server1 确认信息无误之后，输入 yes 然后点击回车即可。 在CA主机上，将签名的证书server1.crt和ca.crt文件传发送回OpenVPN主机： cp ~/EasyRSA-CA/pki/issued/server1.crt /etc/openvpn/ cp ~/EasyRSA-CA/pki/ca.crt /etc/openvpn/ :warning: 这里需要注意的是：我的CA主机和OpenVPN主机是同一主机，所以上面的/etc/openvpn目录是OpenVPN主机的。 所有步骤都完成之后，在/etc/openvpn目录下应当有这些文件存在： [root@test EasyRSA-CA]\\# ls /etc/openvpn/ ca.crt client dh.pem server server1.crt server1.key ta.key ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:2:4","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"配置OpenVPN服务 将 OpenVPN 的模板配置文件复制到/etc/openvpn： cp /usr/share/doc/openvpn-2.4.9/sample/sample-config-files/server.conf /etc/openvpn/server1.conf 修改server1.conf，找到证书，密钥和DH参数指令并更改文件名： user nobody group nogroup # ---------- 大约在78行左右 ---------- cert server1.crt key server1.key dh dh.pem # 在文件末尾添加以下行。该指令会将消息身份验证算法（HMAC）从SHA1更改为SHA256 auth SHA256 :information_source:可选： 要通过VPN重定向客户端流量，请找到并取消注释redirect-gateway和dhcp-option选项： /etc/openvpn/server1.conf push \"redirect-gateway def1 bypass-dhcp\" push \"dhcp-option DNS 208.67.222.222\" push \"dhcp-option DNS 208.67.220.220\" 默认情况下，使用OpenDNS解析器。您可以更改它并使用CloudFlare，Google或您想要的任何其他DNS解析器。 完整配置文件参考： port 1194 proto udp dev tun ca ca.crt cert server1.crt key server1.key # This file should be kept secret dh dh.pem server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt push \"redirect-gateway def1 bypass-dhcp\" push \"dhcp-option DNS 208.67.222.222\" push \"dhcp-option DNS 208.67.220.220\" keepalive 10 120 tls-auth ta.key 0 # This file is secret cipher AES-256-CBC user nobody group nobody persist-key persist-tun status openvpn-status.log verb 3 explicit-exit-notify 1 auth SHA256 ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:2:5","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"启动 OpenVPN 服务 systemctl start openvpn@server1 成功启动之后，OpenVPN Server 会创建一个 tun 设备，即tun0： [root@test openvpn]\\# ip a show tun0 3: tun0: \u003cPOINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP\u003e mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link/none inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0 valid_lft forever preferred_lft forever inet6 fe80::afaa:c6f7:7ae8:3a76/64 scope link flags 800 valid_lft forever preferred_lft forever 为了正确转发网络数据包，我们需要启用IP转发： echo \"net.ipv4.ip_forward = 1\" \u003e\u003e /etc/sysctl.conf sysctl -p ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:2:6","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"配置客户端接口 创建一个单独的SSL证书，并为每个VPN客户端生成一个不同的配置文件。 客户端私钥和证书请求可以在客户端计算机或服务器上生成。为简单起见，我们将在服务器上生成证书请求，然后将其发送到CA进行签名。 生成客户端证书和配置文件的整个过程如下： 在OpenVPN服务器上生成私钥和证书请求； 将请求发送到要签名的CA计算机； 将签名的SSL证书复制到OpenVPN服务器并生成配置文件； 将配置文件发送到VPN客户端的计算机。 首先，在OpenVPN主机上创建一组目录来存放客户端文件： mkdir -p ~/openvpn-clients/{configs,base,files} base 目录将存储将在所有客户端文件之间共享的基本文件和配置； configs 目录将存储生成的客户端配置； files 目录将存储特定于客户端的证书/密钥对。 复制ca.crt和ta.key文件到~/openvpn-clients/base目录： cp ~/EasyRSA-Server1/ta.key ~/openvpn-clients/base/ cp /etc/openvpn/ca.crt ~/openvpn-clients/base/ 将示例客户端配置文件复制到~/openvpn-clients/base/目录下： cp /usr/share/doc/openvpn-2.4.9/sample/sample-config-files/client.conf ~/openvpn-clients/base/ 编辑client.conf文件以匹配我们的服务器配置： remote 172.16.1.131 1194 # 在文件结尾添加以下内容 auth SHA256 key-direction 1 完整配置文件参考如下所示： client dev tun proto udp remote 172.16.1.131 1194 resolv-retry infinite nobind persist-key persist-tun remote-cert-tls server cipher AES-256-CBC verb 3 auth SHA256 key-direction 1 接下来，创建一个简单的bash脚本，它将基本配置和文件与客户端证书和密钥合并，并将生成的配置存储在~/openvpn-clients/configs目录中： vim ~/openvpn-clients/gen_config.sh #!/bin/bash FILES_DIR=$HOME/openvpn-clients/files BASE_DIR=$HOME/openvpn-clients/base CONFIGS_DIR=$HOME/openvpn-clients/configs BASE_CONF=${BASE_DIR}/client.conf CA_FILE=${BASE_DIR}/ca.crt TA_FILE=${BASE_DIR}/ta.key CLIENT_CERT=${FILES_DIR}/${1}.crt CLIENT_KEY=${FILES_DIR}/${1}.key # Test for files for i in \"$BASE_CONF\" \"$CA_FILE\" \"$TA_FILE\" \"$CLIENT_CERT\" \"$CLIENT_KEY\"; do if [[ ! -f $i ]]; then echo \" The file $idoes not exist\" exit 1 fi if [[ ! -r $i ]]; then echo \" The file $iis not readable.\" exit 1 fi done # Generate client config cat \u003e ${CONFIGS_DIR}/${1}.ovpn \u003c\u003cEOF $(cat ${BASE_CONF}) \u003ckey\u003e $(cat ${CLIENT_KEY}) \u003c/key\u003e \u003ccert\u003e $(cat ${CLIENT_CERT}) \u003c/cert\u003e \u003cca\u003e $(cat ${CA_FILE}) \u003c/ca\u003e \u003ctls-auth\u003e $(cat ${TA_FILE}) \u003c/tls-auth\u003e EOF 赋予执行权限： chmod +x ~/openvpn-clients/gen_config.sh ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:3:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"创建客户端证书私钥和配置 生成客户端私钥和证书请求的过程与生成服务器密钥和证书请求的过程相同。 登录OpenVPN主机为客户端生成一个新的私钥和一个证书请求： cd ~/EasyRSA-Server1 ./easyrsa gen-req client1 nopass 将私钥client1.key复制到~/openvpn-clients/files中： cp ~/EasyRSA-Server1/pki/private/client1.key ~/openvpn-clients/files/ 将证书请求文件传输到CA主机： cp ~/EasyRSA-Server1/pki/reqs/client1.req /tmp 进入CA主机，导入证书请求并进行签署： cd ~/EasyRSA-CA ./easyrsa import-req /tmp/client1.req client1 ./easyrsa sign-req client client1 接下来，将签好名的证书client1.crt文件发送回OpenVPN主机： cp ~/EasyRSA-CA/pki/issued/client1.crt ~/openvpn-clients/files 最后一步是使用gen_config.sh脚本生成客户端配置，切换到~/openvpn-clients目录并使用客户端名称作为参数运行脚本： cd ~/openvpn-clients ./gen_config.sh client1 该脚本将在~/client-configs/configs目录中创建一个名为client1.ovpn的文件： [root@test openvpn-clients]\\# ls ~/openvpn-clients/configs client1.ovpn 此时，客户端配置已创建，可以直接将配置文件传输到要用作客户端的设备上。 如果想要添加其他的客户端，重复这些步骤即可。 ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:4:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"使用 OpenVPN 在Debian系系统下： sudo apt update -y \u0026\u0026 sudo apt instal openvpn 安装完软件包之后，使用以下命令连接到OpenVPN服务器： sudo openvpn --config client1.ovpn ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:5:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"快速安装 OpenVPN sudo apt update -y sudo apt install -y openvpn 从 github 获取一键安装脚本: git clone https://github.com/angristan/openvpn-install.git cd openvpn-install 赋予脚本可执行权限: chmod +x openvpn-install 执行脚本: AUTO_INSTALL=y ./openvpn-install.sh :warning: 注意: 在客户端使用 OpenVPN 时, 要确保服务器端的 OpenVPN 监听的端口处于放行状态. Linux 客户端使用: sudo apt install network-manager-openvpn sudo openvpn ./client.ovpn Windows 客户端使用: 直接去OpenVPN 官方下载站点下载然后导入客户端配置文件 client.ovpn, 然后启动服务即可. ","date":"2020-05-21","objectID":"/loveit/post/openvpn-for-centos/:6:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/loveit/post/openvpn-for-centos/"},{"categories":["VPN","Ubuntu"],"content":"WireGuard 简介 ​ WireGuard是具有最新加密技术的现代VPN（虚拟专用网）技术。与IPsec和OpenVPN等其他类似解决方案相比，WireGuard更快，更易于配置且性能更高。它是一个跨平台，几乎可以在任何地方运行，包括Linux，Windows，Android和macOS。 Wireguard是对等VPN。它不使用客户端-服务器模型。根据其配置，对等方可以充当传统的服务器或客户端。 WireGuard通过在充当隧道的每个对等设备上创建网络接口来工作。对等体通过交换和验证公共密钥（类似于SSH模型）来相互认证。公钥与隧道中允许的IP地址列表进行映射。 VPN流量封装在UDP中。在本教程中，我们将在充当VPN服务器的Ubuntu 18.04计算机上设置WireGuard。我们还将向您展示如何将WireGuard配置为客户端。客户端的流量将通过Ubuntu 18.04服务器进行路由。此设置可用于防御中间人攻击，匿名浏览网络，绕过受地域限制的内容，或允许您的同事在远程工作时安全地连接到公司网络。 ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:1:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"WG安装 更新软件包列表，并安装管理系统存储库所需的工具： sudo apt update sudo apt install software-properties-common 添加 WireGuard 仓库： sudo add-apt-repository ppa:wireguard/wireguard 出现提示时，按Enter键继续。 add-apt-repository也将自动更新软件包列表。 安装WireGuard软件包： sudo apt install wireguard WireGuard作为内核模块运行，该模块被编译为DKMS模块。成功完成后，您将看到以下输出： wireguard: Running module version sanity check. - Original module - No original module exists within this kernel - Installation - Installing to /lib/modules/4.15.0-88-generic/updates/dkms/ depmod... DKMS: install completed. 更新内核时，需要将针对新内核编译WireGuard模块。 ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:2:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"配置WG WireGuard 程序包附带了两个名为wg和wg-quick的命令行工具，可用于配置和管理WireGuard接口。 运行以下命令以生成公钥和私钥： wg genkey | sudo tee /etc/wireguard/privatekey | wg pubkey | sudo tee /etc/wireguard/publickey :information_source: 公私钥放置于/etc/wireguard目录,其中私钥绝对不能与任何人共享 生成密钥后，我们需要配置路由VPN的隧道设备 可以使用ip和wg从命令行设置设备，也可以使用文本编辑器创建配置文件。 创建一个名为wg0.conf(文件名可以随意)的新文件，并添加以下内容： cat \u003e\u003e /etc/wireguard/wg0.conf \u003c\u003c EOF [Interface] Address = 192.168.159.0/24 # 填写网络地址段 SaveConfig = true # 关闭时，接口的当前状态将保存到配置文件中 ListenPort = 51820 # 监听端口 PrivateKey = QNKQCtPo2E5saDnXORaIORhZH6NtcvIJPHqF9EdEL1o= # 私钥文件,即/etc/wireguard/privatekey PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens33 -j MASQUERADE # 在启动之前执行的命令或脚本,使用iptables启用伪装,允许流量离开服务器，从而使VPN客户端可以访问Internet。 PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens33 -j MASQUERADE # 在启动之后执行的命令或脚本,接口关闭后，iptables规则将被删除 EOF 修改privatekey和wg0.conf的权限, 保证其安全性： sudo chmod 600 /etc/wireguard/{privatekey,wg0.conf} 完成后，使用配置文件中指定的属性启动wg0接口： $ sudo wg-quick up wg0 * 输出内容如下所示: [#] ip link add wg0 type wireguard [#] wg setconf wg0 /dev/fd/63 [#] ip -4 address add 192.168.159.0/24 dev wg0 [#] ip link set mtu 1420 up dev wg0 [#] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o ens33 -j MASQUERADE 运行wg show wg0检查接口状态和配置： $ sudo wg show wg0 * 输出内容如下所示: interface: wg0 public key: uD6Xex2eP5CEUVcVP3EZB5csh2JReWXthoVZMzURwCQ= private key: (hidden) listening port: 51820 也可以运行ip a show wg0来验证接口状态： $ ip a show wg0 * 输出内容如下所示: 4: wg0: \u003cPOINTOPOINT,NOARP,UP,LOWER_UP\u003e mtu 1420 qdisc noqueue state UNKNOWN group default qlen 1000 link/none inet 192.168.159.0/24 scope global wg0 valid_lft forever preferred_lft forever 设置wireguard 开机自启: sudo systemctl enable wg-quick@wg0 ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:3:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"服务器网络和防火墙配置 为了使NAT正常工作，我们需要启用IP转发，打开/etc/sysctl.conf文件，并添加或取消注释以下行： ... net.ipv4.ip_forward=1 ... 修改完成之后, 执行sudo sysctl -p使配置永久生效 如果你使用UFW来管理防火墙，则需要在端口51820上打开UDP通信： sudo ufw allow 51820/udp 至此,WG SERVER 已完成配置 ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:4:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"客户端配置 ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:5:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Linux \u0026 macOS 去往官方下载站点(https://wireguard.com/install/), 查看如何安装WireGuard macOS App Store: https://apps.apple.com/us/app/wireguard/id1441195209?ls=1 Ubuntu ≤ 19.04 [module – v1.0.20200413 \u0026 tools – v1.0.20200319] $ sudo add-apt-repository ppa:wireguard/wireguard $ sudo apt-get update $ sudo apt-get install wireguard 设置Linux和macOS客户端过程基本相同, 首先生成公钥与私钥 wg genkey | sudo tee /etc/wireguard/privatekey | wg pubkey | sudo tee /etc/wireguard/publickey 创建/etc/wireguard/wg0.conf并添加以下内容: [Interface] PrivateKey = CLIENT_PRIVATE_KEY # /etc/wireguard/privatekey Address = 192.168.43.0/24 [Peer] PublicKey = SERVER_PUBLIC_KEY # /etc/wireguard/publickey Endpoint = SERVER_IP_ADDRESS:51820 # 对方wireguard server的ip和端口 AllowedIPs = 0.0.0.0/0 ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:5:1","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Windows 直接下载客户端工具: https://download.wireguard.com/windows-client/wireguard-amd64-0.1.0.msi 安装好软件之后, 点击左下角的Add Tunnel, 创建一个新的隧道Create new tunnel name随便起喽, 内容如下: [Interface] PrivateKey = MOeXEby5OG1xQBCP9AJEJEsxmxYDG1FHHzlcOgi/ClI= Address = 192.168.43.0/24 [Peer] PublicKey = uD6Xex2eP5CEUVcVP3EZB5csh2JReWXthoVZMzURwCQ= # 服务器端公钥 Endpoint = 192.168.159.132:51820 # 服务器ip以及端口 AllowedIPs = 0.0.0.0/0 ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:5:2","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"将客户端对等方添加到服务器 最后一步是将客户端公钥和IP地址添加到服务器： # sudo wg set wg0 peer CLIENT_PUBLIC_KEY allowed-ips 10.0.0.2 sudo wg set wg0 peer T5ZTibLaWh9/3EzA1ZfCdiojM0HfXvh99mfVlqHpaU0= allowed-ips 192.168.43.0/24 sudo wg set wg0 peer UqF/BDwShHFulAUN4yx0latMIiIW0Cbb+IuNHEYEBj0= allowed-ips 192.168.43.0/24 确保使用在客户端计算机上生成的公用密钥·（sudo cat /etc/wireguard/publickey）·更改CLIENT_PUBLIC_KEY并调整客户端IP地址（如果不同的话），Windows用户可以从WireGuard软件当中复制公钥 ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:6:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Linux 和 macos 客户端 在Linux客户端上，运行以下命令以打开界面： sudo wg-quick up wg0 现在，应该已连接到Ubuntu服务器，并且来自客户端计算机的流量应通过该服务器进行路由，可以使用以下方法检查连接： $ sudo wg * 输出内容如下所示： interface: wg0 public key: sZThYo/0oECwzUsIKTa6LYXLhk+Jb/nqK4kCCP2pyFg= private key: (hidden) listening port: 48052 fwmark: 0xca6c peer: r3imyh3MCYggaZACmkx+CxlD6uAmICI8pe/PGq8+qCg= endpoint: XXX.XXX.XXX.XXX:51820 allowed ips: 0.0.0.0/0 latest handshake: 1 minute, 22 seconds ago transfer: 58.43 KiB received, 70.82 KiB sent 停止和关闭隧道： sudo wg-quick down wg0 ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:6:1","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Windows 客户端 点击软件上的Activate 即可 ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:6:2","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"一键安装 wireguard https://github.com/angristan/wireguard-install https://github.com/l-n-s/wireguard-install ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:7:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"参考链接 wireguard Quick Start : https://www.wireguard.com/quickstart/ wireguard Install : https://www.wireguard.com/install/ ","date":"2020-05-19","objectID":"/loveit/post/wireguard-vpn-for-ubuntu/:8:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/loveit/post/wireguard-vpn-for-ubuntu/"},{"categories":[],"content":"Markdown is created by Daring Fireball, the original guideline is here. Its syntax, however, varies between different parsers or editors. Please note that HTML fragments in markdown source will be recognized but not parsed or rendered. Also, there may be small reformatting on the original markdown source code after saving. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:0:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Paragraph and line breaks(段落与换行) A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by more than one blank lines. In Typora, you only need to press Return to create a new paragraph. Press Shift + Return to create a single line break. However, most markdown parser will ignore single line break, to make other markdown parsers recognize your line break, you can leave two whitespace at the end of the line, or insert \u003cbr/\u003e. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:1:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Headers(标题) Headers use 1-6 hash characters at the start of the line, corresponding to header levels 1-6. For example: # This is an H1 ## This is an H2 ###### This is an H6 In typora, input ‘#’s followed by title content, and press Return key will create a header. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:2:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Blockquotes(引言) Markdown uses email-style \u003e characters for block quoting. They are presented as: This is a blockquote with two paragraphs. This is first paragraph. This is second pragraph.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. 这是一段中文测试。 In typora, just input ‘\u003e’ followed by quote contents a block quote is generated. Typora will insert proper ‘\u003e’ or line break for you. Block quote inside anther block quote is allowed by adding additional levels of ‘\u003e’. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:3:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Lists(有序无序列表) Input * list item 1 will create an un-ordered list, the * symbol can be replace with + or -. Input 1. list item 1 will create an ordered list, their markdown source code is like: Red Green Blue Red Green Blue ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:4:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Task List(任务列表) Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example: a task list item list syntax required normal formatting, @mentions, #1234 refs incomplete completed You can change the complete/incomplete state by click the checkbox before the item. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:5:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Syntax Highlighting(代码高亮) function helloWorld () { alert(\"Hello, World!\") } public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } } ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:6:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Math Blocks(数学块) You can render LaTeX mathematical expressions using MathJax. Input $$, then press ‘Return’ key will trigger an input field which accept Tex/LaTex source. Following is an example: $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026 \\mathbf{j} \u0026 \\mathbf{k} \\ \\frac{\\partial X}{\\partial u} \u0026 \\frac{\\partial Y}{\\partial u} \u0026 0 \\ \\frac{\\partial X}{\\partial v} \u0026 \\frac{\\partial Y}{\\partial v} \u0026 0 \\ \\end{vmatrix} $$ In markdown source file, math block is LaTeX expression wrapped by ‘$$’ mark: $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026 \\mathbf{j} \u0026 \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} \u0026 \\frac{\\partial Y}{\\partial u} \u0026 0 \\\\ \\frac{\\partial X}{\\partial v} \u0026 \\frac{\\partial Y}{\\partial v} \u0026 0 \\\\ \\end{vmatrix} $$ ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:7:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Tables(表格) Input | First Header | Second Header | and press return key will create a table with two column. After table is created, focus on that table will pop up a toolbar for table, where you can resize, align, or delete table. You can also use context menu to copy and add/delete column/row. Following descriptions can be skipped, as markdown source code for tables are generated by typora automatically. In markdown source code, they look like: | Name | Markdown | HTML tag | | ----------------- | ------------------- | -------------------- | | *Emphasis* | `*Emphasis*` | `\u003cem\u003e\u003c/em\u003e` | | **Strong** | `**Strong**` | `\u003cstrong\u003e\u003c/strong\u003e` | | `code` | ``code`` | `\u003ccode\u003e\u003c/code\u003e` | | ~~Strikethrough~~ | `~~Strikethrough~~` | `\u003cdel\u003e\u003c/del` | | \u003cu\u003eUnderline\u003c/u\u003e | `\u003cu\u003eunderline\u003c/u\u003e` | `\u003cu\u003e\u003c/u\u003e` | Name Markdown HTML tag Emphasis *Emphasis* \u003cem\u003e\u003c/em\u003e Strong **Strong** \u003cstrong\u003e\u003c/strong\u003e code `code` \u003ccode\u003e\u003c/code\u003e Strikethrough ~~Strikethrough~~ \u003cdel\u003e\u003c/del Underline \u003cu\u003eunderline\u003c/u\u003e \u003cu\u003e\u003c/u\u003e ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:8:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Footnotes(注释) You can create footnotes like this[^footnote]. [^footnote]: Here is the *text* of the **footnote**. will produce: You can create footnotes like this1. Mouse on the ‘footnote’ superscript to see content of the footnote. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:9:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Horizontal Rules(水平线) Input *** or --- on a blank line and press return will draw a horizontal line. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:10:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Links(超链接) Markdown supports two style of links: inline and reference. In both styles, the link text is delimited by [square brackets]. To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example: This is [an example](http://example.com/ \"Title\") inline link. [This link](http://example.net/) has no title attribute. will produce: This is an example inline link. (\u003cp\u003eThis is \u003ca href=\"http://example.com/\" title=\"Title\"\u003e) This link has no title attribute. (\u003cp\u003e\u003ca href=\"http://example.net/\"\u003eThis link\u003c/a\u003e has no) ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:11:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Internal Links(页内链接) You can set the href to headers, which will create a bookmark that allow you to jump to that section after clicking. For example: Command(on Windows: Ctrl) + Click This link will jump to header Block Elements. To see how to write that, please move cursor or click that link with ⌘ key pressed to expand the element into markdown source. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:11:1","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Reference Links(参考链接) Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link: This is [an example][id] reference-style link. Then, anywhere in the document, you define your link label like this, on a line by itself: [id]: http://example.com/ \"Optional Title Here\" In typora, they will be rendered like: This is an example reference-style link. The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — e.g., to link the word “Google” to the google.com web site, you could simply write: [Google][] And then define the link: [Google]: http://google.com/ In typora click link will expand it for editing, command+click will open the hyperlink in web browser. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:11:2","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"URLs Typora allows you to insert urls as links, wrapped by \u003cbrackets\u003e. \u003ci@typora.io\u003e becomes i@typora.io. Typora will aslo auto link standard URLs. e.g: www.google.com. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:12:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Images(图片) Image looks similar with links, but it requires an additional ! char before the start of link. Image syntax looks like this: ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg \"Optional title\") You are able to use drag \u0026 drop to insert image from image file or we browser. And modify the markdown source code by clicking on the image. Relative path will be used if image is in same directory or sub-directory with current editing document when drag \u0026 drop. For more tips on images, please read http://support.typora.io//Images/ ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:13:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Emphasis(突出强调) Markdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML \u003cem\u003e tag. E.g: *single asterisks* _single underscores_ output: single asterisks single underscores GFM will ignores underscores in words, which is commonly used in code and names, like this: wow_great_stuff do_this_and_do_that_and_another_thing. To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it: \\*this text is surrounded by literal asterisks\\* Typora recommends to use * symbol. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:14:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Strong(加粗) double *’s or _’s will be wrapped with an HTML \u003cstrong\u003e tag, e.g: **double asterisks** __double underscores__ output: double asterisks double underscores Typora recommends to use ** symbol. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:15:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Code(代码块) To indicate a span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example: Use the `printf()` function. will produce: Use the printf() function. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:16:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"highlight shortcode(高亮代码块) example: {{\u003c highlight go \"linenos=table,hl_lines=8 15-17,linenostart=199\" \u003e}} // ... code {{\u003c /highlight \u003e}} result: // GetTitleFunc returns a func that can be used to transform a string to // title case. // // The supported styles are // // - \"Go\" (strings.Title) // - \"AP\" (see https://www.apstylebook.com/) // - \"Chicago\" (see http://www.chicagomanualofstyle.org/home.html) // // If an unknown or empty style is provided, AP style is what you get. func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \"go\": return strings.Title case \"chicago\": tc := transform.NewTitleConverter(transform.ChicagoStyle) return tc.Title default: tc := transform.NewTitleConverter(transform.APStyle) return tc.Title } } ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:17:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Strikethrough(删除线) GFM adds syntax to create strikethrough text, which is missing from standard Markdown. ~~Mistaken text.~~ becomes Mistaken text. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:18:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Underline(下划线) Underline is powered by raw HTML. \u003cu\u003eUnderline\u003c/u\u003e becomes Underline. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:19:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Emoji :happy:(表情) Input emoji with syntax :smile:. User can trigger auto-complete suggestions for emoji by pressing ESC key, or trigger it automatically after enable it on preference panel. Also, input UTF8 emoji char directly from Edit -\u003e Emoji \u0026 Symbols from menu bar is also supported. ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:20:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":[],"content":"Inline Math To use this feature, first, please enable it in Preference Panel -\u003e Markdown Tab. Then use $ to wrap TeX command, for example: $\\lim_{x \\to \\infty} \\exp(-x) = 0$ will be rendered as LaTeX command. To trigger inline preview for inline math: input “$”, then press ESC key, then input TeX command, a preview tooltip will be visible like below: Here is the text of the footnote. ↩︎ ","date":"2020-04-16","objectID":"/loveit/post/hello-world/:21:0","tags":[],"title":"Hello World","uri":"/loveit/post/hello-world/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧  将此页保存为书签，以备将来参考! ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode. ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \" The Stormtroopocat 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The DojocatAlt text \" The Dojocat 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 LoveIt 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/loveit/post/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/loveit/post/basic-markdown-syntax/"},{"categories":null,"content":"岂能尽如人意，但求无愧我心。 本站地址：http://x.agou-ops.top 主站地址：https://agou-ops.top my Docs：https://agou-ops.top/beforeWork Docs 备用站点1： http://bak.agou-ops.top/mydocs Docs 备用站点2：https://d.agou-ops.top myStudyNote：https://agou-ops.top/myStudyNote 发布站点：http://fabu.agou-ops.top/ ","date":"2019-08-02","objectID":"/loveit/about/:0:0","tags":null,"title":"关于博主","uri":"/loveit/about/"},{"categories":["hugo","shortcode"],"content":"What a Shortcode is Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video \u003ciframes\u003e) to Markdown content. We think this contradicts the beautiful simplicity of Markdown’s syntax. Hugo created shortcodes to circumvent these limitations. A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template. Note that shortcodes will not work in template files. If you need the type of drop-in functionality that shortcodes provide but in a template, you most likely want a [partial template][partials] instead. In addition to cleaner Markdown, shortcodes can be updated any time to reflect new classes, techniques, or standards. At the point of site generation, Hugo shortcodes will easily merge in your changes. You avoid a possibly complicated search and replace operation. More details: https://gohugo.io/content-management/shortcodes/ ","date":"2019-03-04","objectID":"/loveit/post/shortcodes-preview/:1:0","tags":[],"title":"Shortcodes Preview","uri":"/loveit/post/shortcodes-preview/"},{"categories":["hugo","shortcode"],"content":"blockquotes Normal quote: This is a simple quote. Quote with author: This is a quote with only an Author named Author2. Author2 Quote with author and source: This is a quote from Author3 and source “source.” Author3 Source Quote with author and link: This is a quote from Author4 and links to https://www.google.com. Author4 google.com Quote with author, link and title: This is a quote from Author5 and links to https://www.google.com with title “Google.” Author5 Google Quote with author and a link longer than 32 characters, string is first cut at 32 characters then everything after the last forward slash is removed This is a quote from Author5 and links to https://twitter.com/CryptoGangsta/status/716427930126196737 which is longer than 32 characters. And this is a new line in the quote with the HTML br tag. Author6 twitter.com/CryptoGangsta/... Test from the Octopress blockquote page at: http://octopress.org/docs/plugins/blockquote/ Over the past 24 hours I’ve been reflecting on my life \u0026 I’ve realized only one thing. I need a medieval battle axe. @allanbranch twitter.com/allanbranch/status/... ","date":"2019-03-04","objectID":"/loveit/post/shortcodes-preview/:2:0","tags":[],"title":"Shortcodes Preview","uri":"/loveit/post/shortcodes-preview/"},{"categories":["hugo","shortcode"],"content":"music ","date":"2019-03-04","objectID":"/loveit/post/shortcodes-preview/:3:0","tags":[],"title":"Shortcodes Preview","uri":"/loveit/post/shortcodes-preview/"},{"categories":["hugo","shortcode"],"content":"gist(+1) We can embed the gist in our content via username and gist ID pulled from the URL: {{\u003c gist AGou-ops 5e0b2df2f0d23c65742a633ed0225cf6 \u003e}} Display: ","date":"2019-03-04","objectID":"/loveit/post/shortcodes-preview/:4:0","tags":[],"title":"Shortcodes Preview","uri":"/loveit/post/shortcodes-preview/"},{"categories":["hugo","shortcode"],"content":"expand The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example Is this learn theme rocks ? Yes !. ","date":"2019-03-04","objectID":"/loveit/post/shortcodes-preview/:5:0","tags":[],"title":"Shortcodes Preview","uri":"/loveit/post/shortcodes-preview/"},{"categories":["hugo","shortcode"],"content":"Usage this shortcode takes exactly one optional parameter to define the text that appears next to the expand/collapse icon. (default is “Click to expand”) {{\u003c expand \"Is this learn theme rocks ?\" \u003e}} Yes !. {{\u003c /expand \u003e}} ","date":"2019-03-04","objectID":"/loveit/post/shortcodes-preview/:5:1","tags":[],"title":"Shortcodes Preview","uri":"/loveit/post/shortcodes-preview/"},{"categories":["hugo","shortcode"],"content":"youtube ","date":"2019-03-04","objectID":"/loveit/post/shortcodes-preview/:6:0","tags":[],"title":"Shortcodes Preview","uri":"/loveit/post/shortcodes-preview/"},{"categories":["hugo","shortcode"],"content":"vimeo ","date":"2019-03-04","objectID":"/loveit/post/shortcodes-preview/:7:0","tags":[],"title":"Shortcodes Preview","uri":"/loveit/post/shortcodes-preview/"},{"categories":["hugo","shortcode"],"content":"youku ","date":"2019-03-04","objectID":"/loveit/post/shortcodes-preview/:8:0","tags":[],"title":"Shortcodes Preview","uri":"/loveit/post/shortcodes-preview/"},{"categories":["博客"],"content":"Thanks for liwenyip/hugo-easy-gallery \u0026 Zebradil · Pull Request #48 . Now, we could use {{\u003c gallery \u003e}} shortcode in hugo-theme-jane. ","date":"2019-03-03","objectID":"/loveit/post/image-preview/:0:0","tags":[],"title":"Image Preview","uri":"/loveit/post/image-preview/"},{"categories":["博客"],"content":"Normal Image This is an image in static/image folder. ![This is an image in `static/image` folder.](https://agou-images.oss-cn-qingdao.aliyuncs.com/violet-evergarden/Screenshot_2020-03-29-21-40-19.png) ","date":"2019-03-03","objectID":"/loveit/post/image-preview/:1:0","tags":[],"title":"Image Preview","uri":"/loveit/post/image-preview/"},{"categories":["博客"],"content":"{{\u003c figure \u003e}} shortcode ","date":"2019-03-03","objectID":"/loveit/post/image-preview/:2:0","tags":[],"title":"Image Preview","uri":"/loveit/post/image-preview/"},{"categories":["博客"],"content":"figure image with title {{\u003c figure src=\"/image/test.png\" title=\"figure image with title\" \u003e}} ","date":"2019-03-03","objectID":"/loveit/post/image-preview/:2:1","tags":[],"title":"Image Preview","uri":"/loveit/post/image-preview/"},{"categories":["博客"],"content":"figure image with caption {{\u003c figure src=\"/image/example.jpg\" caption=\"figure image with caption figure image with caption figure image with caption figure image with caption figure image with caption\" \u003e}} ","date":"2019-03-03","objectID":"/loveit/post/image-preview/:2:2","tags":[],"title":"Image Preview","uri":"/loveit/post/image-preview/"},{"categories":["博客"],"content":"more {{\u003c figure \u003e}} shortcode usage Specifying your image files: {{\u003c figure src=\"thumb.jpg\" link=\"image.jpg\" \u003e}} will use thumb.jpg for thumbnail and image.jpg for lightbox {{\u003c figure src=\"image.jpg\" \u003e}} or {{\u003c figure link=\"image.jpg\" \u003e}} will use image.jpg for both thumbnail and lightbox {{\u003c figure link=\"image.jpg\" thumb=\"-small\" \u003e}} will use image-small.jpg for thumbnail and image.jpg for lightbox Optional parameters: All the features/parameters of Hugo’s built-in figure shortcode work as normal, i.e. src, link, title, caption, class, attr (attribution), attrlink, alt size (e.g. size=\"1024x768\") pre-defines the image size for PhotoSwipe. Use this option if you don’t want to pre-load the linked image to determine its size. class allows you to set any custom classes you want on the \u003cfigure\u003e tag. Optional parameters for standalone {{\u003c figure \u003e}} shortcodes only (i.e. don’t use on {{\u003c figure \u003e}} inside {{\u003c gallery \u003e}} - strange things may happen if you do): caption-position and caption-effect work the same as for the {{\u003c gallery \u003e}} shortcode (see below). width defines the max-width of the image displayed on the page. If using a thumbnail for a standalone figure, set this equal to your thumbnail’s native width to make the captions behave properly (or feel free to come up with a better solution and submit a pull request :-)). Also use this option if you don’t have a thumbnail and you don’t want the hi-res image to take up the entire width of the screen/container. class=\"no-photoswipe\" prevents a \u003cfigure\u003e from being loaded into PhotoSwipe. If you click on the figure you’ll instead a good ol' fashioned hyperlink to a bigger image (or - if you haven’t specified a bigger image - the same one). ","date":"2019-03-03","objectID":"/loveit/post/image-preview/:2:3","tags":[],"title":"Image Preview","uri":"/loveit/post/image-preview/"},{"categories":["博客"],"content":"{{\u003c gallery \u003e}} shortcode ","date":"2019-03-03","objectID":"/loveit/post/image-preview/:3:0","tags":[],"title":"Image Preview","uri":"/loveit/post/image-preview/"},{"categories":["博客"],"content":"simple gallery To specify a directory of image files: {{\u003c gallery dir=\"/img/your-directory-of-images/\" \u003e}} The images are automatically captioned with the file name. [image].jpg is used for the hi-res image, and [image]-thumb.jpg is used for the thumbnails. If [image]-thumb.jpg doesn’t exist, then [image].jpg will be used for both hi-res and thumbnail images. The default thumbnail suffix is -thumb, but you can specify a different one e.g. thumb=\"-small\" or thumb=\"_150x150\". ","date":"2019-03-03","objectID":"/loveit/post/image-preview/:3:1","tags":[],"title":"Image Preview","uri":"/loveit/post/image-preview/"},{"categories":["博客"],"content":"To specify individual image files {{\u003c gallery \u003e}} {{\u003c figure src=\"image1.jpg\" \u003e}} {{\u003c figure src=\"image2.jpg\" \u003e}} {{\u003c figure src=\"image3.jpg\" \u003e}} {{\u003c /gallery \u003e}} Optional parameters: caption-position - determines the captions' position over the image. Options: bottom (default) center none hides captions on the page (they will only show in PhotoSwipe) caption-effect - determines if/how captions appear upon hover. Options: slide (default) fade none (captions always visible) hover-effect - determines if/how images change upon hover. Options: zoom (default) grow shrink slideup slidedown none hover-transition - determines if/how images change upon hover. Options: not set - smooth transition (default) none - hard transition ","date":"2019-03-03","objectID":"/loveit/post/image-preview/:3:2","tags":[],"title":"Image Preview","uri":"/loveit/post/image-preview/"}]